# frozen_string_literal: true

# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "fileutils"

require "bundler/gem_tasks"
require "rubocop/rake_task"
require "rake/testtask"
require_relative "../shared/gem_defaults"

RuboCop::RakeTask.new # Configuration is in .rubocop.yml
Rake::TestTask.new :test do |t|
  t.libs << "test"
  t.libs << "lib"
  t.test_files = FileList["test/**/*_test.rb"]
end

desc "Run the CI build"
task :ci do
  puts "\nBUILDING gapic-generator-cloud\n"
  puts "\ngapic-generator-cloud rubocop\n"
  Rake::Task[:rubocop].invoke
  puts "\ngapic-generator-cloud test\n"
  Rake::Task[:test].invoke
end

rest_libs = [:compute_small]
grpc_libs = [:language_v1, :language_v1beta1, :language_v1beta2, :secretmanager_v1beta1, :speech_v1, :vision_v1]
libs = rest_libs + grpc_libs

desc "Update the proto binary dumps which are used to generate templates"
task :bin do
  Rake::Task["bin:templates"].invoke
end
namespace :bin do |namespace|
  desc "Update the proto binary dumps for the templates"
  task :templates do
    libs.each do |lib|
      task = namespace[lib]
      puts "Invoking #{task.name}"
      task.invoke
    end
  end

  libs.each do |lib|
    desc "Update the proto binary dumps for #{lib}"
    task lib do
      update_templates_proto_bins lib
    end
  end
end

desc "Generate the expected output for tests"
task :gen do
  Rake::Task["gen:templates"].invoke
  Rake::Task["gen:secretmanager_wrapper"].invoke
  Rake::Task["gen:compute_small_wrapper"].invoke
end
namespace :gen do |namespace|
  desc "Generate the expected output for template tests"
  task :templates do
    libs.each do |lib|
      task = namespace[lib]
      puts "Invoking #{task.name}"
      task.invoke
    end
  end

  grpc_libs.each do |lib|
    desc "Generate the expected output for #{lib}"
    task lib do
      generate_cloud_templates lib
    end
  end

  rest_libs.each do |lib|
    desc "Generate the expected output for #{lib}"
    task lib do
      generate_cloud_templates lib, rest_only: true
    end
  end

  desc "Generate the expected output for secretmanager_wrapper"
  task :secretmanager_wrapper do
    generate_cloud_templates :secretmanager_wrapper, wrapper: true
  end

  desc "Generate the expected output for compute_small_wrapper"
  task :compute_small_wrapper do
    generate_cloud_templates :compute_small_wrapper, wrapper: true
  end
end

desc "Start an interactive shell."
task :console do
  require "irb"
  require "irb/completion"
  require "pp"

  $LOAD_PATH.unshift "lib"

  ARGV.clear
  IRB.start
end

desc "Build the docker image."
task :image, :name do |_t, args|
  image_name = args[:name] || "ruby-gapic-generator-cloud"
  sh "docker build -t #{image_name} ."
end
namespace :image do
  desc "Build the docker image using the local base image code"
  task :local, :name do |_t, args|
    image_name = args[:name] || "ruby-gapic-generator-cloud"
    prepare_embedded_gapic_generator_directory
    sh "docker build -t #{image_name} ."
    rm_r base_tmp_dir
  end

  task :push do
    push_image
  end

  task :release do
    push_image tag_latest: true
  end
end

task :release_gem do
  Rake::Task["build"].invoke
  Rake::Task["release:rubygem_push"].invoke
end

def push_image tag_latest: false
  require_relative "lib/gapic/generator/cloud/version.rb"
  version = ENV["RELEASE_VERSION"] || Gapic::Generator::Cloud::VERSION
  match = /^((\d+)\.\d+)\.\d+$/.match version
  raise "Bad version format: #{version}" unless match
  version_minor = match[1]
  version_major = match[2]
  project = ENV["PROJECT_ID"] || "gapic-images"
  image_url = "gcr.io/#{project}/gapic-generator-ruby"
  prepare_embedded_gapic_generator_directory
  sh "gcloud builds submit --project=#{project} --config=cloudbuild.yaml" \
     " --substitutions=_IMAGE_URL=#{image_url},_VERSION=#{version} ."
  if tag_latest
    sh "gcloud container images add-tag --quiet #{image_url}:#{version}" \
       " #{image_url}:#{version_minor} #{image_url}:#{version_major} #{image_url}:latest"
  end
end

def prepare_embedded_gapic_generator_directory
  FileUtils.mkdir_p "tmp"
  base_source_dir = File.join File.dirname(__dir__), "gapic-generator"
  base_tmp_dir = File.join __dir__, "tmp", "gapic-generator"
  FileUtils.rm_rf base_tmp_dir
  FileUtils.cp_r base_source_dir, base_tmp_dir
end

##
# @param wrapper [Boolean] Omit generating proto and grpc stubs
#   This is used for generating wrapper libraries (e.g. secretmanager_wrapper)
#   The generator decides whether to generate a wrapper based on a
#   `:gem:version_dependencies` parameter that is present
#   in e.g. `shared/config/secretmanager_wrapper.yml`
#
# @param rest_only [Boolean] Omit generating grpc stubs
#   This is used for generating rest-only client libraries (e.g. compute_small)
#   The generator decides which transports (e.g. rest or grpc) to generate
#   based on a `:transport` parameter that is present
#   in e.g. `shared/config/compute_small.yml`
#
def generate_cloud_templates service, wrapper: false, rest_only: false
  puts "Running templates generation for #{service}"
  require "gapic/generators/cloud_generator"

  target_path = File.expand_path File.join("expected_output", String(service))
  FileUtils.rm_rf target_path
  FileUtils.mkdir_p target_path

  ruby_plugin_args = if wrapper
      []
    elsif rest_only
      ["--ruby_out=#{target_path}/lib"]
    else
      ["--ruby_out=#{target_path}/lib", "--grpc_out=#{target_path}/lib"]
    end

  protoc_cmd = [
    "grpc_tools_ruby_protoc",
    "--experimental_allow_proto3_optional=1",
    "-I ../shared/protos",
    "-I ../shared/api-common-protos",
    "-I ../shared/googleapis",
    "--ruby_gapic_opt=generator=cloud"
  ] + ruby_plugin_args + [
    "--ruby_gapic_out=#{target_path}",
    "--ruby_gapic_opt=configuration=../shared/config/#{service}.yml"
  ]

  # Add optional samples paths
  samples = samples_for service
  protoc_cmd << "--ruby_gapic_opt='samples=#{samples.join ';'}'" if samples

  # Add optional grpc service config
  grpc_service_config = grpc_service_config_for service
  unless grpc_service_config.empty?
    protoc_cmd << "--ruby_gapic_opt='grpc-service-config=#{grpc_service_config.join ';'}'"
  end

  # Add optional service.yaml
  service_yaml = service_yaml_for service
  if service_yaml
    protoc_cmd << "--ruby_gapic_opt='service-yaml=#{service_yaml}'"
  end

  # Add the proto files
  protoc_cmd << protos_for(service).join(" ")

  protoc_cmd = protoc_cmd.join " "
  puts protoc_cmd if ENV["VERBOSE"]

  protoc_cmd_output = `#{protoc_cmd}`
  puts protoc_cmd_output if ENV["VERBOSE"]
end

##
# Updates the binary dumps that are used in :gen namespace raketasks
# by calling through to the raketasks defined in `shared`
#
def update_templates_proto_bins service
  Dir.chdir "../shared" do
    Bundler.with_unbundled_env do
      puts "Running binary input file generation for #{service}"
      sh "bundle exec rake gen:#{service}", verbose: false
    end
  end
end

task default: :ci
