<%- assert_locals service, method -%>
<% method_name = method.descriptor.name.underscore %>
describe "<%= method_name %>" do
  let :custom_error do
    CustomTestErrorV1.new "Custom test error for Google::Cloud::Speech::V1::SpeechClient#<%= method_name %>."
  end

  it "invokes <%= method_name %> without error" do
    # Create request parameters
    request = {}

    # Create expected grpc response
    expected_response = {}
    expected_response = Google::Gax.to_proto expected_response,
                                             <%= mp.return_type %>

    # Mock Grpc layer
    mock_method = proc do |requests|
      request = requests.first
      OpenStruct.new execute: [expected_response]
    end
    mock_stub = MockGrpcClientStubV1.new :<%= method_name %>, mock_method

    # Mock auth layer
    mock_credentials = MockSpeechCredentialsV1.new "<%= method_name %>"

    Google::Cloud::Speech::V1::Speech::Stub.stub :new, mock_stub do
      Google::Cloud::Speech::V1::Credentials.stub :default, mock_credentials do
        client = Google::Cloud::Speech.new version: :v1

        # Call method
        response = client.<%= method_name %> [request]

        # Verify the response
        assert_equal 1, response.count
        assert_equal expected_response, response.first
      end
    end
  end

  it "invokes <%= method_name %> with error" do
    # Create request parameters
    request = {}

    # Mock Grpc layer
    mock_method = proc { raise custom_error }
    mock_stub = MockGrpcClientStubV1.new :<%= method_name %>, mock_method

    # Mock auth layer
    mock_credentials = MockSpeechCredentialsV1.new "<%= method_name %>"

    Google::Cloud::Speech::V1::Speech::Stub.stub :new, mock_stub do
      Google::Cloud::Speech::V1::Credentials.stub :default, mock_credentials do
        client = Google::Cloud::Speech.new version: :v1

        # Call method
        err = assert_raises Google::Gax::GaxError do
          client.<%= method_name %> [request]
        end

        # Verify the GaxError wrapped the custom error that was raised.
        assert_match custom_error.message, err.message
      end
    end
  end
end