<%- namespaces = service.address[0..-2] -%>
# frozen_string_literal: true

<%= render partial: "shared/license" %>
require "minitest/autorun"
require "minitest/spec"

require "google/gax"

require "<%= ruby_path service.address[0..-3] %>"
require "<%= ruby_path service.address %>_client"
require "<%= ruby_path namespaces %>/cloud_<%= service.name.underscore %>_services_pb"
require "google/longrunning/operations_pb"
require "google/longrunning/operations_services_pb"

class CustomTestError<%= namespaces.last.upcase_first %> < StandardError; end
# Mock for the GRPC::ClientStub class.
class MockGrpcClientStub<%= namespaces.last.upcase_first %>
  # @param expected_symbol [Symbol] the symbol of the grpc method to be mocked.
  # @param mock_method [Proc] The method that is being mocked.
  def initialize expected_symbol, mock_method
    @expected_symbol = expected_symbol
    @mock_method = mock_method
  end

  # This overrides the Object#method method to return the mocked method when the mocked method
  # is being requested. For methods that aren"t being tested, this method returns a proc that
  # will raise an error when called. This is to assure that only the mocked grpc method is being
  # called.
  #
  # @param symbol [Symbol] The symbol of the method being requested.
  # @return [Proc] The proc of the requested method. If the requested method is not being mocked
  #   the proc returned will raise when called.
  def method symbol
    return @mock_method if symbol == @expected_symbol

    # The requested method is not being tested, raise if it called.
    proc do
      raise "The method #{symbol} was unexpectedly called during the " \
        "test for #{@expected_symbol}."
    end
  end
end

class Mock<%= service.name %>Credentials<%= namespaces.last.upcase_first %> < <%= ruby_namespace namespaces %>::Credentials
  def initialize method_name
    @method_name = method_name
  end

  def updater_proc
    proc do
      raise "The method `#{@method_name}` was trying to make a grpc request. This should not " \
          "happen since the grpc layer is being mocked."
    end
  end
end

describe <%= ruby_namespace service.address %>Client do
<% service.methods.each do |method| %>
<% method_name = method.descriptor.name.underscore %>
  describe "<%= method_name %>" do
    let :custom_error do
      CustomTestError<%= namespaces.last.upcase_first %>.new "Custom test error for <%= ruby_namespace service.address %>Client#<%= method_name %>."
    end

    it "invokes <%= method_name %> without error" do
      # Create request parameters
<% if method_streaming_bidi? method %>
      request = {}
<% else %>
      encoding = :FLAC
      sample_rate_hertz = 44_100
      language_code = "en-US"
      config = {
        encoding: encoding,
        sample_rate_hertz: sample_rate_hertz,
        language_code: language_code
      }
      uri = "gs://bucket_name/file_name.flac"
      audio = { uri: uri }
<% end %>

      # Create expected grpc response
      expected_response = {}
      expected_response = Google::Gax.to_proto expected_response,
                                               <%= ruby_namespace namespaces %>::<%= method_name.camelize %>Response
<% if method_lro? method %>
      result = Google::Protobuf::Any.new
      result.pack expected_response
      operation = Google::Longrunning::Operation.new(
        name: "operations/<%= method_name %>_test",
        done: true,
        response: result
      )
<% end %>

      # Mock Grpc layer
<% if method_lro? method %>
      mock_method = proc do |request|
        assert_instance_of <%= ruby_namespace namespaces %>::<%= method_name.camelize %>Request, request
        assert_equal Google::Gax.to_proto(config, <%= ruby_namespace namespaces %>::RecognitionConfig), request.config
        assert_equal Google::Gax.to_proto(audio, <%= ruby_namespace namespaces %>::RecognitionAudio), request.audio
        OpenStruct.new execute: operation
<% elsif method_streaming_bidi? method %>
      mock_method = proc do |requests|
        request = requests.first
        OpenStruct.new execute: [expected_response]
<% else %>
      mock_method = proc do |request|
        assert_instance_of <%= ruby_namespace namespaces %>::<%= method_name.camelize %>Request, request
        assert_equal Google::Gax.to_proto(config, <%= ruby_namespace namespaces %>::RecognitionConfig), request.config
        assert_equal Google::Gax.to_proto(audio, <%= ruby_namespace namespaces %>::RecognitionAudio), request.audio
        OpenStruct.new execute: expected_response
<% end %>
      end
      mock_stub = MockGrpcClientStub<%= namespaces.last.upcase_first %>.new :<%= method_name %>, mock_method

      # Mock auth layer
      mock_credentials = Mock<%= service.name %>Credentials<%= namespaces.last.upcase_first %>.new "<%= method_name %>"

      <%= ruby_namespace service.address %>::Stub.stub :new, mock_stub do
        <%= ruby_namespace namespaces %>::Credentials.stub :default, mock_credentials do
          client = <%= ruby_namespace service.address[0..-3] %>.new version: :<%= namespaces.last.downcase %>

          # Call method
<% if method_streaming_bidi? method %>
          response = client.<%= method_name %> [request]
<% else %>
          response = client.<%= method_name %> config, audio
<% end %>

          # Verify the response
<% if method_lro? method %>
          assert_equal expected_response, response.response
<% elsif method_streaming_bidi? method %>
          assert_equal 1, response.count
          assert_equal expected_response, response.first
<% else %>
          assert_equal expected_response, response

          # Call method with block
          client.recognize config, audio do |resp, operation|
            # Verify the response
            assert_equal expected_response, resp
            refute_nil operation
          end
<% end %>
        end
      end
    end
<% if method_lro? method %>

    it "invokes <%= method_name %> and returns an operation error." do
      # Create request parameters
<% if method_streaming_bidi? method %>
      request = {}
<% else %>
      encoding = :FLAC
      sample_rate_hertz = 44_100
      language_code = "en-US"
      config = {
        encoding: encoding,
        sample_rate_hertz: sample_rate_hertz,
        language_code: language_code
      }
      uri = "gs://bucket_name/file_name.flac"
      audio = { uri: uri }
<% end %>

      # Create expected grpc response
      operation_error = Google::Rpc::Status.new(
        message: "Operation error for <%= ruby_namespace service.address %>Client#<%= method_name %>."
      )
      operation = Google::Longrunning::Operation.new(
        name: "operations/<%= method_name %>_test",
        done: true,
        error: operation_error
      )

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of <%= ruby_namespace namespaces %>::<%= method_name.camelize %>Request, request
        assert_equal Google::Gax.to_proto(config, <%= ruby_namespace namespaces %>::RecognitionConfig), request.config
        assert_equal Google::Gax.to_proto(audio, <%= ruby_namespace namespaces %>::RecognitionAudio), request.audio
        OpenStruct.new execute: operation
      end
      mock_stub = MockGrpcClientStub<%= namespaces.last.upcase_first %>.new :<%= method_name %>, mock_method

      # Mock auth layer
      mock_credentials = Mock<%= service.name %>Credentials<%= namespaces.last.upcase_first %>.new "<%= method_name %>"

      <%= ruby_namespace service.address %>::Stub.stub :new, mock_stub do
        <%= ruby_namespace namespaces %>::Credentials.stub :default, mock_credentials do
          client = <%= ruby_namespace service.address[0..-3] %>.new version: :<%= namespaces.last.downcase %>

          # Call method
          response = client.<%= method_name %> config, audio

          # Verify the response
          assert response.error?
          assert_equal operation_error, response.error
        end
      end
    end
<% end %>

    it "invokes <%= method_name %> with error" do
      # Create request parameters
<% if method_streaming_bidi? method %>
      request = {}
<% else %>
      encoding = :FLAC
      sample_rate_hertz = 44_100
      language_code = "en-US"
      config = {
        encoding: encoding,
        sample_rate_hertz: sample_rate_hertz,
        language_code: language_code
      }
      uri = "gs://bucket_name/file_name.flac"
      audio = { uri: uri }
<% end %>

      # Mock Grpc layer
<% if method_streaming_bidi? method %>
      mock_method = proc { raise custom_error }
<% else %>
      mock_method = proc do |request|
        assert_instance_of <%= ruby_namespace namespaces %>::<%= method_name.camelize %>Request, request
        assert_equal Google::Gax.to_proto(config, <%= ruby_namespace namespaces %>::RecognitionConfig), request.config
        assert_equal Google::Gax.to_proto(audio, <%= ruby_namespace namespaces %>::RecognitionAudio), request.audio
        raise custom_error
      end
<% end %>
      mock_stub = MockGrpcClientStub<%= namespaces.last.upcase_first %>.new :<%= method_name %>, mock_method

      # Mock auth layer
      mock_credentials = Mock<%= service.name %>Credentials<%= namespaces.last.upcase_first %>.new "<%= method_name %>"

      <%= ruby_namespace service.address %>::Stub.stub :new, mock_stub do
        <%= ruby_namespace namespaces %>::Credentials.stub :default, mock_credentials do
          client = <%= ruby_namespace service.address[0..-3] %>.new version: :<%= namespaces.last.downcase %>

          # Call method
          err = assert_raises Google::Gax::GaxError do
<% if method_streaming_bidi? method %>
            client.<%= method_name %> [request]
<% else %>
            client.<%= method_name %> config, audio
<% end %>
          end

          # Verify the GaxError wrapped the custom error that was raised.
          assert_match custom_error.message, err.message
        end
      end
    end
  end

<% if method != service.methods.last %>

<% end %>
<% end %>
end
