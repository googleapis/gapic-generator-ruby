<%- assert_locals service -%>
<%- method_service ||= service  -%>
class Configuration
  extend Gapic::Config

  config_attr :endpoint,     <%= service.client_endpoint.inspect %>, String
  config_attr :credentials,  nil do |value|
    allowed = [::String, ::Hash, ::Proc, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
    if defined? ::GRPC
      allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials]
    end
    allowed.any? { |klass| klass === value }
  end
  config_attr :scope,        nil, String, Array, nil
  config_attr :lib_name,     nil, String, nil
  config_attr :lib_version,  nil, String, nil
  config_attr(:channel_args, <%= service.config_channel_args.inspect %>, Hash, nil)
  config_attr :interceptors, nil, Array, nil
  config_attr :timeout,      nil, Numeric, nil
  config_attr :metadata,     nil, Hash, nil
  config_attr :retry_policy, nil, Hash, Proc, nil

  def initialize parent_config = nil
    @parent_config = parent_config unless parent_config.nil?

    yield self if block_given?
  end

  def rpcs
    @rpcs ||= begin
      parent_rpcs = nil
      parent_rpcs = @parent_config.rpcs if @parent_config&.respond_to?(:rpcs)
      Rpcs.new parent_rpcs
    end
  end

  class Rpcs
  <%- method_service.methods.each do |method| -%>
    attr_reader :<%= method.name %>
  <%- end %>

    def initialize parent_rpcs = nil
      <%- method_service.methods.each do |method| -%>
      <%= method.name %>_config = nil
      <%= method.name %>_config = parent_rpcs&.<%= method.name %> if parent_rpcs&.respond_to? :<%= method.name %>
      @<%= method.name %> = Gapic::Config::Method.new <%= method.name %>_config
      <%- end %>

      yield self if block_given?
    end
  end
end
