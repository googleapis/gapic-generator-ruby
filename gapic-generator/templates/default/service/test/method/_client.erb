<%- assert_locals method, test_mock_error_class_name, test_mock_service_stub_class_name, test_mock_credentials_class_name -%>
describe "<%= method.name %>" do
  let :custom_error do
    <%= test_mock_error_class_name %>.new "Custom test error for <%= method.service.client_name_full %>#<%= method.name %>."
  end

  it "invokes <%= method.name %> without error" do
    # Create request parameters
    request = {}

    # Create expected grpc response
<%- if method.return_type.nil? -%>
    expected_response = {}
<%- else -%>
    expected_response = Gapic::Protobuf.coerce({}, to: <%= method.return_type %>)
<%- end -%>

    # Mock Grpc layer
    mock_method = proc do |requests|
      request = requests.first
      OpenStruct.new execute: [expected_response]
    end
    mock_stub = <%= test_mock_service_stub_class_name %>.new :<%= method.name %>, mock_method

    # Mock auth layer
    mock_credentials = <%= test_mock_credentials_class_name %>.new "<%= method.name %>"

    <%= method.service.proto_service_stub_name_full %>.stub :new, mock_stub do
      <%= method.service.credentials_name_full %>.stub :default, mock_credentials do
        client = <%= method.service.client_name_full %>.new

        # Call method
        response = client.<%= method.name %> [request]

        # Verify the response
        assert_equal expected_response, response
      end
    end
  end

  it "invokes <%= method.name %> with error" do
    # Create request parameters
    request = {}

    # Mock Grpc layer
    mock_method = proc { raise custom_error }
    mock_stub = <%= test_mock_service_stub_class_name %>.new :<%= method.name %>, mock_method

    # Mock auth layer
    mock_credentials = <%= test_mock_credentials_class_name %>.new "<%= method.name %>"

    <%= method.service.proto_service_stub_name_full %>.stub :new, mock_stub do
      <%= method.service.credentials_name_full %>.stub :default, mock_credentials do
        client = <%= method.service.client_name_full %>.new

        # Call method
        err = assert_raises Gapic::GapicError do
          client.<%= method.name %> [request]
        end

        # Verify the GapicError wrapped the custom error that was raised.
        assert_match custom_error.message, err.message
      end
    end
  end
end
