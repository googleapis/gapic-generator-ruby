<%- assert_locals method, test_mock_error_class_name, test_mock_service_stub_class_name, test_mock_credentials_class_name -%>
describe "<%= method.name %>" do
  let :custom_error do
    <%= test_mock_error_class_name %>.new "Custom test error for <%= method.service.client_name_full %>#<%= method.name %>."
  end

  it "invokes <%= method.name %> without error" do
<%= indent render(partial: "service/test/method/fields", locals: { method: method }), 4 %>

    # Create expected grpc response
<%- if method.return_type.nil? -%>
    expected_response = {}
<%- else -%>
    expected_response = Gapic::Protobuf.coerce({}, to: <%= method.return_type %>)
<%- end -%>

    # Mock Grpc layer
    mock_method = proc do |request|
      assert_instance_of <%= method.request_type %>, request
<%- method.fields.each do |field| -%>
<%= indent render(partial: "service/test/method/assert_field_equal", locals: { field: field }), 6 %>
<%- end -%>
      OpenStruct.new execute: expected_response
    end
    mock_stub = <%= test_mock_service_stub_class_name %>.new :<%= method.name %>, mock_method

    # Mock auth layer
    mock_credentials = <%= test_mock_credentials_class_name %>.new "<%= method.name %>"

    <%= method.service.proto_service_stub_name_full %>.stub :new, mock_stub do
      <%= method.service.credentials_name_full %>.stub :default, mock_credentials do
        client = <%= method.service.client_name_full %>.new

        # Call method
        response = client.<%= method.name %> [request]

        # Verify the response
        assert_equal 1, response.count
        assert_equal expected_response, response.first
      end
    end
  end

  it "invokes <%= method.name %> with error" do
<%= indent render(partial: "service/test/method/fields", locals: { method: method }), 4 %>

    # Mock Grpc layer
    mock_method = proc do |request|
      assert_instance_of <%= method.request_type %>, request
<%- method.fields.each do |field| -%>
<%= indent render(partial: "service/test/method/assert_field_equal", locals: { field: field }), 6 %>
<%- end -%>
      raise custom_error
    end
    mock_stub = <%= test_mock_service_stub_class_name %>.new :<%= method.name %>, mock_method

    # Mock auth layer
    mock_credentials = <%= test_mock_credentials_class_name %>.new "<%= method.name %>"

    <%= method.service.proto_service_stub_name_full %>.stub :new, mock_stub do
      <%= method.service.credentials_name_full %>.stub :default, mock_credentials do
        client = <%= method.service.client_name_full %>.new

        # Call method
        err = assert_raises Gapic::GapicError do
          client.<%= method.name %> <%= method.fields.map(&:as_kwarg).join ", " %>
        end

        # Verify the GapicError wrapped the custom error that was raised.
        assert_match custom_error.message, err.message
      end
    end
  end
end
