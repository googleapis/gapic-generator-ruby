<%- assert_locals method -%>
<%- full_client_name = defined?(client_name_full) ? client_name_full : method.service.client_name_full -%>
<%- fields = method.fields_with_first_oneof -%>
def test_<%= method.name %>
  # Create request parameters
  <%- fields.each do |field| -%>
  <%= field.name %> = <%= field.default_value %>
  <%- end -%>

  Gapic::ServiceStub.stub :new, @mock_stub do
    # Create client
    client = <%= full_client_name %>.new do |config|
      config.credentials = @test_channel
    end

    8.times do
      @mock_stub.expect :call_rpc, @response do |name, request, options:|
        has_name = name == :<%= method.name %>
        has_options = !options.nil?
        has_fields = <%= render(partial: "service/test/method/expect_fields", locals: { fields: fields }) %>

        assert has_name, "invalid method call: #{name} (expected <%= method.name %>)" 
        assert has_options, "invalid options: #{options} vs #{@options}"
        assert has_fields, "invalid field values"

        # TODO: what to do with block?

        has_name && has_options && has_fields
      end
    end

    # Call method (positional / hash)
    response = client.<%= method.name %> <%= fields.map(&:as_kwarg).join ", " %>
    assert_equal @response, response

    # Call method (positional / protobuf type)
    response = client.<%= method.name %>(<%= method.request_type %>.new(<%= fields.map(&:as_kwarg).join ", " %>))
    assert_equal @response, response

    # Call method (named / hash)
    response = client.<%= method.name %> request = { <%= fields.map(&:as_kwarg).join ", " %> }
    assert_equal @response, response

    # Call method (named / protobuf type)
    response = client.<%= method.name %> request = <%= method.request_type %>.new({ <%= fields.map(&:as_kwarg).join ", " %> })
    assert_equal @response, response

    # TODO: add block arg to these tests!?

    # Call method with options (positional / hash)
    response = client.<%= method.name %>({ <%= fields.map(&:as_kwarg).join ", " %> }, @options)
    assert_equal @response, response

    # Call method with options (positional / protobuf type)
    response = client.<%= method.name %>(<%= method.request_type %>.new(<%= fields.map(&:as_kwarg).join ", " %>), @options)
    assert_equal @response, response

    # Call method with options (named / hash)
    response = client.<%= method.name %>(request = { <%= fields.map(&:as_kwarg).join ", " %> }, options = @options)
    assert_equal @response, response

    # Call method with options (named / protobuf type)
    response = client.<%= method.name %>(request = <%= method.request_type %>.new({ <%= fields.map(&:as_kwarg).join ", " %> }), options = @options)
    assert_equal @response, response

    # Verify method calls
    @mock_stub.verify
  end
end
