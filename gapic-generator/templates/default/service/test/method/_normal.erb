<%- assert_locals method -%>
<%- full_client_name = defined?(client_name_full) ? client_name_full : method.service.client_name_full -%>
<%- fields = method.fields_with_first_oneof -%>
def test_<%= method.name %>
  # Create request parameters
  <%- fields.each do |field| -%>
  <%= field.name %> = <%= field.default_value %>
  <%- end -%>

  with_stubs do
    # Create client
    client = <%= full_client_name %>.new do |config|
      config.credentials = @test_channel
    end

    8.times do
      @mock_stub.expect :call_rpc, @response do |name, request, options:, &block|
        assert_equal :<%= method.name %>, name
        refute_nil options
        refute_nil block
        <%- fields.each do |field| -%>
        <%- if field.type_name_full.to_s.empty? -%>
        assert_equal <%= field.default_value %>, request.<%= field.name %>
        <%- else -%>
        assert_equal Gapic::Protobuf.coerce(<%= field.default_value %>, to: <%= field.type_name_full %>), request.<%= field.name %>
        <%- end -%>
        <%- end -%>

        block.call(@response, @grpc_operation)

        # hmmm...
        assert_equal 24, 25
        
        true
      end
    end

    # Call method (positional / hash)
    client.<%= method.name %> <%= fields.map(&:as_kwarg).join ", " %> do |response, operation|
      <%= indent_tail render(partial: "service/test/method/assert_response",
                        locals: { method: method }), 6 %>
    end

    # Call method (positional / protobuf type)
    client.<%= method.name %>(<%= method.request_type %>.new(<%= fields.map(&:as_kwarg).join ", " %>)) do |response, operation|
      <%= indent_tail render(partial: "service/test/method/assert_response",
                        locals: { method: method }), 6 %>
    end

    # Call method (named / hash)
    client.<%= method.name %> request = { <%= fields.map(&:as_kwarg).join ", " %> } do |response, operation|
      <%= indent_tail render(partial: "service/test/method/assert_response",
                        locals: { method: method }), 6 %>
    end

    # Call method (named / protobuf type)
    client.<%= method.name %> request = <%= method.request_type %>.new({ <%= fields.map(&:as_kwarg).join ", " %> }) do |response, operation|
      <%= indent_tail render(partial: "service/test/method/assert_response",
                        locals: { method: method }), 6 %>
    end

    # Call method with options (positional / hash)
    client.<%= method.name %>({ <%= fields.map(&:as_kwarg).join ", " %> }, @options) do |response, operation|
      <%= indent_tail render(partial: "service/test/method/assert_response",
                        locals: { method: method }), 6 %>
    end

    # Call method with options (positional / protobuf type)
    client.<%= method.name %>(<%= method.request_type %>.new(<%= fields.map(&:as_kwarg).join ", " %>), @options) do |response, operation|
      <%= indent_tail render(partial: "service/test/method/assert_response",
                        locals: { method: method }), 6 %>
    end

    # Call method with options (named / hash)
    client.<%= method.name %>(request = { <%= fields.map(&:as_kwarg).join ", " %> }, options = @options) do |response, operation|
      <%= indent_tail render(partial: "service/test/method/assert_response",
                        locals: { method: method }), 6 %>
    end

    # Call method with options (named / protobuf type)
    client.<%= method.name %>(request = <%= method.request_type %>.new({ <%= fields.map(&:as_kwarg).join ", " %> }), options = @options) do |response, operation|
      <%= indent_tail render(partial: "service/test/method/assert_response",
                        locals: { method: method }), 6 %>
    end

    # Verify method calls
    @mock_stub.verify
  end
end
