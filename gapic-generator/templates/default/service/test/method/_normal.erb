<%- assert_locals method -%>
<%- full_client_name = defined?(client_name_full) ? client_name_full : method.service.client_name_full -%>
describe "<%= method.name %>" do
  let :custom_error do
    CustomTestErrorV1.new "Custom test error for <%= full_client_name %>#<%= method.name %>."
  end

<%- if method.lro? -%>
  it "invokes <%= method.name %> without error" do
<%= indent render(partial: "service/test/method/fields", locals: { method: method }), 4 %>

    # Create expected grpc response
    expected_response = {}
    expected_response = Gapic::Protobuf.coerce expected_response, to: <%= method.return_type %>
    result = Google::Protobuf::Any.new
    result.pack expected_response
    operation = Google::Longrunning::Operation.new(
      name: "operations/<%= method.name %>_test",
      done: true,
      response: result
    )

    # Mock Grpc layer
    mock_method = proc do |request|
      assert_instance_of <%= method.request_type %>, request
<%- method.fields.each do |field| -%>
      assert_equal Gapic::Protobuf.coerce(<%= field.name %>, to: <%= field.type_name_full %>), request.<%= field.name %>
<%- end -%>
      OpenStruct.new execute: operation
    end
    mock_stub = MockGrpcClientStubV1.new :<%= method.name %>, mock_method

    # Mock auth layer
    mock_credentials = MockSpeechCredentialsV1.new "<%= method.name %>"

    <%= method.service.proto_service_stub_name_full %>.stub :new, mock_stub do
      <%= method.service.credentials_name_full %>.stub :default, mock_credentials do
        client = <%= full_client_name %>.new

        # Call method
        response = client.<%= method.name %> <%= method.fields.map(&:name).join ", " %>

        # Verify the response
        assert_equal expected_response, response.response
      end
    end
  end

  it "invokes <%= method.name %> and returns an operation error." do
<%= indent render(partial: "service/test/method/fields", locals: { method: method }), 4 %>

    # Create expected grpc response
    operation_error = Google::Rpc::Status.new(
      message: "Operation error for <%= full_client_name %>#<%= method.name %>."
    )
    operation = Google::Longrunning::Operation.new(
      name: "operations/<%= method.name %>_test",
      done: true,
      error: operation_error
    )

    # Mock Grpc layer
    mock_method = proc do |request|
      assert_instance_of <%= method.request_type %>, request
<%- method.fields.each do |field| -%>
      assert_equal Gapic::Protobuf.coerce(<%= field.name %>, to: <%= field.type_name_full %>), request.<%= field.name %>
<%- end -%>
      OpenStruct.new execute: operation
    end
    mock_stub = MockGrpcClientStubV1.new :<%= method.name %>, mock_method

    # Mock auth layer
    mock_credentials = MockSpeechCredentialsV1.new "<%= method.name %>"

    <%= method.service.proto_service_stub_name_full %>.stub :new, mock_stub do
      <%= method.service.credentials_name_full %>.stub :default, mock_credentials do
        client = <%= full_client_name %>.new

        # Call method
        response = client.<%= method.name %> <%= method.fields.map(&:name).join ", " %>

        # Verify the response
        assert response.error?
        assert_equal operation_error, response.error
      end
    end
  end
<%- else -%>
  it "invokes <%= method.name %> without error" do
<%= indent render(partial: "service/test/method/fields", locals: { method: method }), 4 %>

    # Create expected grpc response
    expected_response = {}
    expected_response = Gapic::Protobuf.coerce expected_response, to: <%= method.return_type %>

    # Mock Grpc layer
    mock_method = proc do |request|
      assert_instance_of <%= method.request_type %>, request
<%- method.fields.each do |field| -%>
      assert_equal Gapic::Protobuf.coerce(<%= field.name %>, to: <%= field.type_name_full %>), request.<%= field.name %>
<%- end -%>
      OpenStruct.new execute: expected_response
    end
    mock_stub = MockGrpcClientStubV1.new :<%= method.name %>, mock_method

    # Mock auth layer
    mock_credentials = MockSpeechCredentialsV1.new "<%= method.name %>"

    <%= method.service.proto_service_stub_name_full %>.stub :new, mock_stub do
      <%= method.service.credentials_name_full %>.stub :default, mock_credentials do
        client = <%= full_client_name %>.new

        # Call method
        response = client.<%= method.name %> <%= method.fields.map(&:name).join ", " %>

        # Verify the response
        assert_equal expected_response, response

        # Call method with block
        client.<%= method.name %> <%= method.fields.map(&:name).join ", " %> do |resp, operation|
          # Verify the response
          assert_equal expected_response, resp
          refute_nil operation
        end
      end
    end
  end
<%- end -%>

  it "invokes <%= method.name %> with error" do
<%= indent render(partial: "service/test/method/fields", locals: { method: method }), 4 %>

    # Mock Grpc layer
    mock_method = proc do |request|
      assert_instance_of <%= method.request_type %>, request
<%- method.fields.each do |field| -%>
      assert_equal Gapic::Protobuf.coerce(<%= field.name %>, to: <%= field.type_name_full %>), request.<%= field.name %>
<%- end -%>
      raise custom_error
    end
    mock_stub = MockGrpcClientStubV1.new :<%= method.name %>, mock_method

    # Mock auth layer
    mock_credentials = MockSpeechCredentialsV1.new "<%= method.name %>"

    <%= method.service.proto_service_stub_name_full %>.stub :new, mock_stub do
      <%= method.service.credentials_name_full %>.stub :default, mock_credentials do
        client = <%= full_client_name %>.new

        # Call method
        err = assert_raises Gapic::GapicError do
          client.<%= method.name %> <%= method.fields.map(&:name).join ", " %>
        end

        # Verify the GapicError wrapped the custom error that was raised.
        assert_match custom_error.message, err.message
      end
    end
  end
end
