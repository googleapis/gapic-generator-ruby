<%- assert_locals service -%>
<% @requires = capture do %>
<%= render partial: "service/client/requires", locals: { service: service} -%>
require "<%= service.proto_service_require %>"
require "<%= service.rest.service_stub_require %>"
<%- if service.rest.subclients? -%>
<%- service.rest.subclients.each do |subclient| -%>
<%- unless subclient.client_class_name == "Operations" -%>
require "<%= subclient.require_str %>"
<%- end -%>
<%- end -%>
<%- end -%>
<%- if service.autogenerates_uuid? -%>
require "securerandom"
<%- end -%>
<% end %>
##
# REST client for the <%= service.name %> service.
#
<%- if service.doc_description -%>
<%= indent service.doc_description(transport: :rest), "# " %>
#
<%- end -%>
class <%= service.rest.client_name %>
  # @private
  API_VERSION = "<%= service.api_version %>".freeze

  # @private
  DEFAULT_ENDPOINT_TEMPLATE = <%= service.client_endpoint_template.inspect %>

<%- if service.paths? -%>
  include <%= service.paths_name %>

<%- end -%>
  # @private
  attr_reader :<%= service.stub_name %>

  ##
  # Configure the <%= service.name %> <%= service.rest.client_name %> class.
  #
  # See {<%= service.rest.client_name_full %>::Configuration}
  # for a description of the configuration fields.
<%= render partial: "proto_docs/deprecated", locals: { presenter: service } -%>
  #
  # @example
  #
  #   # Modify the configuration for all <%= service.name %> clients
  #   <%= service.rest.client_name_full %>.configure do |config|
  #     config.timeout = 10.0
  #   end
  #
  # @yield [config] Configure the <%= service.rest.client_name %> client.
  # @yieldparam config [<%= service.rest.client_name %>::Configuration]
  #
  # @return [<%= service.rest.client_name %>::Configuration]
  #
  def self.configure
<%= indent render(partial: "service/client/self_configure", locals: { service: service.rest }), 4 %>
  end

  ##
  # Configure the <%= service.name %> <%= service.rest.client_name %> instance.
  #
  # The configuration is set to the derived mode, meaning that values can be changed,
  # but structural changes (adding new fields, etc.) are not allowed. Structural changes
  # should be made on {<%= service.rest.client_name %>.configure}.
  #
  # See {<%= service.rest.client_name_full %>::Configuration}
  # for a description of the configuration fields.
  #
  # @yield [config] Configure the <%= service.rest.client_name %> client.
  # @yieldparam config [<%= service.rest.client_name %>::Configuration]
  #
  # @return [<%= service.rest.client_name %>::Configuration]
  #
  def configure
    yield @config if block_given?
    @config
  end

  ##
  # The effective universe domain
  #
  # @return [String]
  #
  def universe_domain
    @<%= service.stub_name %>.universe_domain
  end

  ##
  # Create a new <%= service.name %> REST client object.
  #
  # @example
  #
  #   # Create a client using the default configuration
  #   client = <%= service.rest.client_name_full %>.new
  #
  #   # Create a client using a custom configuration
  #   client = <%= service.rest.client_name_full %>.new do |config|
  #     config.timeout = 10.0
  #   end
  #
  # @yield [config] Configure the <%= service.name %> client.
  # @yieldparam config [<%= service.rest.client_name %>::Configuration]
  #
  def initialize
    # Create the configuration object
    @config = Configuration.new <%= service.rest.client_name %>.configure

    # Yield the configuration if needed
    yield @config if block_given?

    # Create credentials
    credentials = @config.credentials
    <%- unless service.generic_endpoint? -%>
    # Use self-signed JWT if the endpoint is unchanged from default,
    # but only if the default endpoint does not have a region prefix.
    enable_self_signed_jwt = @config.endpoint.nil? ||
                             @config.endpoint == Configuration::DEFAULT_ENDPOINT &&
                             !@config.endpoint.split(".").first.include?("-")
    credentials ||= Credentials.default scope: @config.scope,
                                        enable_self_signed_jwt: enable_self_signed_jwt
    if credentials.is_a?(::String) || credentials.is_a?(::Hash)
      credentials = Credentials.new credentials, scope: @config.scope
    end
    <%- end -%>

    @quota_project_id = @config.quota_project
    @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

    <%- service.rest.lro_subclients.each do |subclient| -%>
    @<%= subclient.client_var_name %> = <%= subclient.client_class_docname %>.new do |config|
      config.credentials = credentials
      config.quota_project = @quota_project_id
      config.endpoint = @config.endpoint
      config.universe_domain = @config.universe_domain
      <%- if subclient.respond_to?(:bindings_override) && !subclient.bindings_override.empty? -%>
      config.bindings_override = @config.bindings_override
      <%- end -%>
    end

    <%- end -%>
    @<%= service.stub_name %> = <%= service.rest.service_stub_name_full %>.new(
      endpoint: @config.endpoint,
      endpoint_template: DEFAULT_ENDPOINT_TEMPLATE,
      universe_domain: @config.universe_domain,
      credentials: credentials
    )
    <%- service.rest.mixin_presenters.each do |subclient| -%>

    @<%= subclient.client_var_name %> = <%= subclient.client_class_docname %>.new do |config|
      config.credentials = credentials
      config.quota_project = @quota_project_id
      config.endpoint = @<%= service.stub_name %>.endpoint
      config.universe_domain = @<%= service.stub_name %>.universe_domain
      <%- if subclient.respond_to?(:bindings_override) && !subclient.bindings_override.empty? -%>
      config.bindings_override = @config.bindings_override
      <%- end -%>
    end
    <%- end -%>
  end

  <%- if service.rest.subclients? -%>
  <%- service.rest.subclients.each do |subclient| -%>
  ##
  # Get the associated client for <%= subclient.service_description %>.
  #
  # @return [<%= subclient.client_class_docname %>]
  #
  attr_reader :<%= subclient.client_var_name %>

  <%- end -%>
  <%- end -%>
  # Service calls
  <%- service.rest.methods.each do |method| -%>

  <%= indent_tail render(partial: "service/rest/client/method/def", locals: { method: method }), 2 %>
  <%- end -%>

  <%= indent_tail render(partial: "service/rest/client/config", locals: { service: service }), 2 %>
end
