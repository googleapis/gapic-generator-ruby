##
# @param credentials [Google::Auth::Credentials, String, Hash,
#   GRPC::Core::Channel, GRPC::Core::ChannelCredentials, Proc]
#   Provides the means for authenticating requests made by the client. This
#   parameter can be many types.
#   A `Google::Auth::Credentials` uses a the properties of its represented
#   keyfile for authenticating requests made by this client.
#   A `String` will be treated as the path to the keyfile to be used for the
#   construction of credentials for this client.
#   A `Hash` will be treated as the contents of a keyfile to be used for the
#   construction of credentials for this client.
#   A `GRPC::Core::Channel` will be used to make calls through.
#   A `GRPC::Core::ChannelCredentials` for the setting up the RPC client. The
#   channel credentials should already be composed with a
#   `GRPC::Core::CallCredentials` object.
#   A `Proc` will be used as an updater_proc for the Grpc channel. The proc
#   transforms the metadata for requests, generally, to give OAuth credentials.
# @param scope [String, Array<String>]
#   The OAuth scope (or scopes) for this service. This parameter is ignored if
#   an updater_proc is supplied.
# @param timeout [Numeric]
#   The default timeout, in seconds, for calls made through this client.
# @param metadata [Hash]
#   Default metadata to be sent with each request. This can be overridden on a
#   per call basis.
#
def initialize \
    credentials: nil,
    scope: ALL_SCOPES,
    timeout: DEFAULT_TIMEOUT,
    metadata: nil,
    lib_name: nil,
    lib_version: ""
  # These require statements are intentionally placed here to initialize
  # the gRPC module only when it's required.
  # See https://github.com/googleapis/toolkit/issues/446
  require "google/gax/grpc"
  require "<%= service.services_proto_require %>"

  credentials ||= Credentials.default scope: scope
  if credentials.is_a?(String) || credentials.is_a?(Hash)
    credentials = Credentials.new credentials, scope: scope
  end

<%- if service.client_lro? -%>
<%= indent render(partial: "client/lro/init", locals: { service: service }), "  " %>
<%- end -%>
  @<%= service.stub_name %> = Google::Gax::Grpc::Stub.new(
    <%= service.services_stub_name_full %>,
    host:         self.class::SERVICE_ADDRESS,
    port:         self.class::DEFAULT_SERVICE_PORT,
    credentials:  credentials,
    interceptors: self.class::GRPC_INTERCEPTORS
  )

  @timeout = timeout
  @metadata = metadata.to_h
  @metadata["x-goog-api-client".freeze] ||= x_goog_api_client_header lib_name, lib_version
end
