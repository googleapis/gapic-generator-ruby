# frozen_string_literal: true

# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "bundler/gem_tasks"
require "fileutils"
require "rake/testtask"
require "rubocop/rake_task"
require "yard"
require "yard/rake/yardoc_task"

protos = {
  showcase: [
    "google/showcase/v1beta1/echo.proto",
    "google/showcase/v1beta1/identity.proto",
    "google/showcase/v1beta1/messaging.proto",
    "google/showcase/v1beta1/testing.proto"
  ],
  garbage:  [
    "garbage/garbage.proto"
  ]
}

RuboCop::RakeTask.new # Configuration is in .rubocop.yml
Rake::TestTask.new :test do |t|
  t.libs << "test"
  t.libs << "lib"
  t.test_files = FileList["test/**/*_test.rb"]
end

desc "Validate the test libraries (install & run tests)"
task :validate do
  Rake::Task["validate:showcase"].invoke
  # TODO: validate this garbage!
  # Rake::Task["validate:garbage"].invoke
end
namespace :validate do
  protos.each do |name, input|
    desc "Validate the #{name} library (install & run tests)"
    task name.to_sym do
      install_and_run_unit_tests name, input
    end
  end
end

YARD::Rake::YardocTask.new do |y|
  # y.options << "--fail-on-warning"
end

desc "Run the CI build"
task :ci do
  puts "\ngapic-generator rubocop\n"
  Rake::Task[:rubocop].invoke
  puts "\ngapic-generator test\n"
  Rake::Task[:test].invoke
  puts "\ngapic-generator validate\n"
  Rake::Task[:validate].invoke
end

task default: :ci

desc "Generate the expected output for tests"
task :gen do
  Rake::Task["gen:protos"].invoke
  Rake::Task["gen:templates"].invoke
  Rake::Task["gen:gem_creation"].invoke
end
namespace :gen do
  desc "Generate the protobuf files used in the gem"
  task :protos do
    generate_protos
  end

  desc "Generate the expected output for templates tests"
  task :templates do
    generate_default_templates "speech"
    generate_default_templates "vision"
    generate_default_templates "showcase"
    # generate_default_templates "garbage"
  end

  desc "Generate the expected output for gem creation tests"
  task :gem_creation do
    generate_gem "my_plugin"
  end
end

desc "Start an interactive shell."
task :console do
  require "irb"
  require "irb/completion"
  require "pp"

  $LOAD_PATH.unshift "lib"

  require "gapic/schema"
  def schema service
    bin_proto = File.binread "proto_input/#{service}_desc.bin"
    request = Google::Protobuf::Compiler::CodeGeneratorRequest.decode bin_proto
    Gapic::Schema::Api.new request
  end

  ARGV.clear
  IRB.start
end

desc "Build the docker image."
task :image, :name do |_t, args|
  image_name = args[:name] || "ruby-gapic-generator"
  sh "docker build -t #{image_name} ."
end

def generate_protos
  require "mkmf" # needed for find_executable

  # Remove old generated files.
  FileUtils.rm Dir.glob(File.join("lib", "**", "*.pb.rb"))

  plugin_executable = find_executable "protoc-gen-ruby"
  plugin = "protoc-gen-ruby-protobuf=#{plugin_executable}"

  command = []
  command << "bundle exec grpc_tools_ruby_protoc"
  command << "--plugin=#{plugin}"
  command << "--ruby-protobuf_out=lib"
  command << "-I ../shared/api-common-protos"
  command << "-I ../shared/protobuf/src"
  command << "../shared/api-common-protos/google/api/annotations.proto"
  command << "../shared/api-common-protos/google/api/client.proto"
  command << "../shared/api-common-protos/google/api/field_behavior.proto"
  command << "../shared/api-common-protos/google/api/resource.proto"
  command << "../shared/api-common-protos/google/longrunning/operations.proto"
  command << "../shared/protobuf/src/google/protobuf/descriptor.proto"
  command << "../shared/protobuf/src/google/protobuf/compiler/plugin.proto"
  full_command = command.join " "

  puts full_command
  puts `#{full_command}`
end

def generate_default_templates service
  require "gapic/schema/api"
  require "gapic/generators/default_generator"

  target_path = File.expand_path File.join("expected_output/templates", service)
  FileUtils.rm_rf target_path
  FileUtils.mkdir_p target_path

  bin_proto = File.binread "proto_input/#{service}_desc.bin"
  request = Google::Protobuf::Compiler::CodeGeneratorRequest.decode bin_proto
  api = Gapic::Schema::Api.new request
  generator = Gapic::Generators::DefaultGenerator.new api
  generator.generate.each do |file|
    target_file_path = File.join target_path, file.name
    FileUtils.mkdir_p File.dirname(target_file_path)
    File.write target_file_path, file.content
  end
end

def generate_gem gem_name
  require "gapic/gem_builder"
  require "tmpdir"

  target_path = File.expand_path File.join("expected_output/gems", gem_name)
  FileUtils.rm_rf target_path
  FileUtils.mkdir_p target_path

  Dir.mktmpdir do |tmp_dir|
    builder = Gapic::GemBuilder.new gem_name, target_path
    builder.bootstrap

    Dir.glob(File.join(tmp_dir, "**/*")).each do |file|
      next unless File.file? file

      local_file_path = file.gsub "#{tmp_dir}/", ""
      target_file_path = File.join target_path, gem_name, local_file_path
      FileUtils.mkdir_p File.dirname(target_file_path)
      File.write target_file_path, File.read(file)
    end
  end
end

def generate_library_for_test name, protos
  require "tmpdir"

  Dir.mktmpdir do |client_lib|
    protoc_cmd = [
      "bundle exec grpc_tools_ruby_protoc",
      "--proto_path=../shared/api-common-protos/",
      "--proto_path=../shared/googleapis/",
      "--proto_path=../shared/protos/",
      "--ruby_out=#{client_lib}/lib",
      "--grpc_out=#{client_lib}/lib",
      "--ruby_gapic_out=#{client_lib}",
      "--ruby_gapic_opt=configuration=../shared/config/#{name}.yml",
      (protos.join " ").to_s
    ].join " "
    puts protoc_cmd.to_s if ENV["VERBOSE"]
    protoc_cmd_output = `#{protoc_cmd}`
    puts protoc_cmd_output if ENV["VERBOSE"]
    yield client_lib
  end
end

def install_and_run_unit_tests name, protos
  require "open3"

  generate_library_for_test name, protos do |dir|
    Bundler.with_clean_env do
      Dir.chdir dir do
        puts "Validating #{name}..."
        stdout, stderr, status = Open3.capture3 "bundle install && bundle exec rake test"
        puts stdout
        puts stderr unless status.success?
      end
    end
  end
end
