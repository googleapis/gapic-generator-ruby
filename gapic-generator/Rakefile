# frozen_string_literal: true

# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "bundler/gem_tasks"
require "fileutils"
require "rake/testtask"
require "rubocop/rake_task"
require "yard"
require "yard/rake/yardoc_task"
require_relative "../shared/gem_defaults"

RuboCop::RakeTask.new # Configuration is in .rubocop.yml
Rake::TestTask.new :test do |t|
  t.libs << "test"
  t.libs << "lib"
  t.test_files = FileList["test/**/*_test.rb"]
end

namespace :test do
  desc "Run tests on garbage-specific generation only"
  Rake::TestTask.new :garbage do |t|
    t.libs << "test"
    t.libs << "lib"
    t.test_files = FileList["test/**/*garbage*_test.rb"]
  end

  desc "Run tests on showcase-specific generation only"
  Rake::TestTask.new :showcase do |t|
    t.libs << "test"
    t.libs << "lib"
    t.test_files = FileList["test/**/*showcase*_test.rb"]
  end

  desc "Run tests on testing-specific generation only"
  Rake::TestTask.new :testing do |t|
    t.libs << "test"
    t.libs << "lib"
    t.test_files = FileList["test/**/*testing*_test.rb"]
  end

  desc "Run tests on parsing the grpc service config json"
  Rake::TestTask.new :grpc_service_config_parsing do |t|
    t.libs << "test"
    t.libs << "lib"
    t.test_files = FileList["test/gapic/grpc_service_config/**/*_test.rb"]
  end

  desc "Run tests on annotations"
  Rake::TestTask.new :annotations do |t|
    t.libs << "test"
    t.libs << "lib"
    t.test_files = FileList["test/gapic/annotations/**/*_test.rb"]
  end

  desc "Run tests on pattern parsing"
  Rake::TestTask.new :pattern do |t|
    t.libs << "test"
    t.libs << "lib"
    t.test_files = FileList["test/gapic/path_pattern/**/*_test.rb", "test/gapic/uri_template/**/*_test.rb"]
  end

  desc "Run tests on presenters"
  Rake::TestTask.new :presenters do |t|
    t.libs << "test"
    t.libs << "lib"
    t.test_files = FileList["test/gapic/presenters/**/*_test.rb"]
  end

  desc "Run tests on generators"
  Rake::TestTask.new :generators do |t|
    t.libs << "test"
    t.libs << "lib"
    t.test_files = FileList["test/gapic/generators/**/*_test.rb"]
  end

  desc "Run tests on schema"
  Rake::TestTask.new :schema do |t|
    t.libs << "test"
    t.libs << "lib"
    t.test_files = FileList["test/gapic/schema/**/*_test.rb"]
  end

  desc "Run tests on mixins"
  Rake::TestTask.new :mixins do |t|
    t.libs << "test"
    t.libs << "lib"
    t.test_files = FileList["test/gapic/schema/service_config_parser_test.rb", "test/gapic/mixins/**/*_test.rb", "test/gapic/**/*mixins*_test.rb"]
  end

  desc "Run tests on routing headers parsing"
  Rake::TestTask.new :routing_headers do |t|
    t.libs << "test"
    t.libs << "lib"
    t.test_files = FileList["test/gapic/**/*routing_headers*_test.rb"]
  end

  desc "Run tests on nostandard lro parsing"
  Rake::TestTask.new :nonstandard_lro do |t|
    t.libs << "test"
    t.libs << "lib"
    t.test_files = FileList[
      "test/gapic/presenters/method/nonstandard_lro_test.rb",
      "test/gapic/presenters/service/compute_small_test.rb",
      "test/gapic/presenters/method/rest_test.rb",
      "test/gapic/presenters/service/testing_test.rb"
    ]
  end
end

YARD::Rake::YardocTask.new do |y|
  # y.options << "--fail-on-warning"
end

desc "Run the CI build"
task :ci do
  puts "\ngapic-generator rubocop\n"
  Rake::Task[:rubocop].invoke
  puts "\ngapic-generator test\n"
  Rake::Task[:test].invoke
end

task default: :ci

libs = [:showcase, :garbage, :testing]

desc "Update the proto binary dumps which are used to generate templates"
task :bin do
  Rake::Task["bin:templates"].invoke
end
namespace :bin do |namespace|
  desc "Update the proto binary dumps for the templates"
  task :templates do
    libs.each do |lib|
      task = namespace[lib]
      puts "Invoking #{task.name}"
      task.invoke
    end
  end

  libs.each do |lib|
    desc "Update the proto binary dumps for #{lib}"
    task lib do
      update_templates_proto_bins lib
    end
  end
end

desc "Generate the expected output for tests"
task :gen do
  Rake::Task["gen:templates"].invoke
  Rake::Task["gen:gem_creation"].invoke
end
namespace :gen do |namespace|
  desc "Generate the expected output for templates tests"
  task :templates do
    libs.each do |lib|
      task = namespace[lib]
      puts "Invoking #{task.name}"
      task.invoke
    end
  end

  libs.each do |lib|
    desc "Generate the expected output for #{lib}"
    task lib do
      generate_default_templates lib
      
      # For testing purposes, copy the files from the shared/test_resources/{lib_name}
      # to the just-generated lib folder
      lib_dir = File.expand_path File.join("expected_output/templates", String(lib))
      test_res_dir = File.expand_path File.join("../shared/test_resources", String(lib))
      
      if Dir.exists?(test_res_dir) && !Dir.empty?(test_res_dir)
        puts "!!Adding/overriding files after generation for #{lib} from #{test_res_dir}"
        Dir.glob("#{test_res_dir}/*").each do |file|
          fname = File.basename file
          if File.file? file
            puts "Copying file #{fname}"
          else
            puts "Copying dir #{fname}"
          end
          FileUtils.copy_entry(file, File.join(lib_dir, fname))
        end
      end
    end
  end

  desc "Generate the expected output for gem creation tests"
  task :gem_creation do
    generate_gem "my_plugin"
  end
end

desc "Start an interactive shell."
task :console do
  require "irb"
  require "irb/completion"
  require "pp"

  $LOAD_PATH.unshift "lib"

  ARGV.clear
  IRB.start
end

desc "Build the docker image."
task :image, :name do |_t, args|
  image_name = args[:name] || "ruby-gapic-generator"
  sh "docker build -t #{image_name} ."
end

task :release_gem do
  Rake::Task["build"].invoke
  Rake::Task["release:rubygem_push"].invoke
end

def generate_default_templates service
  puts "Running templates generation for #{service}"
  require "gapic/schema/api"
  require "gapic/generators/default_generator"

  target_path = File.expand_path File.join("expected_output/templates", String(service))
  FileUtils.rm_rf target_path
  FileUtils.mkdir_p target_path

  protoc_cmd = [
    "grpc_tools_ruby_protoc",
    "--experimental_allow_proto3_optional=1",
    "-I ../shared/api-common-protos",
    "-I ../shared/googleapis",
    "-I ../shared/protos",
    "--ruby_out=#{target_path}/lib",
    "--grpc_out=#{target_path}/lib",
    "--ruby_gapic_out=#{target_path}",
    "--ruby_gapic_opt=configuration=../shared/config/#{service}.yml"
  ]

  # Add optional samples paths
  samples = samples_for service
  protoc_cmd << "--ruby_gapic_opt='samples=#{samples.join ';'}'" if samples

  # Add optional grpc service config
  grpc_service_config = grpc_service_config_for service
  unless grpc_service_config.empty?
    protoc_cmd << "--ruby_gapic_opt='grpc_service_config=#{grpc_service_config.join ';'}'"
  end

  # Add optional service.yaml
  service_yaml = service_yaml_for service
  if service_yaml
    protoc_cmd << "--ruby_gapic_opt='service-yaml=#{service_yaml}'"
  end

  # Add the proto files
  protos = protos_for service
  protoc_cmd << protos.join(" ")

  protoc_cmd = protoc_cmd.join " "
  puts protoc_cmd if ENV["VERBOSE"]

  protoc_cmd_output = `#{protoc_cmd}`
  puts protoc_cmd_output if ENV["VERBOSE"]
end

def generate_gem gem_name
  require "gapic/gem_builder"
  require "tmpdir"

  target_path = File.expand_path File.join("expected_output/gems", gem_name)
  FileUtils.rm_rf target_path
  FileUtils.mkdir_p target_path

  Dir.mktmpdir do |tmp_dir|
    builder = Gapic::GemBuilder.new gem_name, target_path
    builder.bootstrap

    Dir.glob(File.join(tmp_dir, "**/*")).each do |file|
      next unless File.file? file

      local_file_path = file.gsub "#{tmp_dir}/", ""
      target_file_path = File.join target_path, gem_name, local_file_path
      FileUtils.mkdir_p File.dirname(target_file_path)
      File.write target_file_path, File.read(file)
    end
  end
end

##
# Updates the binary dumps that are used in :gen namespace raketasks
# by calling through to the raketasks defined in `shared`
#
def update_templates_proto_bins service
  Dir.chdir "../shared" do
    Bundler.with_unbundled_env do
      puts "Running binary input file generation for #{service}"
      sh "bundle exec rake gen:#{service}", verbose: false
    end
  end
end
