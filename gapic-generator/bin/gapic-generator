#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

$stderr.sync = true
require "optparse"
require "fileutils"

def export_templates_to export_path
  if File.exist?(export_path) && File.file?(export_path)
    puts "Cannot export to an existing file path"
    exit
  end
  FileUtils.mkdir_p export_path
  source_dir = File.join File.dirname(__dir__), "templates", "default"
  FileUtils.cp_r source_dir, export_path
end

def build_gem_to gem_name, gem_path
  if File.exist?(gem_path) && File.file?(gem_path)
    puts "Cannot generate gem to an existing file path"
    exit
  end
  FileUtils.mkdir_p gem_path

  require "google/gapic/gem_builder"

  builder = Google::Gapic::GemBuilder.new gem_name, gem_path
  builder.bootstrap
  export_path = File.join gem_path, "templates", gem_name
  export_templates_to File.join(gem_path, "templates", "gem_name")

  Dir.chdir gem_path do
    system "git init && git add . && git commit -m 'Initial commit'"
  end
end

ARGV << "-h" if ARGV.empty?

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: gapic-generator [options]"

  opts.on "-e", "--export export_path", String,
          "Export templates to the given path" do |export_path|
    options[:export] = export_path
  end

  opts.on "-g", "--gem name,path", Array, "Generate a new rubygem" do |args|
    # puts args.inspect
    options[:gem] = { name: args[0], path: args[1] }
  end

  opts.on_tail "-h", "--help", "Show this message" do
    puts opts
    exit
  end
end.parse!

if options[:export]
  export_path = File.expand_path options[:export]

  export_templates_to export_path

  puts "Template files exported to #{export_path}"
  puts "You can use these files when calling protoc with:"
  puts ""
  puts "$ GOOGLE_GAPIC_GENERATOR_RUBY_TEMPLATES=#{export_path} protoc ..."
end

if options[:gem]
  gem_name = options[:gem][:name]
  # TODO: Validate gem name
  gem_path = File.expand_path options[:gem][:path]

  build_gem_to gem_name, gem_path

  puts "Gem #{gem_name} created at #{gem_path}"
end
