# frozen_string_literal: true

# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "json"
require "pathname"

require "google/gax"
require "google/gax/operation"
require "google/longrunning/operations_client"

require "google/cloud/messaging/v1/cloud_messaging_pb"
require "google/cloud/messaging/v1/credentials"

module Google
  module Showcase
    module V1alpha3
      ##
      # A simple messaging service that implements chat rooms and profile posts.
      #
      # This messaging service showcases the features that API clients
      # generated by gapic-generators implement.
      class MessagingClient
        # @private
        attr_reader :messaging_stub

        # The default address of the service.
        SERVICE_ADDRESS = "messaging.googleapis.com"

        # The default port of the service.
        DEFAULT_SERVICE_PORT = 443

        # The default set of gRPC interceptors.
        GRPC_INTERCEPTORS = [].freeze

        DEFAULT_TIMEOUT = 30

        # The scopes needed to make gRPC calls to all of the methods defined in
        # this service.
        ALL_SCOPES = [
          "https://www.googleapis.com/auth/cloud-platform"
        ].freeze

        # @private
        class OperationsClient < Google::Longrunning::OperationsClient
          SERVICE_ADDRESS = MessagingClient::SERVICE_ADDRESS
          GRPC_INTERCEPTORS = MessagingClient::GRPC_INTERCEPTORS.dup
        end

        ##
        # @param credentials [Google::Auth::Credentials, String, Hash,
        #   GRPC::Core::Channel, GRPC::Core::ChannelCredentials, Proc]
        #   Provides the means for authenticating requests made by the client. This parameter can
        #   be many types.
        #   A `Google::Auth::Credentials` uses a the properties of its represented keyfile for
        #   authenticating requests made by this client.
        #   A `String` will be treated as the path to the keyfile to be used for the construction of
        #   credentials for this client.
        #   A `Hash` will be treated as the contents of a keyfile to be used for the construction of
        #   credentials for this client.
        #   A `GRPC::Core::Channel` will be used to make calls through.
        #   A `GRPC::Core::ChannelCredentials` for the setting up the RPC client. The channel credentials
        #   should already be composed with a `GRPC::Core::CallCredentials` object.
        #   A `Proc` will be used as an updater_proc for the Grpc channel. The proc transforms the
        #   metadata for requests, generally, to give OAuth credentials.
        # @param scopes [Array<String>]
        #   The OAuth scopes for this service. This parameter is ignored if
        #   an updater_proc is supplied.
        # @param client_config [Hash]
        #   A Hash for call options for each method. See
        #   Google::Gax#construct_settings for the structure of
        #   this data. Falls back to the default config if not specified
        #   or the specified config is missing data points.
        # @param timeout [Numeric]
        #   The default timeout, in seconds, for calls made through this client.
        # @param metadata [Hash]
        #   Default metadata to be sent with each request. This can be overridden on a per call basis.
        # @param exception_transformer [Proc]
        #   An optional proc that intercepts any exceptions raised during an API call to inject
        #   custom error handling.
        #
        def initialize \
            credentials: nil,
            scopes: ALL_SCOPES,
            client_config: {},
            timeout: DEFAULT_TIMEOUT,
            metadata: nil,
            exception_transformer: nil,
            lib_name: nil,
            lib_version: ""
          # These require statements are intentionally placed here to initialize
          # the gRPC module only when it's required.
          # See https://github.com/googleapis/toolkit/issues/446
          require "google/gax/grpc"
          require "google/cloud/messaging/v1/cloud_messaging_services_pb"

          credentials ||= Google::Cloud::Messaging::V1::Credentials.default

          @operations_client = OperationsClient.new(
            credentials: credentials,
            scopes: scopes,
            client_config: client_config,
            timeout: timeout,
            lib_name: lib_name,
            lib_version: lib_version
          )
          @messaging_stub = create_stub credentials, scopes

          defaults = default_settings client_config, timeout, metadata, lib_name, lib_version

          @create_room = Google::Gax.create_api_call(
            @messaging_stub.method(:create_room),
            defaults["create_room"],
            exception_transformer: exception_transformer
          )
          @get_room = Google::Gax.create_api_call(
            @messaging_stub.method(:get_room),
            defaults["get_room"],
            exception_transformer: exception_transformer
          )
          @update_room = Google::Gax.create_api_call(
            @messaging_stub.method(:update_room),
            defaults["update_room"],
            exception_transformer: exception_transformer
          )
          @delete_room = Google::Gax.create_api_call(
            @messaging_stub.method(:delete_room),
            defaults["delete_room"],
            exception_transformer: exception_transformer
          )
          @list_rooms = Google::Gax.create_api_call(
            @messaging_stub.method(:list_rooms),
            defaults["list_rooms"],
            exception_transformer: exception_transformer
          )
          @create_blurb = Google::Gax.create_api_call(
            @messaging_stub.method(:create_blurb),
            defaults["create_blurb"],
            exception_transformer: exception_transformer
          )
          @get_blurb = Google::Gax.create_api_call(
            @messaging_stub.method(:get_blurb),
            defaults["get_blurb"],
            exception_transformer: exception_transformer
          )
          @update_blurb = Google::Gax.create_api_call(
            @messaging_stub.method(:update_blurb),
            defaults["update_blurb"],
            exception_transformer: exception_transformer
          )
          @delete_blurb = Google::Gax.create_api_call(
            @messaging_stub.method(:delete_blurb),
            defaults["delete_blurb"],
            exception_transformer: exception_transformer
          )
          @list_blurbs = Google::Gax.create_api_call(
            @messaging_stub.method(:list_blurbs),
            defaults["list_blurbs"],
            exception_transformer: exception_transformer
          )
          @search_blurbs = Google::Gax.create_api_call(
            @messaging_stub.method(:search_blurbs),
            defaults["search_blurbs"],
            exception_transformer: exception_transformer
          )
          @stream_blurbs = Google::Gax.create_api_call(
            @messaging_stub.method(:stream_blurbs),
            defaults["stream_blurbs"],
            exception_transformer: exception_transformer
          )
          @send_blurbs = Google::Gax.create_api_call(
            @messaging_stub.method(:send_blurbs),
            defaults["send_blurbs"],
            exception_transformer: exception_transformer
          )
          @connect = Google::Gax.create_api_call(
            @messaging_stub.method(:connect),
            defaults["connect"],
            exception_transformer: exception_transformer
          )
        end

        # Service calls

        ##
        #  Creates a room.
        def create_room \
            room,
            options: nil,
            &block
          request = {
            room: room
          }.delete_if { |_, v| v.nil? }
          request = Google::Gax.to_proto request, Google::Showcase::V1alpha3::CreateRoomRequest
          @create_room.call(request, options, &block)
        end

        ##
        #  Retrieves the Room with the given resource name.
        def get_room \
            name,
            options: nil,
            &block
          request = {
            name: name
          }.delete_if { |_, v| v.nil? }
          request = Google::Gax.to_proto request, Google::Showcase::V1alpha3::GetRoomRequest
          @get_room.call(request, options, &block)
        end

        ##
        #  Updates a room.
        def update_room \
            room,
            update_mask,
            options: nil,
            &block
          request = {
            room: room,
            update_mask: update_mask
          }.delete_if { |_, v| v.nil? }
          request = Google::Gax.to_proto request, Google::Showcase::V1alpha3::UpdateRoomRequest
          @update_room.call(request, options, &block)
        end

        ##
        #  Deletes a room and all of its blurbs.
        def delete_room \
            name,
            options: nil,
            &block
          request = {
            name: name
          }.delete_if { |_, v| v.nil? }
          request = Google::Gax.to_proto request, Google::Showcase::V1alpha3::DeleteRoomRequest
          @delete_room.call(request, options, &block)
        end

        ##
        #  Lists all chat rooms.
        def list_rooms \
            page_size,
            page_token,
            options: nil,
            &block
          request = {
            page_size: page_size,
            page_token: page_token
          }.delete_if { |_, v| v.nil? }
          request = Google::Gax.to_proto request, Google::Showcase::V1alpha3::ListRoomsRequest
          @list_rooms.call(request, options, &block)
        end

        ##
        #  Creates a blurb. If the parent is a room, the blurb is understood to be a
        #  message in that room. If the parent is a profile, the blurb is understood
        #  to be a post on the profile.
        def create_blurb \
            parent,
            blurb,
            options: nil,
            &block
          request = {
            parent: parent,
            blurb: blurb
          }.delete_if { |_, v| v.nil? }
          request = Google::Gax.to_proto request, Google::Showcase::V1alpha3::CreateBlurbRequest
          @create_blurb.call(request, options, &block)
        end

        ##
        #  Retrieves the Blurb with the given resource name.
        def get_blurb \
            name,
            options: nil,
            &block
          request = {
            name: name
          }.delete_if { |_, v| v.nil? }
          request = Google::Gax.to_proto request, Google::Showcase::V1alpha3::GetBlurbRequest
          @get_blurb.call(request, options, &block)
        end

        ##
        #  Updates a blurb.
        def update_blurb \
            blurb,
            update_mask,
            options: nil,
            &block
          request = {
            blurb: blurb,
            update_mask: update_mask
          }.delete_if { |_, v| v.nil? }
          request = Google::Gax.to_proto request, Google::Showcase::V1alpha3::UpdateBlurbRequest
          @update_blurb.call(request, options, &block)
        end

        ##
        #  Deletes a blurb.
        def delete_blurb \
            name,
            options: nil,
            &block
          request = {
            name: name
          }.delete_if { |_, v| v.nil? }
          request = Google::Gax.to_proto request, Google::Showcase::V1alpha3::DeleteBlurbRequest
          @delete_blurb.call(request, options, &block)
        end

        ##
        #  Lists blurbs for a specific chat room or user profile depending on the
        #  parent resource name.
        def list_blurbs \
            parent,
            page_size,
            page_token,
            options: nil,
            &block
          request = {
            parent: parent,
            page_size: page_size,
            page_token: page_token
          }.delete_if { |_, v| v.nil? }
          request = Google::Gax.to_proto request, Google::Showcase::V1alpha3::ListBlurbsRequest
          @list_blurbs.call(request, options, &block)
        end

        ##
        #  This method searches through all blurbs across all rooms and profiles
        #  for blurbs containing to words found in the query. Only posts that
        #  contain an exact match of a queried word will be returned.
        def search_blurbs \
            query,
            parent,
            page_size,
            page_token,
            options: nil,
            &block
          request = {
            query: query,
            parent: parent,
            page_size: page_size,
            page_token: page_token
          }.delete_if { |_, v| v.nil? }
          request = Google::Gax.to_proto request, Google::Showcase::V1alpha3::SearchBlurbsRequest
          @search_blurbs.call(request, options, &block)
        end

        ##
        #  This returns a stream that emits the blurbs that are created for a
        #  particular chat room or user profile.
        def stream_blurbs \
            name,
            expire_time,
            options: nil,
            &block
          request = {
            name: name,
            expire_time: expire_time
          }.delete_if { |_, v| v.nil? }
          request = Google::Gax.to_proto request, Google::Showcase::V1alpha3::StreamBlurbsRequest
          @stream_blurbs.call(request, options, &block)
        end

        ##
        #  This is a stream to create multiple blurbs. If an invalid blurb is
        #  requested to be created, the stream will close with an error.
        def send_blurbs \
            parent,
            blurb,
            options: nil,
            &block
          request = {
            parent: parent,
            blurb: blurb
          }.delete_if { |_, v| v.nil? }
          request = Google::Gax.to_proto request, Google::Showcase::V1alpha3::CreateBlurbRequest
          @send_blurbs.call(request, options, &block)
        end

        ##
        #  This method starts a bidirectional stream that receives all blurbs that
        #  are being created after the stream has started and sends requests to create
        #  blurbs. If an invalid blurb is requested to be created, the stream will
        #  close with an error.
        def connect \
            config,
            blurb,
            options: nil,
            &block
          request = {
            config: config,
            blurb: blurb
          }.delete_if { |_, v| v.nil? }
          request = Google::Gax.to_proto request, Google::Showcase::V1alpha3::ConnectRequest
          @connect.call(request, options, &block)
        end

        protected

        def create_stub credentials, scopes
          if credentials.is_a?(String) || credentials.is_a?(Hash)
            updater_proc = Google::Cloud::Messaging::V1::Credentials.new(credentials).updater_proc
          elsif credentials.is_a? GRPC::Core::Channel
            channel = credentials
          elsif credentials.is_a? GRPC::Core::ChannelCredentials
            chan_creds = credentials
          elsif credentials.is_a? Proc
            updater_proc = credentials
          elsif credentials.is_a? Google::Auth::Credentials
            updater_proc = credentials.updater_proc
          end

          # Allow overriding the service path/port in subclasses.
          service_path = self.class::SERVICE_ADDRESS
          port = self.class::DEFAULT_SERVICE_PORT
          interceptors = self.class::GRPC_INTERCEPTORS
          stub_new = Google::Cloud::Messaging::V1::Messaging::Stub.method :new
          Google::Gax::Grpc.create_stub(
            service_path,
            port,
            chan_creds: chan_creds,
            channel: channel,
            updater_proc: updater_proc,
            scopes: scopes,
            interceptors: interceptors,
            &stub_new
          )
        end

        def default_settings client_config, timeout, metadata, lib_name, lib_version
          package_version = Gem.loaded_specs["google-cloud-messaging"].version.version

          google_api_client = ["gl-ruby/#{RUBY_VERSION}"]
          google_api_client << " #{lib_name}/#{lib_version}" if lib_name
          google_api_client << " gapic/#{package_version} gax/#{Google::Gax::VERSION}"
          google_api_client << " grpc/#{GRPC::VERSION}"
          google_api_client.join

          headers = { "x-goog-api-client": google_api_client }
          headers.merge! metadata unless metadata.nil?
          client_config_file = Pathname.new(__dir__).join(
            "messaging_client_config.json"
          )
          client_config_file.open do |f|
            Google::Gax.construct_settings(
              "google.cloud.messaging.v1.Messaging",
              JSON.parse(f.read),
              client_config,
              Google::Gax::Grpc::STATUS_CODE_NAMES,
              timeout,
              errors: Google::Gax::Grpc::API_ERRORS,
              metadata: headers
            )
          end
        end
      end
    end
  end
end
