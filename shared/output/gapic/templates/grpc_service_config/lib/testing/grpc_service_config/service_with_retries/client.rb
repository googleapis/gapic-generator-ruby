# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "gapic/common"
require "gapic/config"
require "gapic/config/method"

require "testing/grpc_service_config/version"
require "testing/grpc_service_config/grpc_service_config_pb"
require "testing/grpc_service_config/service_with_retries/credentials"


module Testing
  module GrpcServiceConfig
    module ServiceWithRetries
      # Service that implements ServiceWithRetries API.
      class Client
        # @private
        attr_reader :service_with_retries_stub

        ##
        # Configuration for the ServiceWithRetries Client API.
        #
        # @yield [config] Configure the Client client.
        # @yieldparam config [Client::Configuration]
        #
        # @return [Client::Configuration]
        #
        def self.configure
          @configure ||= Client::Configuration.new
          yield @configure if block_given?
          @configure
        end

        ##
        # Configure the ServiceWithRetries Client instance.
        #
        # The configuration is set to the derived mode, meaning that values can be changed,
        # but structural changes (adding new fields, etc.) are not allowed. Structural changes
        # should be made on {Client.configure}.
        #
        # @yield [config] Configure the Client client.
        # @yieldparam config [Client::Configuration]
        #
        # @return [Client::Configuration]
        #
        def configure
          yield @config if block_given?
          @config
        end

        ##
        # Create a new Client client object.
        #
        # @yield [config] Configure the Client client.
        # @yieldparam config [Client::Configuration]
        #
        def initialize
          # These require statements are intentionally placed here to initialize
          # the gRPC module only when it's required.
          # See https://github.com/googleapis/toolkit/issues/446
          require "gapic/grpc"
          require "testing/grpc_service_config/grpc_service_config_services_pb"

          # Create the configuration object
          @config = Configuration.new Client.configure

          # Yield the configuration if needed
          yield @config if block_given?

          # Create credentials
          credentials = @config.credentials
          credentials ||= Credentials.default scope: @config.scope
          if credentials.is_a?(String) || credentials.is_a?(Hash)
            credentials = Credentials.new credentials, scope: @config.scope
          end


          @service_with_retries_stub = Gapic::ServiceStub.new(
            Testing::GrpcServiceConfig::ServiceWithRetries::Stub,
            credentials:  credentials,
            endpoint:     @config.endpoint,
            channel_args: @config.channel_args,
            interceptors: @config.interceptors
          )
        end

        # Service calls

        ##
        # @overload service_level_retry_method(request, options = nil)
        #   @param request [Testing::GrpcServiceConfig::Request | Hash]
        #   @param options [Gapic::CallOptions, Hash]
        #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
        #
        # @overload service_level_retry_method()
        #
        #
        # @yield [response, operation] Access the result along with the RPC operation
        # @yieldparam response [Testing::GrpcServiceConfig::Response]
        # @yieldparam operation [GRPC::ActiveCall::Operation]
        #
        # @return [Testing::GrpcServiceConfig::Response]
        #
        # @raise [GRPC::BadStatus] if the RPC is aborted.
        #
        def service_level_retry_method request, options = nil
          raise ArgumentError, "request must be provided" if request.nil?

          request = Gapic::Protobuf.coerce request, to: Testing::GrpcServiceConfig::Request

          # Converts hash and nil to an options object
          options = Gapic::CallOptions.new options.to_h if options.respond_to? :to_h

          # Customize the options with defaults
          metadata = @config.rpcs.service_level_retry_method.metadata.to_h

          # Set x-goog-api-client header
          metadata[:"x-goog-api-client"] ||= Gapic::Headers.x_goog_api_client \
            lib_name: @config.lib_name, lib_version: @config.lib_version,
            gapic_version: Testing::GrpcServiceConfig::VERSION

          options.apply_defaults timeout:      @config.rpcs.service_level_retry_method.timeout,
                                 metadata:     metadata,
                                 retry_policy: @config.rpcs.service_level_retry_method.retry_policy
          options.apply_defaults metadata:     @config.metadata,
                                 retry_policy: @config.retry_policy

          @service_with_retries_stub.call_rpc :service_level_retry_method, request, options: options do |response, operation|
            yield response, operation if block_given?
            return response
          end
        end

        ##
        # @overload method_level_retry_method(request, options = nil)
        #   @param request [Testing::GrpcServiceConfig::Request | Hash]
        #   @param options [Gapic::CallOptions, Hash]
        #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
        #
        # @overload method_level_retry_method()
        #
        #
        # @yield [response, operation] Access the result along with the RPC operation
        # @yieldparam response [Testing::GrpcServiceConfig::Response]
        # @yieldparam operation [GRPC::ActiveCall::Operation]
        #
        # @return [Testing::GrpcServiceConfig::Response]
        #
        # @raise [GRPC::BadStatus] if the RPC is aborted.
        #
        def method_level_retry_method request, options = nil
          raise ArgumentError, "request must be provided" if request.nil?

          request = Gapic::Protobuf.coerce request, to: Testing::GrpcServiceConfig::Request

          # Converts hash and nil to an options object
          options = Gapic::CallOptions.new options.to_h if options.respond_to? :to_h

          # Customize the options with defaults
          metadata = @config.rpcs.method_level_retry_method.metadata.to_h

          # Set x-goog-api-client header
          metadata[:"x-goog-api-client"] ||= Gapic::Headers.x_goog_api_client \
            lib_name: @config.lib_name, lib_version: @config.lib_version,
            gapic_version: Testing::GrpcServiceConfig::VERSION

          options.apply_defaults timeout:      @config.rpcs.method_level_retry_method.timeout,
                                 metadata:     metadata,
                                 retry_policy: @config.rpcs.method_level_retry_method.retry_policy
          options.apply_defaults metadata:     @config.metadata,
                                 retry_policy: @config.retry_policy

          @service_with_retries_stub.call_rpc :method_level_retry_method, request, options: options do |response, operation|
            yield response, operation if block_given?
            return response
          end
        end

        ##
        # Configuration class for the ServiceWithRetries API.
        class Configuration
          extend Gapic::Config

          config_attr :endpoint,     "grpcserviceconfig.example.com", String
          config_attr :credentials,  nil do |value|
            allowed = [::String, ::Hash, ::Proc, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
            allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
            allowed.any? { |klass| klass === value }
          end
          config_attr :scope,        nil, String, Array, nil
          config_attr :lib_name,     nil, String, nil
          config_attr :lib_version,  nil, String, nil
          config_attr(:channel_args, { "grpc.service_config_disable_resolution"=>1 }, Hash, nil)
          config_attr :interceptors, nil, Array, nil
          config_attr :timeout,      nil, Numeric, nil
          config_attr :metadata,     nil, Hash, nil
          config_attr :retry_policy, nil, Hash, Proc, nil

          def initialize parent_config = nil
            @parent_config = parent_config unless parent_config.nil?

            yield self if block_given?
          end

          def rpcs
            @rpcs ||= begin
              parent_rpcs = nil
              parent_rpcs = @parent_config.rpcs if @parent_config&.respond_to? :rpcs
              Rpcs.new parent_rpcs
            end
          end

          ##
          # Configuration RPC class for the ServiceWithRetries API.
          class Rpcs
            attr_reader :service_level_retry_method
            attr_reader :method_level_retry_method

            def initialize parent_rpcs = nil
              service_level_retry_method_config = parent_rpcs&.service_level_retry_method if parent_rpcs&.respond_to? :service_level_retry_method
              @service_level_retry_method = Gapic::Config::Method.new service_level_retry_method_config
              method_level_retry_method_config = parent_rpcs&.method_level_retry_method if parent_rpcs&.respond_to? :method_level_retry_method
              @method_level_retry_method = Gapic::Config::Method.new method_level_retry_method_config

              yield self if block_given?
            end
          end
        end
      end
    end
  end
end

# rubocop:disable Lint/HandleExceptions

# Once client is loaded, load helpers.rb if it exists.
begin
  require "testing/grpc_service_config/service_with_retries/helpers"
rescue LoadError
end

# rubocop:enable Lint/HandleExceptions
