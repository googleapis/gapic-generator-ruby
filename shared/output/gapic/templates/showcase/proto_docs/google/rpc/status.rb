# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Google
  module Rpc
    # The `Status` type defines a logical error model that is suitable for different
    # programming environments, including REST APIs and RPC APIs. It is used by
    # [gRPC](https://github.com/grpc). The error model is designed to be:
    #
    # - Simple to use and understand for most users
    # - Flexible enough to meet unexpected needs
    #
    # # Overview
    #
    # The `Status` message contains three pieces of data: error code, error message,
    # and error details. The error code should be an enum value of
    # [google.rpc.Code][google.rpc.Code], but it may accept additional error codes if needed.  The
    # error message should be a developer-facing English message that helps
    # developers *understand* and *resolve* the error. If a localized user-facing
    # error message is needed, put the localized message in the error details or
    # localize it in the client. The optional error details may contain arbitrary
    # information about the error. There is a predefined set of error detail types
    # in the package `google.rpc` that can be used for common error conditions.
    #
    # # Language mapping
    #
    # The `Status` message is the logical representation of the error model, but it
    # is not necessarily the actual wire format. When the `Status` message is
    # exposed in different client libraries and different wire protocols, it can be
    # mapped differently. For example, it will likely be mapped to some exceptions
    # in Java, but more likely mapped to some error codes in C.
    #
    # # Other uses
    #
    # The error model and the `Status` message can be used in a variety of
    # environments, either with or without APIs, to provide a
    # consistent developer experience across different environments.
    #
    # Example uses of this error model include:
    #
    # - Partial errors. If a service needs to return partial errors to the client,
    #     it may embed the `Status` in the normal response to indicate the partial
    #     errors.
    #
    # - Workflow errors. A typical workflow has multiple steps. Each step may
    #     have a `Status` message for error reporting.
    #
    # - Batch operations. If a client uses batch request and batch response, the
    #     `Status` message should be used directly inside batch response, one for
    #     each error sub-response.
    #
    # - Asynchronous operations. If an API call embeds asynchronous operation
    #     results in its response, the status of those operations should be
    #     represented directly using the `Status` message.
    #
    # - Logging. If some API errors are stored in logs, the message `Status` could
    #     be used directly after any stripping needed for security/privacy reasons.
    # @!attribute [rw] code
    #   @return [::Integer]
    #     The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
    # @!attribute [rw] message
    #   @return [::String]
    #     A developer-facing error message, which should be in English. Any
    #     user-facing error message should be localized and sent in the
    #     {::Google::Rpc::Status#details google.rpc.Status.details} field, or localized by the client.
    # @!attribute [rw] details
    #   @return [::Array<::Google::Protobuf::Any>]
    #     A list of messages that carry the error details.  There is a common set of
    #     message types for APIs to use.
    class Status
      include ::Google::Protobuf::MessageExts
      extend ::Google::Protobuf::MessageExts::ClassMethods
    end
  end
end
