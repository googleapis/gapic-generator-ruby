# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "gapic/rest"
require "google/showcase/v1beta1/testing_pb"

module Google
  module Showcase
    module V1beta1
      module Testing
        module Rest
          ##
          # REST service stub for the Testing service.
          #
          class ServiceStub
            ##
            # Create a new Testing REST service stub object.
            #
            # @param endpoint [String]
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"localhost:7469"`.
            #
            # @param credentials [Google::Auth::Credentials]
            #   Credentials to send with calls in form of a googleauth credentials object.
            #   (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #
            def initialize endpoint:, credentials:
              @client_stub = ::Gapic::Rest::ClientStub.new endpoint: endpoint, credentials: credentials
            end

            # Service calls

            ##
            # Creates a new testing session.
            #
            # @param request_pb [::Google::Showcase::V1beta1::CreateSessionRequest]
            #   A request object representing the call parameters. Required.
            # @param options [::Gapic::CallOptions]
            #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            # @return [::Google::Showcase::V1beta1::Session]
            def create_session request_pb, options:, &block
              request_json = JSON.parse ::Google::Showcase::V1beta1::CreateSessionRequest.encode_json(request_pb)

              uri = "/v1beta1/sessions"
              body = request_pb.session.to_json

              result_json = @client_stub.make_post_request(
                uri:     uri,
                body:    body,
                options: options,
                &block
              )

              ::Google::Showcase::V1beta1::Session.decode_json result_json[:body]
            end

            ##
            # Gets a testing session.
            #
            # @param request_pb [::Google::Showcase::V1beta1::GetSessionRequest]
            #   A request object representing the call parameters. Required.
            # @param options [::Gapic::CallOptions]
            #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            # @return [::Google::Showcase::V1beta1::Session]
            def get_session request_pb, options:, &block
              request_json = JSON.parse ::Google::Showcase::V1beta1::GetSessionRequest.encode_json(request_pb)

              uri = "/v1beta1/#{request_pb.name}"

              result_json = @client_stub.make_get_request(
                uri:     uri,
                options: options,
                &block
              )

              ::Google::Showcase::V1beta1::Session.decode_json result_json[:body]
            end

            ##
            # Lists the current test sessions.
            #
            # @param request_pb [::Google::Showcase::V1beta1::ListSessionsRequest]
            #   A request object representing the call parameters. Required.
            # @param options [::Gapic::CallOptions]
            #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            # @return [::Google::Showcase::V1beta1::ListSessionsResponse]
            def list_sessions request_pb, options:, &block
              request_json = JSON.parse ::Google::Showcase::V1beta1::ListSessionsRequest.encode_json(request_pb)

              uri = "/v1beta1/sessions"

              result_json = @client_stub.make_get_request(
                uri:     uri,
                options: options,
                &block
              )

              ::Google::Showcase::V1beta1::ListSessionsResponse.decode_json result_json[:body]
            end

            ##
            # Delete a test session.
            #
            # @param request_pb [::Google::Showcase::V1beta1::DeleteSessionRequest]
            #   A request object representing the call parameters. Required.
            # @param options [::Gapic::CallOptions]
            #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            # @return [::Google::Protobuf::Empty]
            def delete_session request_pb, options:, &block
              request_json = JSON.parse ::Google::Showcase::V1beta1::DeleteSessionRequest.encode_json(request_pb)

              uri = "/v1beta1/#{request_pb.name}"

              result_json = @client_stub.make_delete_request(
                uri:     uri,
                options: options,
                &block
              )

              ::Google::Protobuf::Empty.decode_json result_json[:body]
            end

            ##
            # Report on the status of a session.
            # This generates a report detailing which tests have been completed,
            # and an overall rollup.
            #
            # @param request_pb [::Google::Showcase::V1beta1::ReportSessionRequest]
            #   A request object representing the call parameters. Required.
            # @param options [::Gapic::CallOptions]
            #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            # @return [::Google::Showcase::V1beta1::ReportSessionResponse]
            def report_session request_pb, options:, &block
              request_json = JSON.parse ::Google::Showcase::V1beta1::ReportSessionRequest.encode_json(request_pb)

              uri = "/v1beta1/#{request_pb.name}:report"

              result_json = @client_stub.make_post_request(
                uri:     uri,
                options: options,
                &block
              )

              ::Google::Showcase::V1beta1::ReportSessionResponse.decode_json result_json[:body]
            end

            ##
            # List the tests of a sessesion.
            #
            # @param request_pb [::Google::Showcase::V1beta1::ListTestsRequest]
            #   A request object representing the call parameters. Required.
            # @param options [::Gapic::CallOptions]
            #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            # @return [::Google::Showcase::V1beta1::ListTestsResponse]
            def list_tests request_pb, options:, &block
              request_json = JSON.parse ::Google::Showcase::V1beta1::ListTestsRequest.encode_json(request_pb)

              uri = "/v1beta1/#{request_pb.parent}/tests"

              result_json = @client_stub.make_get_request(
                uri:     uri,
                options: options,
                &block
              )

              ::Google::Showcase::V1beta1::ListTestsResponse.decode_json result_json[:body]
            end

            ##
            # Explicitly decline to implement a test.
            #
            # This removes the test from subsequent `ListTests` calls, and
            # attempting to do the test will error.
            #
            # This method will error if attempting to delete a required test.
            #
            # @param request_pb [::Google::Showcase::V1beta1::DeleteTestRequest]
            #   A request object representing the call parameters. Required.
            # @param options [::Gapic::CallOptions]
            #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            # @return [::Google::Protobuf::Empty]
            def delete_test request_pb, options:, &block
              request_json = JSON.parse ::Google::Showcase::V1beta1::DeleteTestRequest.encode_json(request_pb)

              uri = "/v1beta1/#{request_pb.name}"

              result_json = @client_stub.make_delete_request(
                uri:     uri,
                options: options,
                &block
              )

              ::Google::Protobuf::Empty.decode_json result_json[:body]
            end

            ##
            # Register a response to a test.
            #
            # In cases where a test involves registering a final answer at the
            # end of the test, this method provides the means to do so.
            #
            # @param request_pb [::Google::Showcase::V1beta1::VerifyTestRequest]
            #   A request object representing the call parameters. Required.
            # @param options [::Gapic::CallOptions]
            #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            # @return [::Google::Showcase::V1beta1::VerifyTestResponse]
            def verify_test request_pb, options:, &block
              request_json = JSON.parse ::Google::Showcase::V1beta1::VerifyTestRequest.encode_json(request_pb)

              uri = "/v1beta1/#{request_pb.name}:check"

              result_json = @client_stub.make_post_request(
                uri:     uri,
                options: options,
                &block
              )

              ::Google::Showcase::V1beta1::VerifyTestResponse.decode_json result_json[:body]
            end
          end
        end
      end
    end
  end
end
