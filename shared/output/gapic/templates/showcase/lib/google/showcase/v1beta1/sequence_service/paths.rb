# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Google
  module Showcase
    module V1beta1
      module SequenceService
        # Path helper methods for the SequenceService API.
        module Paths
          ##
          # Create a fully-qualified Sequence resource string.
          #
          # The resource will be in the following format:
          #
          # `sequences/{sequence}`
          #
          # @param sequence [String]
          #
          # @return [::String]
          def sequence_path sequence:
            "sequences/#{sequence}"
          end

          ##
          # Create a fully-qualified SequenceReport resource string.
          #
          # The resource will be in the following format:
          #
          # `sequences/{sequence}/sequenceReport`
          #
          # @param sequence [String]
          #
          # @return [::String]
          def sequence_report_path sequence:
            "sequences/#{sequence}/sequenceReport"
          end

          ##
          # Create a fully-qualified StreamingSequence resource string.
          #
          # The resource will be in the following format:
          #
          # `streamingSequences/{streaming_sequence}`
          #
          # @param streaming_sequence [String]
          #
          # @return [::String]
          def streaming_sequence_path streaming_sequence:
            "streamingSequences/#{streaming_sequence}"
          end

          ##
          # Create a fully-qualified StreamingSequenceReport resource string.
          #
          # The resource will be in the following format:
          #
          # `streamingSequences/{streaming_sequence}/streamingSequenceReport`
          #
          # @param streaming_sequence [String]
          #
          # @return [::String]
          def streaming_sequence_report_path streaming_sequence:
            "streamingSequences/#{streaming_sequence}/streamingSequenceReport"
          end

          extend self
        end
      end
    end
  end
end
