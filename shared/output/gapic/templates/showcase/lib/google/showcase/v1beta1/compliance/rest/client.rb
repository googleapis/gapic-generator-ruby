# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/showcase/v1beta1/compliance_pb"
require "google/showcase/v1beta1/compliance/rest/service_stub"

module Google
  module Showcase
    module V1beta1
      module Compliance
        module Rest
          ##
          # REST client for the Compliance service.
          #
          # This service is used to test that GAPICs can transcode proto3 requests to
          # REST format correctly for various types of HTTP annotations.
          #
          class Client
            # @private
            attr_reader :compliance_stub

            ##
            # Configure the Compliance Client class.
            #
            # See {::Google::Showcase::V1beta1::Compliance::Rest::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all Compliance clients
            #   ::Google::Showcase::V1beta1::Compliance::Rest::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                default_config = Client::Configuration.new

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the Compliance Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Showcase::V1beta1::Compliance::Rest::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # Create a new Compliance REST client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Showcase::V1beta1::Compliance::Rest::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Showcase::V1beta1::Compliance::Rest::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Compliance client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              credentials ||= Credentials.default scope: @config.scope
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end

              @compliance_stub = ::Google::Showcase::V1beta1::Compliance::Rest::ServiceStub.new endpoint: @config.endpoint,
                                                                                                credentials: credentials
            end

            # Service calls

            ##
            # This method echoes the ComplianceData request. This method exercises
            # sending the entire request object in the REST body.
            #
            # @overload repeat_data_body(request, options = nil)
            #   Pass arguments to `repeat_data_body` via a request object, either of type
            #   {::Google::Showcase::V1beta1::RepeatRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::RepeatRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #     Note: currently retry functionality is not implemented. While it is possible
            #     to set it using ::Gapic::CallOptions, it will not be applied
            #
            # @overload repeat_data_body(name: nil, info: nil, server_verify: nil, f_int32: nil, f_int64: nil, f_double: nil, p_int32: nil, p_int64: nil, p_double: nil)
            #   Pass arguments to `repeat_data_body` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #   @param info [::Google::Showcase::V1beta1::ComplianceData, ::Hash]
            #   @param server_verify [::Boolean]
            #     If true, the server will verify that the received request matches
            #     the request with the same name in the compliance test suite.
            #   @param f_int32 [::Integer]
            #     Some top level fields, to test that these are encoded correctly
            #     in query params.
            #   @param f_int64 [::Integer]
            #   @param f_double [::Float]
            #   @param p_int32 [::Integer]
            #   @param p_int64 [::Integer]
            #   @param p_double [::Float]
            # @yield [result, response] Access the result along with the Faraday response object
            # @yieldparam result [::Google::Showcase::V1beta1::RepeatResponse]
            # @yieldparam response [::Faraday::Response]
            #
            # @return [::Google::Showcase::V1beta1::RepeatResponse]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            def repeat_data_body request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::RepeatRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.repeat_data_body.metadata.to_h

              # Set x-goog-api-client header
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              options.apply_defaults timeout:      @config.rpcs.repeat_data_body.timeout,
                                     metadata:     call_metadata

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata

              @compliance_stub.repeat_data_body request, options do |result, response|
                yield result, response if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # This method echoes the ComplianceData request. This method exercises
            # sending the a message-type field in the REST body. Per AIP-127, only
            # top-level, non-repeated fields can be sent this way.
            #
            # @overload repeat_data_body_info(request, options = nil)
            #   Pass arguments to `repeat_data_body_info` via a request object, either of type
            #   {::Google::Showcase::V1beta1::RepeatRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::RepeatRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #     Note: currently retry functionality is not implemented. While it is possible
            #     to set it using ::Gapic::CallOptions, it will not be applied
            #
            # @overload repeat_data_body_info(name: nil, info: nil, server_verify: nil, f_int32: nil, f_int64: nil, f_double: nil, p_int32: nil, p_int64: nil, p_double: nil)
            #   Pass arguments to `repeat_data_body_info` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #   @param info [::Google::Showcase::V1beta1::ComplianceData, ::Hash]
            #   @param server_verify [::Boolean]
            #     If true, the server will verify that the received request matches
            #     the request with the same name in the compliance test suite.
            #   @param f_int32 [::Integer]
            #     Some top level fields, to test that these are encoded correctly
            #     in query params.
            #   @param f_int64 [::Integer]
            #   @param f_double [::Float]
            #   @param p_int32 [::Integer]
            #   @param p_int64 [::Integer]
            #   @param p_double [::Float]
            # @yield [result, response] Access the result along with the Faraday response object
            # @yieldparam result [::Google::Showcase::V1beta1::RepeatResponse]
            # @yieldparam response [::Faraday::Response]
            #
            # @return [::Google::Showcase::V1beta1::RepeatResponse]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            def repeat_data_body_info request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::RepeatRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.repeat_data_body_info.metadata.to_h

              # Set x-goog-api-client header
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              options.apply_defaults timeout:      @config.rpcs.repeat_data_body_info.timeout,
                                     metadata:     call_metadata

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata

              @compliance_stub.repeat_data_body_info request, options do |result, response|
                yield result, response if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # This method echoes the ComplianceData request. This method exercises
            # sending all request fields as query parameters.
            #
            # @overload repeat_data_query(request, options = nil)
            #   Pass arguments to `repeat_data_query` via a request object, either of type
            #   {::Google::Showcase::V1beta1::RepeatRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::RepeatRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #     Note: currently retry functionality is not implemented. While it is possible
            #     to set it using ::Gapic::CallOptions, it will not be applied
            #
            # @overload repeat_data_query(name: nil, info: nil, server_verify: nil, f_int32: nil, f_int64: nil, f_double: nil, p_int32: nil, p_int64: nil, p_double: nil)
            #   Pass arguments to `repeat_data_query` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #   @param info [::Google::Showcase::V1beta1::ComplianceData, ::Hash]
            #   @param server_verify [::Boolean]
            #     If true, the server will verify that the received request matches
            #     the request with the same name in the compliance test suite.
            #   @param f_int32 [::Integer]
            #     Some top level fields, to test that these are encoded correctly
            #     in query params.
            #   @param f_int64 [::Integer]
            #   @param f_double [::Float]
            #   @param p_int32 [::Integer]
            #   @param p_int64 [::Integer]
            #   @param p_double [::Float]
            # @yield [result, response] Access the result along with the Faraday response object
            # @yieldparam result [::Google::Showcase::V1beta1::RepeatResponse]
            # @yieldparam response [::Faraday::Response]
            #
            # @return [::Google::Showcase::V1beta1::RepeatResponse]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            def repeat_data_query request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::RepeatRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.repeat_data_query.metadata.to_h

              # Set x-goog-api-client header
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              options.apply_defaults timeout:      @config.rpcs.repeat_data_query.timeout,
                                     metadata:     call_metadata

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata

              @compliance_stub.repeat_data_query request, options do |result, response|
                yield result, response if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # This method echoes the ComplianceData request. This method exercises
            # sending some parameters as "simple" path variables (i.e., of the form
            # "/bar/\\{foo}" rather than "/\\{foo=bar/*}"), and the rest as query parameters.
            #
            # @overload repeat_data_simple_path(request, options = nil)
            #   Pass arguments to `repeat_data_simple_path` via a request object, either of type
            #   {::Google::Showcase::V1beta1::RepeatRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::RepeatRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #     Note: currently retry functionality is not implemented. While it is possible
            #     to set it using ::Gapic::CallOptions, it will not be applied
            #
            # @overload repeat_data_simple_path(name: nil, info: nil, server_verify: nil, f_int32: nil, f_int64: nil, f_double: nil, p_int32: nil, p_int64: nil, p_double: nil)
            #   Pass arguments to `repeat_data_simple_path` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #   @param info [::Google::Showcase::V1beta1::ComplianceData, ::Hash]
            #   @param server_verify [::Boolean]
            #     If true, the server will verify that the received request matches
            #     the request with the same name in the compliance test suite.
            #   @param f_int32 [::Integer]
            #     Some top level fields, to test that these are encoded correctly
            #     in query params.
            #   @param f_int64 [::Integer]
            #   @param f_double [::Float]
            #   @param p_int32 [::Integer]
            #   @param p_int64 [::Integer]
            #   @param p_double [::Float]
            # @yield [result, response] Access the result along with the Faraday response object
            # @yieldparam result [::Google::Showcase::V1beta1::RepeatResponse]
            # @yieldparam response [::Faraday::Response]
            #
            # @return [::Google::Showcase::V1beta1::RepeatResponse]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            def repeat_data_simple_path request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::RepeatRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.repeat_data_simple_path.metadata.to_h

              # Set x-goog-api-client header
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              options.apply_defaults timeout:      @config.rpcs.repeat_data_simple_path.timeout,
                                     metadata:     call_metadata

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata

              @compliance_stub.repeat_data_simple_path request, options do |result, response|
                yield result, response if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Same as RepeatDataSimplePath, but with a path resource.
            #
            # @overload repeat_data_path_resource(request, options = nil)
            #   Pass arguments to `repeat_data_path_resource` via a request object, either of type
            #   {::Google::Showcase::V1beta1::RepeatRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::RepeatRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #     Note: currently retry functionality is not implemented. While it is possible
            #     to set it using ::Gapic::CallOptions, it will not be applied
            #
            # @overload repeat_data_path_resource(name: nil, info: nil, server_verify: nil, f_int32: nil, f_int64: nil, f_double: nil, p_int32: nil, p_int64: nil, p_double: nil)
            #   Pass arguments to `repeat_data_path_resource` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #   @param info [::Google::Showcase::V1beta1::ComplianceData, ::Hash]
            #   @param server_verify [::Boolean]
            #     If true, the server will verify that the received request matches
            #     the request with the same name in the compliance test suite.
            #   @param f_int32 [::Integer]
            #     Some top level fields, to test that these are encoded correctly
            #     in query params.
            #   @param f_int64 [::Integer]
            #   @param f_double [::Float]
            #   @param p_int32 [::Integer]
            #   @param p_int64 [::Integer]
            #   @param p_double [::Float]
            # @yield [result, response] Access the result along with the Faraday response object
            # @yieldparam result [::Google::Showcase::V1beta1::RepeatResponse]
            # @yieldparam response [::Faraday::Response]
            #
            # @return [::Google::Showcase::V1beta1::RepeatResponse]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            def repeat_data_path_resource request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::RepeatRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.repeat_data_path_resource.metadata.to_h

              # Set x-goog-api-client header
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              options.apply_defaults timeout:      @config.rpcs.repeat_data_path_resource.timeout,
                                     metadata:     call_metadata

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata

              @compliance_stub.repeat_data_path_resource request, options do |result, response|
                yield result, response if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Same as RepeatDataSimplePath, but with a trailing resource.
            #
            # @overload repeat_data_path_trailing_resource(request, options = nil)
            #   Pass arguments to `repeat_data_path_trailing_resource` via a request object, either of type
            #   {::Google::Showcase::V1beta1::RepeatRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::RepeatRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #     Note: currently retry functionality is not implemented. While it is possible
            #     to set it using ::Gapic::CallOptions, it will not be applied
            #
            # @overload repeat_data_path_trailing_resource(name: nil, info: nil, server_verify: nil, f_int32: nil, f_int64: nil, f_double: nil, p_int32: nil, p_int64: nil, p_double: nil)
            #   Pass arguments to `repeat_data_path_trailing_resource` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #   @param info [::Google::Showcase::V1beta1::ComplianceData, ::Hash]
            #   @param server_verify [::Boolean]
            #     If true, the server will verify that the received request matches
            #     the request with the same name in the compliance test suite.
            #   @param f_int32 [::Integer]
            #     Some top level fields, to test that these are encoded correctly
            #     in query params.
            #   @param f_int64 [::Integer]
            #   @param f_double [::Float]
            #   @param p_int32 [::Integer]
            #   @param p_int64 [::Integer]
            #   @param p_double [::Float]
            # @yield [result, response] Access the result along with the Faraday response object
            # @yieldparam result [::Google::Showcase::V1beta1::RepeatResponse]
            # @yieldparam response [::Faraday::Response]
            #
            # @return [::Google::Showcase::V1beta1::RepeatResponse]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            def repeat_data_path_trailing_resource request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::RepeatRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.repeat_data_path_trailing_resource.metadata.to_h

              # Set x-goog-api-client header
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              options.apply_defaults timeout:      @config.rpcs.repeat_data_path_trailing_resource.timeout,
                                     metadata:     call_metadata

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata

              @compliance_stub.repeat_data_path_trailing_resource request, options do |result, response|
                yield result, response if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # This method echoes the ComplianceData request, using the HTTP PUT method.
            #
            # @overload repeat_data_body_put(request, options = nil)
            #   Pass arguments to `repeat_data_body_put` via a request object, either of type
            #   {::Google::Showcase::V1beta1::RepeatRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::RepeatRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #     Note: currently retry functionality is not implemented. While it is possible
            #     to set it using ::Gapic::CallOptions, it will not be applied
            #
            # @overload repeat_data_body_put(name: nil, info: nil, server_verify: nil, f_int32: nil, f_int64: nil, f_double: nil, p_int32: nil, p_int64: nil, p_double: nil)
            #   Pass arguments to `repeat_data_body_put` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #   @param info [::Google::Showcase::V1beta1::ComplianceData, ::Hash]
            #   @param server_verify [::Boolean]
            #     If true, the server will verify that the received request matches
            #     the request with the same name in the compliance test suite.
            #   @param f_int32 [::Integer]
            #     Some top level fields, to test that these are encoded correctly
            #     in query params.
            #   @param f_int64 [::Integer]
            #   @param f_double [::Float]
            #   @param p_int32 [::Integer]
            #   @param p_int64 [::Integer]
            #   @param p_double [::Float]
            # @yield [result, response] Access the result along with the Faraday response object
            # @yieldparam result [::Google::Showcase::V1beta1::RepeatResponse]
            # @yieldparam response [::Faraday::Response]
            #
            # @return [::Google::Showcase::V1beta1::RepeatResponse]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            def repeat_data_body_put request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::RepeatRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.repeat_data_body_put.metadata.to_h

              # Set x-goog-api-client header
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              options.apply_defaults timeout:      @config.rpcs.repeat_data_body_put.timeout,
                                     metadata:     call_metadata

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata

              @compliance_stub.repeat_data_body_put request, options do |result, response|
                yield result, response if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # This method echoes the ComplianceData request, using the HTTP PATCH method.
            #
            # @overload repeat_data_body_patch(request, options = nil)
            #   Pass arguments to `repeat_data_body_patch` via a request object, either of type
            #   {::Google::Showcase::V1beta1::RepeatRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::RepeatRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #     Note: currently retry functionality is not implemented. While it is possible
            #     to set it using ::Gapic::CallOptions, it will not be applied
            #
            # @overload repeat_data_body_patch(name: nil, info: nil, server_verify: nil, f_int32: nil, f_int64: nil, f_double: nil, p_int32: nil, p_int64: nil, p_double: nil)
            #   Pass arguments to `repeat_data_body_patch` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #   @param info [::Google::Showcase::V1beta1::ComplianceData, ::Hash]
            #   @param server_verify [::Boolean]
            #     If true, the server will verify that the received request matches
            #     the request with the same name in the compliance test suite.
            #   @param f_int32 [::Integer]
            #     Some top level fields, to test that these are encoded correctly
            #     in query params.
            #   @param f_int64 [::Integer]
            #   @param f_double [::Float]
            #   @param p_int32 [::Integer]
            #   @param p_int64 [::Integer]
            #   @param p_double [::Float]
            # @yield [result, response] Access the result along with the Faraday response object
            # @yieldparam result [::Google::Showcase::V1beta1::RepeatResponse]
            # @yieldparam response [::Faraday::Response]
            #
            # @return [::Google::Showcase::V1beta1::RepeatResponse]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            def repeat_data_body_patch request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::RepeatRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.repeat_data_body_patch.metadata.to_h

              # Set x-goog-api-client header
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              options.apply_defaults timeout:      @config.rpcs.repeat_data_body_patch.timeout,
                                     metadata:     call_metadata

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata

              @compliance_stub.repeat_data_body_patch request, options do |result, response|
                yield result, response if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Configuration class for the Compliance REST API.
            #
            # This class represents the configuration for Compliance REST,
            # providing control over credentials, timeouts, retry behavior, logging.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # # Examples
            #
            # To modify the global config, setting the timeout for all calls to 10 seconds:
            #
            #     ::Google::Showcase::V1beta1::Compliance::Client.configure do |config|
            #       config.timeout = 10.0
            #     end
            #
            # To apply the above configuration only to a new client:
            #
            #     client = ::Google::Showcase::V1beta1::Compliance::Client.new do |config|
            #       config.timeout = 10.0
            #     end
            #
            # @!attribute [rw] endpoint
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"localhost:7469"`.
            #   @return [::String]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional REST headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            #
            class Configuration
              extend ::Gapic::Config

              config_attr :endpoint,      "localhost:7469", ::String
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client,
                           nil]
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the Compliance API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #
              # there is one other field (`retry_policy`) that can be set
              # but is currently not supported for REST Gapic libraries.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `repeat_data_body`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :repeat_data_body
                ##
                # RPC-specific configuration for `repeat_data_body_info`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :repeat_data_body_info
                ##
                # RPC-specific configuration for `repeat_data_query`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :repeat_data_query
                ##
                # RPC-specific configuration for `repeat_data_simple_path`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :repeat_data_simple_path
                ##
                # RPC-specific configuration for `repeat_data_path_resource`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :repeat_data_path_resource
                ##
                # RPC-specific configuration for `repeat_data_path_trailing_resource`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :repeat_data_path_trailing_resource
                ##
                # RPC-specific configuration for `repeat_data_body_put`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :repeat_data_body_put
                ##
                # RPC-specific configuration for `repeat_data_body_patch`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :repeat_data_body_patch

                # @private
                def initialize parent_rpcs = nil
                  repeat_data_body_config = parent_rpcs.repeat_data_body if parent_rpcs.respond_to? :repeat_data_body
                  @repeat_data_body = ::Gapic::Config::Method.new repeat_data_body_config
                  repeat_data_body_info_config = parent_rpcs.repeat_data_body_info if parent_rpcs.respond_to? :repeat_data_body_info
                  @repeat_data_body_info = ::Gapic::Config::Method.new repeat_data_body_info_config
                  repeat_data_query_config = parent_rpcs.repeat_data_query if parent_rpcs.respond_to? :repeat_data_query
                  @repeat_data_query = ::Gapic::Config::Method.new repeat_data_query_config
                  repeat_data_simple_path_config = parent_rpcs.repeat_data_simple_path if parent_rpcs.respond_to? :repeat_data_simple_path
                  @repeat_data_simple_path = ::Gapic::Config::Method.new repeat_data_simple_path_config
                  repeat_data_path_resource_config = parent_rpcs.repeat_data_path_resource if parent_rpcs.respond_to? :repeat_data_path_resource
                  @repeat_data_path_resource = ::Gapic::Config::Method.new repeat_data_path_resource_config
                  repeat_data_path_trailing_resource_config = parent_rpcs.repeat_data_path_trailing_resource if parent_rpcs.respond_to? :repeat_data_path_trailing_resource
                  @repeat_data_path_trailing_resource = ::Gapic::Config::Method.new repeat_data_path_trailing_resource_config
                  repeat_data_body_put_config = parent_rpcs.repeat_data_body_put if parent_rpcs.respond_to? :repeat_data_body_put
                  @repeat_data_body_put = ::Gapic::Config::Method.new repeat_data_body_put_config
                  repeat_data_body_patch_config = parent_rpcs.repeat_data_body_patch if parent_rpcs.respond_to? :repeat_data_body_patch
                  @repeat_data_body_patch = ::Gapic::Config::Method.new repeat_data_body_patch_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
