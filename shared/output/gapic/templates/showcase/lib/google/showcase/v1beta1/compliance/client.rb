# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/showcase/v1beta1/compliance_pb"
require "google/cloud/location"
require "google/iam/v1"

module Google
  module Showcase
    module V1beta1
      module Compliance
        ##
        # Client for the Compliance service.
        #
        # This service is used to test that GAPICs implement various REST-related features correctly. This mostly means transcoding proto3 requests to REST format
        # correctly for various types of HTTP annotations, but it also includes verifying that unknown (numeric) enums received by clients can be round-tripped
        # correctly.
        #
        class Client
          # @private
          API_VERSION = ""

          # @private
          DEFAULT_ENDPOINT_TEMPLATE = "localhost:7469"

          # @private
          attr_reader :compliance_stub

          ##
          # Configure the Compliance Client class.
          #
          # See {::Google::Showcase::V1beta1::Compliance::Client::Configuration}
          # for a description of the configuration fields.
          #
          # @example
          #
          #   # Modify the configuration for all Compliance clients
          #   ::Google::Showcase::V1beta1::Compliance::Client.configure do |config|
          #     config.timeout = 10.0
          #   end
          #
          # @yield [config] Configure the Client client.
          # @yieldparam config [Client::Configuration]
          #
          # @return [Client::Configuration]
          #
          def self.configure
            @configure ||= begin
              default_config = Client::Configuration.new

              default_config
            end
            yield @configure if block_given?
            @configure
          end

          ##
          # Configure the Compliance Client instance.
          #
          # The configuration is set to the derived mode, meaning that values can be changed,
          # but structural changes (adding new fields, etc.) are not allowed. Structural changes
          # should be made on {Client.configure}.
          #
          # See {::Google::Showcase::V1beta1::Compliance::Client::Configuration}
          # for a description of the configuration fields.
          #
          # @yield [config] Configure the Client client.
          # @yieldparam config [Client::Configuration]
          #
          # @return [Client::Configuration]
          #
          def configure
            yield @config if block_given?
            @config
          end

          ##
          # The effective universe domain
          #
          # @return [String]
          #
          def universe_domain
            @compliance_stub.universe_domain
          end

          ##
          # Create a new Compliance client object.
          #
          # @example
          #
          #   # Create a client using the default configuration
          #   client = ::Google::Showcase::V1beta1::Compliance::Client.new
          #
          #   # Create a client using a custom configuration
          #   client = ::Google::Showcase::V1beta1::Compliance::Client.new do |config|
          #     config.timeout = 10.0
          #   end
          #
          # @yield [config] Configure the Compliance client.
          # @yieldparam config [Client::Configuration]
          #
          def initialize
            # These require statements are intentionally placed here to initialize
            # the gRPC module only when it's required.
            # See https://github.com/googleapis/toolkit/issues/446
            require "gapic/grpc"
            require "google/showcase/v1beta1/compliance_services_pb"

            # Create the configuration object
            @config = Configuration.new Client.configure

            # Yield the configuration if needed
            yield @config if block_given?

            # Create credentials
            credentials = @config.credentials
            # Use self-signed JWT if the endpoint is unchanged from default,
            # but only if the default endpoint does not have a region prefix.
            enable_self_signed_jwt = @config.endpoint.nil? ||
                                     (@config.endpoint == Configuration::DEFAULT_ENDPOINT &&
                                     !@config.endpoint.split(".").first.include?("-"))
            credentials ||= Credentials.default scope: @config.scope,
                                                enable_self_signed_jwt: enable_self_signed_jwt
            if credentials.is_a?(::String) || credentials.is_a?(::Hash)
              credentials = Credentials.new credentials, scope: @config.scope
            end
            @quota_project_id = @config.quota_project
            @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

            @compliance_stub = ::Gapic::ServiceStub.new(
              ::Google::Showcase::V1beta1::Compliance::Stub,
              credentials: credentials,
              endpoint: @config.endpoint,
              endpoint_template: DEFAULT_ENDPOINT_TEMPLATE,
              universe_domain: @config.universe_domain,
              channel_args: @config.channel_args,
              interceptors: @config.interceptors,
              channel_pool_config: @config.channel_pool
            )

            @location_client = Google::Cloud::Location::Locations::Client.new do |config|
              config.credentials = credentials
              config.quota_project = @quota_project_id
              config.endpoint = @compliance_stub.endpoint
              config.universe_domain = @compliance_stub.universe_domain
            end

            @iam_policy_client = Google::Iam::V1::IAMPolicy::Client.new do |config|
              config.credentials = credentials
              config.quota_project = @quota_project_id
              config.endpoint = @compliance_stub.endpoint
              config.universe_domain = @compliance_stub.universe_domain
            end
          end

          ##
          # Get the associated client for mix-in of the Locations.
          #
          # @return [Google::Cloud::Location::Locations::Client]
          #
          attr_reader :location_client

          ##
          # Get the associated client for mix-in of the IAMPolicy.
          #
          # @return [Google::Iam::V1::IAMPolicy::Client]
          #
          attr_reader :iam_policy_client

          # Service calls

          ##
          # This method echoes the ComplianceData request. This method exercises
          # sending the entire request object in the REST body.
          #
          # @overload repeat_data_body(request, options = nil)
          #   Pass arguments to `repeat_data_body` via a request object, either of type
          #   {::Google::Showcase::V1beta1::RepeatRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Showcase::V1beta1::RepeatRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload repeat_data_body(name: nil, info: nil, server_verify: nil, intended_binding_uri: nil, f_int32: nil, f_int64: nil, f_double: nil, p_int32: nil, p_int64: nil, p_double: nil)
          #   Pass arguments to `repeat_data_body` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param name [::String]
          #   @param info [::Google::Showcase::V1beta1::ComplianceData, ::Hash]
          #   @param server_verify [::Boolean]
          #     If true, the server will verify that the received request matches
          #     the request with the same name in the compliance test suite.
          #   @param intended_binding_uri [::String]
          #     The URI template this request is expected to be bound to server-side.
          #   @param f_int32 [::Integer]
          #     Some top level fields, to test that these are encoded correctly
          #     in query params.
          #   @param f_int64 [::Integer]
          #   @param f_double [::Float]
          #   @param p_int32 [::Integer]
          #   @param p_int64 [::Integer]
          #   @param p_double [::Float]
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Showcase::V1beta1::RepeatResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Showcase::V1beta1::RepeatResponse]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/showcase/v1beta1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Showcase::V1beta1::Compliance::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Showcase::V1beta1::RepeatRequest.new
          #
          #   # Call the repeat_data_body method.
          #   result = client.repeat_data_body request
          #
          #   # The returned object is of type Google::Showcase::V1beta1::RepeatResponse.
          #   p result
          #
          def repeat_data_body request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::RepeatRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.repeat_data_body.metadata.to_h

            # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Showcase::VERSION
            metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.repeat_data_body.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.repeat_data_body.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @compliance_stub.call_rpc :repeat_data_body, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # This method echoes the ComplianceData request. This method exercises
          # sending the a message-type field in the REST body. Per AIP-127, only
          # top-level, non-repeated fields can be sent this way.
          #
          # @overload repeat_data_body_info(request, options = nil)
          #   Pass arguments to `repeat_data_body_info` via a request object, either of type
          #   {::Google::Showcase::V1beta1::RepeatRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Showcase::V1beta1::RepeatRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload repeat_data_body_info(name: nil, info: nil, server_verify: nil, intended_binding_uri: nil, f_int32: nil, f_int64: nil, f_double: nil, p_int32: nil, p_int64: nil, p_double: nil)
          #   Pass arguments to `repeat_data_body_info` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param name [::String]
          #   @param info [::Google::Showcase::V1beta1::ComplianceData, ::Hash]
          #   @param server_verify [::Boolean]
          #     If true, the server will verify that the received request matches
          #     the request with the same name in the compliance test suite.
          #   @param intended_binding_uri [::String]
          #     The URI template this request is expected to be bound to server-side.
          #   @param f_int32 [::Integer]
          #     Some top level fields, to test that these are encoded correctly
          #     in query params.
          #   @param f_int64 [::Integer]
          #   @param f_double [::Float]
          #   @param p_int32 [::Integer]
          #   @param p_int64 [::Integer]
          #   @param p_double [::Float]
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Showcase::V1beta1::RepeatResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Showcase::V1beta1::RepeatResponse]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/showcase/v1beta1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Showcase::V1beta1::Compliance::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Showcase::V1beta1::RepeatRequest.new
          #
          #   # Call the repeat_data_body_info method.
          #   result = client.repeat_data_body_info request
          #
          #   # The returned object is of type Google::Showcase::V1beta1::RepeatResponse.
          #   p result
          #
          def repeat_data_body_info request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::RepeatRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.repeat_data_body_info.metadata.to_h

            # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Showcase::VERSION
            metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.repeat_data_body_info.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.repeat_data_body_info.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @compliance_stub.call_rpc :repeat_data_body_info, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # This method echoes the ComplianceData request. This method exercises
          # sending all request fields as query parameters.
          #
          # @overload repeat_data_query(request, options = nil)
          #   Pass arguments to `repeat_data_query` via a request object, either of type
          #   {::Google::Showcase::V1beta1::RepeatRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Showcase::V1beta1::RepeatRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload repeat_data_query(name: nil, info: nil, server_verify: nil, intended_binding_uri: nil, f_int32: nil, f_int64: nil, f_double: nil, p_int32: nil, p_int64: nil, p_double: nil)
          #   Pass arguments to `repeat_data_query` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param name [::String]
          #   @param info [::Google::Showcase::V1beta1::ComplianceData, ::Hash]
          #   @param server_verify [::Boolean]
          #     If true, the server will verify that the received request matches
          #     the request with the same name in the compliance test suite.
          #   @param intended_binding_uri [::String]
          #     The URI template this request is expected to be bound to server-side.
          #   @param f_int32 [::Integer]
          #     Some top level fields, to test that these are encoded correctly
          #     in query params.
          #   @param f_int64 [::Integer]
          #   @param f_double [::Float]
          #   @param p_int32 [::Integer]
          #   @param p_int64 [::Integer]
          #   @param p_double [::Float]
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Showcase::V1beta1::RepeatResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Showcase::V1beta1::RepeatResponse]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/showcase/v1beta1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Showcase::V1beta1::Compliance::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Showcase::V1beta1::RepeatRequest.new
          #
          #   # Call the repeat_data_query method.
          #   result = client.repeat_data_query request
          #
          #   # The returned object is of type Google::Showcase::V1beta1::RepeatResponse.
          #   p result
          #
          def repeat_data_query request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::RepeatRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.repeat_data_query.metadata.to_h

            # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Showcase::VERSION
            metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.repeat_data_query.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.repeat_data_query.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @compliance_stub.call_rpc :repeat_data_query, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # This method echoes the ComplianceData request. This method exercises
          # sending some parameters as "simple" path variables (i.e., of the form
          # "/bar/\\{foo}" rather than "/\\{foo=bar/*}"), and the rest as query parameters.
          #
          # @overload repeat_data_simple_path(request, options = nil)
          #   Pass arguments to `repeat_data_simple_path` via a request object, either of type
          #   {::Google::Showcase::V1beta1::RepeatRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Showcase::V1beta1::RepeatRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload repeat_data_simple_path(name: nil, info: nil, server_verify: nil, intended_binding_uri: nil, f_int32: nil, f_int64: nil, f_double: nil, p_int32: nil, p_int64: nil, p_double: nil)
          #   Pass arguments to `repeat_data_simple_path` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param name [::String]
          #   @param info [::Google::Showcase::V1beta1::ComplianceData, ::Hash]
          #   @param server_verify [::Boolean]
          #     If true, the server will verify that the received request matches
          #     the request with the same name in the compliance test suite.
          #   @param intended_binding_uri [::String]
          #     The URI template this request is expected to be bound to server-side.
          #   @param f_int32 [::Integer]
          #     Some top level fields, to test that these are encoded correctly
          #     in query params.
          #   @param f_int64 [::Integer]
          #   @param f_double [::Float]
          #   @param p_int32 [::Integer]
          #   @param p_int64 [::Integer]
          #   @param p_double [::Float]
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Showcase::V1beta1::RepeatResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Showcase::V1beta1::RepeatResponse]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/showcase/v1beta1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Showcase::V1beta1::Compliance::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Showcase::V1beta1::RepeatRequest.new
          #
          #   # Call the repeat_data_simple_path method.
          #   result = client.repeat_data_simple_path request
          #
          #   # The returned object is of type Google::Showcase::V1beta1::RepeatResponse.
          #   p result
          #
          def repeat_data_simple_path request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::RepeatRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.repeat_data_simple_path.metadata.to_h

            # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Showcase::VERSION
            metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            header_params = {}
            if request.info&.f_string
              header_params["info.f_string"] = request.info.f_string
            end
            if request.info&.f_int32
              header_params["info.f_int32"] = request.info.f_int32
            end
            if request.info&.f_double
              header_params["info.f_double"] = request.info.f_double
            end
            if request.info&.f_bool
              header_params["info.f_bool"] = request.info.f_bool
            end
            if request.info&.f_kingdom
              header_params["info.f_kingdom"] = request.info.f_kingdom
            end

            request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
            metadata[:"x-goog-request-params"] ||= request_params_header

            options.apply_defaults timeout:      @config.rpcs.repeat_data_simple_path.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.repeat_data_simple_path.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @compliance_stub.call_rpc :repeat_data_simple_path, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Same as RepeatDataSimplePath, but with a path resource.
          #
          # @overload repeat_data_path_resource(request, options = nil)
          #   Pass arguments to `repeat_data_path_resource` via a request object, either of type
          #   {::Google::Showcase::V1beta1::RepeatRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Showcase::V1beta1::RepeatRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload repeat_data_path_resource(name: nil, info: nil, server_verify: nil, intended_binding_uri: nil, f_int32: nil, f_int64: nil, f_double: nil, p_int32: nil, p_int64: nil, p_double: nil)
          #   Pass arguments to `repeat_data_path_resource` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param name [::String]
          #   @param info [::Google::Showcase::V1beta1::ComplianceData, ::Hash]
          #   @param server_verify [::Boolean]
          #     If true, the server will verify that the received request matches
          #     the request with the same name in the compliance test suite.
          #   @param intended_binding_uri [::String]
          #     The URI template this request is expected to be bound to server-side.
          #   @param f_int32 [::Integer]
          #     Some top level fields, to test that these are encoded correctly
          #     in query params.
          #   @param f_int64 [::Integer]
          #   @param f_double [::Float]
          #   @param p_int32 [::Integer]
          #   @param p_int64 [::Integer]
          #   @param p_double [::Float]
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Showcase::V1beta1::RepeatResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Showcase::V1beta1::RepeatResponse]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/showcase/v1beta1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Showcase::V1beta1::Compliance::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Showcase::V1beta1::RepeatRequest.new
          #
          #   # Call the repeat_data_path_resource method.
          #   result = client.repeat_data_path_resource request
          #
          #   # The returned object is of type Google::Showcase::V1beta1::RepeatResponse.
          #   p result
          #
          def repeat_data_path_resource request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::RepeatRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.repeat_data_path_resource.metadata.to_h

            # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Showcase::VERSION
            metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            header_params = {}
            if request.info&.f_string
              header_params["info.f_string"] = request.info.f_string
            end
            if request.info&.f_child&.f_string
              header_params["info.f_child.f_string"] = request.info.f_child.f_string
            end
            if request.info&.f_bool
              header_params["info.f_bool"] = request.info.f_bool
            end

            request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
            metadata[:"x-goog-request-params"] ||= request_params_header

            options.apply_defaults timeout:      @config.rpcs.repeat_data_path_resource.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.repeat_data_path_resource.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @compliance_stub.call_rpc :repeat_data_path_resource, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Same as RepeatDataSimplePath, but with a trailing resource.
          #
          # @overload repeat_data_path_trailing_resource(request, options = nil)
          #   Pass arguments to `repeat_data_path_trailing_resource` via a request object, either of type
          #   {::Google::Showcase::V1beta1::RepeatRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Showcase::V1beta1::RepeatRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload repeat_data_path_trailing_resource(name: nil, info: nil, server_verify: nil, intended_binding_uri: nil, f_int32: nil, f_int64: nil, f_double: nil, p_int32: nil, p_int64: nil, p_double: nil)
          #   Pass arguments to `repeat_data_path_trailing_resource` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param name [::String]
          #   @param info [::Google::Showcase::V1beta1::ComplianceData, ::Hash]
          #   @param server_verify [::Boolean]
          #     If true, the server will verify that the received request matches
          #     the request with the same name in the compliance test suite.
          #   @param intended_binding_uri [::String]
          #     The URI template this request is expected to be bound to server-side.
          #   @param f_int32 [::Integer]
          #     Some top level fields, to test that these are encoded correctly
          #     in query params.
          #   @param f_int64 [::Integer]
          #   @param f_double [::Float]
          #   @param p_int32 [::Integer]
          #   @param p_int64 [::Integer]
          #   @param p_double [::Float]
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Showcase::V1beta1::RepeatResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Showcase::V1beta1::RepeatResponse]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/showcase/v1beta1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Showcase::V1beta1::Compliance::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Showcase::V1beta1::RepeatRequest.new
          #
          #   # Call the repeat_data_path_trailing_resource method.
          #   result = client.repeat_data_path_trailing_resource request
          #
          #   # The returned object is of type Google::Showcase::V1beta1::RepeatResponse.
          #   p result
          #
          def repeat_data_path_trailing_resource request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::RepeatRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.repeat_data_path_trailing_resource.metadata.to_h

            # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Showcase::VERSION
            metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            header_params = {}
            if request.info&.f_string
              header_params["info.f_string"] = request.info.f_string
            end
            if request.info&.f_child&.f_string
              header_params["info.f_child.f_string"] = request.info.f_child.f_string
            end

            request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
            metadata[:"x-goog-request-params"] ||= request_params_header

            options.apply_defaults timeout:      @config.rpcs.repeat_data_path_trailing_resource.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.repeat_data_path_trailing_resource.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @compliance_stub.call_rpc :repeat_data_path_trailing_resource, request,
                                      options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # This method echoes the ComplianceData request, using the HTTP PUT method.
          #
          # @overload repeat_data_body_put(request, options = nil)
          #   Pass arguments to `repeat_data_body_put` via a request object, either of type
          #   {::Google::Showcase::V1beta1::RepeatRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Showcase::V1beta1::RepeatRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload repeat_data_body_put(name: nil, info: nil, server_verify: nil, intended_binding_uri: nil, f_int32: nil, f_int64: nil, f_double: nil, p_int32: nil, p_int64: nil, p_double: nil)
          #   Pass arguments to `repeat_data_body_put` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param name [::String]
          #   @param info [::Google::Showcase::V1beta1::ComplianceData, ::Hash]
          #   @param server_verify [::Boolean]
          #     If true, the server will verify that the received request matches
          #     the request with the same name in the compliance test suite.
          #   @param intended_binding_uri [::String]
          #     The URI template this request is expected to be bound to server-side.
          #   @param f_int32 [::Integer]
          #     Some top level fields, to test that these are encoded correctly
          #     in query params.
          #   @param f_int64 [::Integer]
          #   @param f_double [::Float]
          #   @param p_int32 [::Integer]
          #   @param p_int64 [::Integer]
          #   @param p_double [::Float]
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Showcase::V1beta1::RepeatResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Showcase::V1beta1::RepeatResponse]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/showcase/v1beta1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Showcase::V1beta1::Compliance::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Showcase::V1beta1::RepeatRequest.new
          #
          #   # Call the repeat_data_body_put method.
          #   result = client.repeat_data_body_put request
          #
          #   # The returned object is of type Google::Showcase::V1beta1::RepeatResponse.
          #   p result
          #
          def repeat_data_body_put request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::RepeatRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.repeat_data_body_put.metadata.to_h

            # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Showcase::VERSION
            metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.repeat_data_body_put.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.repeat_data_body_put.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @compliance_stub.call_rpc :repeat_data_body_put, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # This method echoes the ComplianceData request, using the HTTP PATCH method.
          #
          # @overload repeat_data_body_patch(request, options = nil)
          #   Pass arguments to `repeat_data_body_patch` via a request object, either of type
          #   {::Google::Showcase::V1beta1::RepeatRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Showcase::V1beta1::RepeatRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload repeat_data_body_patch(name: nil, info: nil, server_verify: nil, intended_binding_uri: nil, f_int32: nil, f_int64: nil, f_double: nil, p_int32: nil, p_int64: nil, p_double: nil)
          #   Pass arguments to `repeat_data_body_patch` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param name [::String]
          #   @param info [::Google::Showcase::V1beta1::ComplianceData, ::Hash]
          #   @param server_verify [::Boolean]
          #     If true, the server will verify that the received request matches
          #     the request with the same name in the compliance test suite.
          #   @param intended_binding_uri [::String]
          #     The URI template this request is expected to be bound to server-side.
          #   @param f_int32 [::Integer]
          #     Some top level fields, to test that these are encoded correctly
          #     in query params.
          #   @param f_int64 [::Integer]
          #   @param f_double [::Float]
          #   @param p_int32 [::Integer]
          #   @param p_int64 [::Integer]
          #   @param p_double [::Float]
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Showcase::V1beta1::RepeatResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Showcase::V1beta1::RepeatResponse]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/showcase/v1beta1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Showcase::V1beta1::Compliance::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Showcase::V1beta1::RepeatRequest.new
          #
          #   # Call the repeat_data_body_patch method.
          #   result = client.repeat_data_body_patch request
          #
          #   # The returned object is of type Google::Showcase::V1beta1::RepeatResponse.
          #   p result
          #
          def repeat_data_body_patch request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::RepeatRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.repeat_data_body_patch.metadata.to_h

            # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Showcase::VERSION
            metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.repeat_data_body_patch.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.repeat_data_body_patch.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @compliance_stub.call_rpc :repeat_data_body_patch, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # This method requests an enum value from the server. Depending on the contents of EnumRequest, the enum value returned will be a known enum declared in the
          # .proto file, or a made-up enum value the is unknown to the client. To verify that clients can round-trip unknown enum vaues they receive, use the
          # response from this RPC as the request to VerifyEnum()
          #
          # The values of enums sent by the server when a known or unknown value is requested will be the same within a single Showcase server run (this is needed for
          # VerifyEnum() to work) but are not guaranteed to be the same across separate Showcase server runs.
          #
          # @overload get_enum(request, options = nil)
          #   Pass arguments to `get_enum` via a request object, either of type
          #   {::Google::Showcase::V1beta1::EnumRequest} or an equivalent Hash.
          #
          #   @param request [::Google::Showcase::V1beta1::EnumRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_enum(unknown_enum: nil)
          #   Pass arguments to `get_enum` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param unknown_enum [::Boolean]
          #     Whether the client is requesting a new, unknown enum value or a known enum value already declard in this proto file.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Showcase::V1beta1::EnumResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Showcase::V1beta1::EnumResponse]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/showcase/v1beta1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Showcase::V1beta1::Compliance::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Showcase::V1beta1::EnumRequest.new
          #
          #   # Call the get_enum method.
          #   result = client.get_enum request
          #
          #   # The returned object is of type Google::Showcase::V1beta1::EnumResponse.
          #   p result
          #
          def get_enum request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::EnumRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_enum.metadata.to_h

            # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Showcase::VERSION
            metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_enum.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_enum.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @compliance_stub.call_rpc :get_enum, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # This method is used to verify that clients can round-trip enum values, which is particularly important for unknown enum values over REST. VerifyEnum()
          # verifies that its request, which is presumably the response that the client previously got to a GetEnum(), contains the correct data. If so, it responds
          # with the same EnumResponse; otherwise, the RPC errors.
          #
          # This works because the values of enums sent by the server when a known or unknown value is requested will be the same within a single Showcase server run,
          # although they are not guaranteed to be the same across separate Showcase server runs.
          #
          # @overload verify_enum(request, options = nil)
          #   Pass arguments to `verify_enum` via a request object, either of type
          #   {::Google::Showcase::V1beta1::EnumResponse} or an equivalent Hash.
          #
          #   @param request [::Google::Showcase::V1beta1::EnumResponse, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload verify_enum(request: nil, continent: nil)
          #   Pass arguments to `verify_enum` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param request [::Google::Showcase::V1beta1::EnumRequest, ::Hash]
          #     The original request for a known or unknown enum from the server.
          #   @param continent [::Google::Showcase::V1beta1::Continent]
          #     The actual enum the server provided.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Google::Showcase::V1beta1::EnumResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Google::Showcase::V1beta1::EnumResponse]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Basic example
          #   require "google/showcase/v1beta1"
          #
          #   # Create a client object. The client can be reused for multiple calls.
          #   client = Google::Showcase::V1beta1::Compliance::Client.new
          #
          #   # Create a request. To set request fields, pass in keyword arguments.
          #   request = Google::Showcase::V1beta1::EnumResponse.new
          #
          #   # Call the verify_enum method.
          #   result = client.verify_enum request
          #
          #   # The returned object is of type Google::Showcase::V1beta1::EnumResponse.
          #   p result
          #
          def verify_enum request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::EnumResponse

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.verify_enum.metadata.to_h

            # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Showcase::VERSION
            metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.verify_enum.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.verify_enum.retry_policy

            options.apply_defaults timeout:      @config.timeout,
                                   metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @compliance_stub.call_rpc :verify_enum, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Configuration class for the Compliance API.
          #
          # This class represents the configuration for Compliance,
          # providing control over timeouts, retry behavior, logging, transport
          # parameters, and other low-level controls. Certain parameters can also be
          # applied individually to specific RPCs. See
          # {::Google::Showcase::V1beta1::Compliance::Client::Configuration::Rpcs}
          # for a list of RPCs that can be configured independently.
          #
          # Configuration can be applied globally to all clients, or to a single client
          # on construction.
          #
          # @example
          #
          #   # Modify the global config, setting the timeout for
          #   # repeat_data_body to 20 seconds,
          #   # and all remaining timeouts to 10 seconds.
          #   ::Google::Showcase::V1beta1::Compliance::Client.configure do |config|
          #     config.timeout = 10.0
          #     config.rpcs.repeat_data_body.timeout = 20.0
          #   end
          #
          #   # Apply the above configuration only to a new client.
          #   client = ::Google::Showcase::V1beta1::Compliance::Client.new do |config|
          #     config.timeout = 10.0
          #     config.rpcs.repeat_data_body.timeout = 20.0
          #   end
          #
          # @!attribute [rw] endpoint
          #   A custom service endpoint, as a hostname or hostname:port. The default is
          #   nil, indicating to use the default endpoint in the current universe domain.
          #   @return [::String,nil]
          # @!attribute [rw] credentials
          #   Credentials to send with calls. You may provide any of the following types:
          #    *  (`String`) The path to a service account key file in JSON format
          #    *  (`Hash`) A service account key as a Hash
          #    *  (`Google::Auth::Credentials`) A googleauth credentials object
          #       (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
          #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
          #       (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
          #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
          #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
          #    *  (`nil`) indicating no credentials
          #   @return [::Object]
          # @!attribute [rw] scope
          #   The OAuth scopes
          #   @return [::Array<::String>]
          # @!attribute [rw] lib_name
          #   The library name as recorded in instrumentation and logging
          #   @return [::String]
          # @!attribute [rw] lib_version
          #   The library version as recorded in instrumentation and logging
          #   @return [::String]
          # @!attribute [rw] channel_args
          #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
          #   `GRPC::Core::Channel` object is provided as the credential.
          #   @return [::Hash]
          # @!attribute [rw] interceptors
          #   An array of interceptors that are run before calls are executed.
          #   @return [::Array<::GRPC::ClientInterceptor>]
          # @!attribute [rw] timeout
          #   The call timeout in seconds.
          #   @return [::Numeric]
          # @!attribute [rw] metadata
          #   Additional gRPC headers to be sent with the call.
          #   @return [::Hash{::Symbol=>::String}]
          # @!attribute [rw] retry_policy
          #   The retry policy. The value is a hash with the following keys:
          #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
          #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
          #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
          #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
          #       trigger a retry.
          #   @return [::Hash]
          # @!attribute [rw] quota_project
          #   A separate project against which to charge quota.
          #   @return [::String]
          # @!attribute [rw] universe_domain
          #   The universe domain within which to make requests. This determines the
          #   default endpoint URL. The default value of nil uses the environment
          #   universe (usually the default "googleapis.com" universe).
          #   @return [::String,nil]
          #
          class Configuration
            extend ::Gapic::Config

            # @private
            # The endpoint specific to the default "googleapis.com" universe. Deprecated.
            DEFAULT_ENDPOINT = "localhost:7469"

            config_attr :endpoint,      nil, ::String, nil
            config_attr :credentials,   nil do |value|
              allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
              allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
              allowed.any? { |klass| klass === value }
            end
            config_attr :scope,         nil, ::String, ::Array, nil
            config_attr :lib_name,      nil, ::String, nil
            config_attr :lib_version,   nil, ::String, nil
            config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
            config_attr :interceptors,  nil, ::Array, nil
            config_attr :timeout,       nil, ::Numeric, nil
            config_attr :metadata,      nil, ::Hash, nil
            config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
            config_attr :quota_project, nil, ::String, nil
            config_attr :universe_domain, nil, ::String, nil

            # @private
            def initialize parent_config = nil
              @parent_config = parent_config unless parent_config.nil?

              yield self if block_given?
            end

            ##
            # Configurations for individual RPCs
            # @return [Rpcs]
            #
            def rpcs
              @rpcs ||= begin
                parent_rpcs = nil
                parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                Rpcs.new parent_rpcs
              end
            end

            ##
            # Configuration for the channel pool
            # @return [::Gapic::ServiceStub::ChannelPool::Configuration]
            #
            def channel_pool
              @channel_pool ||= ::Gapic::ServiceStub::ChannelPool::Configuration.new
            end

            ##
            # Configuration RPC class for the Compliance API.
            #
            # Includes fields providing the configuration for each RPC in this service.
            # Each configuration object is of type `Gapic::Config::Method` and includes
            # the following configuration fields:
            #
            #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
            #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
            #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
            #     include the following keys:
            #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #         trigger a retry.
            #
            class Rpcs
              ##
              # RPC-specific configuration for `repeat_data_body`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :repeat_data_body
              ##
              # RPC-specific configuration for `repeat_data_body_info`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :repeat_data_body_info
              ##
              # RPC-specific configuration for `repeat_data_query`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :repeat_data_query
              ##
              # RPC-specific configuration for `repeat_data_simple_path`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :repeat_data_simple_path
              ##
              # RPC-specific configuration for `repeat_data_path_resource`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :repeat_data_path_resource
              ##
              # RPC-specific configuration for `repeat_data_path_trailing_resource`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :repeat_data_path_trailing_resource
              ##
              # RPC-specific configuration for `repeat_data_body_put`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :repeat_data_body_put
              ##
              # RPC-specific configuration for `repeat_data_body_patch`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :repeat_data_body_patch
              ##
              # RPC-specific configuration for `get_enum`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_enum
              ##
              # RPC-specific configuration for `verify_enum`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :verify_enum

              # @private
              def initialize parent_rpcs = nil
                repeat_data_body_config = parent_rpcs.repeat_data_body if parent_rpcs.respond_to? :repeat_data_body
                @repeat_data_body = ::Gapic::Config::Method.new repeat_data_body_config
                repeat_data_body_info_config = parent_rpcs.repeat_data_body_info if parent_rpcs.respond_to? :repeat_data_body_info
                @repeat_data_body_info = ::Gapic::Config::Method.new repeat_data_body_info_config
                repeat_data_query_config = parent_rpcs.repeat_data_query if parent_rpcs.respond_to? :repeat_data_query
                @repeat_data_query = ::Gapic::Config::Method.new repeat_data_query_config
                repeat_data_simple_path_config = parent_rpcs.repeat_data_simple_path if parent_rpcs.respond_to? :repeat_data_simple_path
                @repeat_data_simple_path = ::Gapic::Config::Method.new repeat_data_simple_path_config
                repeat_data_path_resource_config = parent_rpcs.repeat_data_path_resource if parent_rpcs.respond_to? :repeat_data_path_resource
                @repeat_data_path_resource = ::Gapic::Config::Method.new repeat_data_path_resource_config
                repeat_data_path_trailing_resource_config = parent_rpcs.repeat_data_path_trailing_resource if parent_rpcs.respond_to? :repeat_data_path_trailing_resource
                @repeat_data_path_trailing_resource = ::Gapic::Config::Method.new repeat_data_path_trailing_resource_config
                repeat_data_body_put_config = parent_rpcs.repeat_data_body_put if parent_rpcs.respond_to? :repeat_data_body_put
                @repeat_data_body_put = ::Gapic::Config::Method.new repeat_data_body_put_config
                repeat_data_body_patch_config = parent_rpcs.repeat_data_body_patch if parent_rpcs.respond_to? :repeat_data_body_patch
                @repeat_data_body_patch = ::Gapic::Config::Method.new repeat_data_body_patch_config
                get_enum_config = parent_rpcs.get_enum if parent_rpcs.respond_to? :get_enum
                @get_enum = ::Gapic::Config::Method.new get_enum_config
                verify_enum_config = parent_rpcs.verify_enum if parent_rpcs.respond_to? :verify_enum
                @verify_enum = ::Gapic::Config::Method.new verify_enum_config

                yield self if block_given?
              end
            end
          end
        end
      end
    end
  end
end
