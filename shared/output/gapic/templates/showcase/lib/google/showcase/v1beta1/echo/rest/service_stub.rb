# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "gapic/rest"
require "google/showcase/v1beta1/echo_pb"

module Google
  module Showcase
    module V1beta1
      module Echo
        module Rest
          ##
          # REST service stub for the Echo service.
          #
          class ServiceStub
            ##
            # Create a new Echo REST service stub object.
            #
            # @param endpoint [String]
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"localhost:7469"`.
            #
            # @param credentials [Google::Auth::Credentials]
            #   Credentials to send with calls in form of a googleauth credentials object.
            #   (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #
            def initialize endpoint:, credentials:
              @client_stub = ::Gapic::Rest::ClientStub.new endpoint: endpoint, credentials: credentials
            end

            # Service calls

            ##
            # This method simply echos the request. This method is showcases unary rpcs.
            #
            # @param request_pb [::Google::Showcase::V1beta1::EchoRequest]
            #   A request object representing the call parameters. Required.
            # @param options [::Gapic::CallOptions]
            #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            # @return [::Google::Showcase::V1beta1::EchoResponse]
            def echo request_pb, options:, &block
              request_json = JSON.parse ::Google::Showcase::V1beta1::EchoRequest.encode_json(request_pb)

              uri = "/v1beta1/echo:echo"
              body = request_pb.to_json

              result_json = @client_stub.make_post_request(
                uri:     uri,
                body:    body,
                options: options,
                &block
              )

              ::Google::Showcase::V1beta1::EchoResponse.decode_json result_json[:body]
            end

            ##
            # This method split the given content into words and will pass each word back
            # through the stream. This method showcases server-side streaming rpcs.
            #
            # @param request_pb [::Google::Showcase::V1beta1::ExpandRequest]
            #   A request object representing the call parameters. Required.
            # @param options [::Gapic::CallOptions]
            #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            # @return [::Google::Showcase::V1beta1::EchoResponse]
            def expand request_pb, options:, &block
              request_json = JSON.parse ::Google::Showcase::V1beta1::ExpandRequest.encode_json(request_pb)

              uri = "/v1beta1/echo:expand"
              body = request_pb.to_json

              result_json = @client_stub.make_post_request(
                uri:     uri,
                body:    body,
                options: options,
                &block
              )

              ::Google::Showcase::V1beta1::EchoResponse.decode_json result_json[:body]
            end

            ##
            # This method will collect the words given to it. When the stream is closed
            # by the client, this method will return the a concatenation of the strings
            # passed to it. This method showcases client-side streaming rpcs.
            #
            # @param request_pb [::Google::Showcase::V1beta1::EchoRequest]
            #   A request object representing the call parameters. Required.
            # @param options [::Gapic::CallOptions]
            #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            # @return [::Google::Showcase::V1beta1::EchoResponse]
            def collect request_pb, options:, &block
              request_json = JSON.parse ::Google::Showcase::V1beta1::EchoRequest.encode_json(request_pb)

              uri = "/v1beta1/echo:collect"
              body = request_pb.to_json

              result_json = @client_stub.make_post_request(
                uri:     uri,
                body:    body,
                options: options,
                &block
              )

              ::Google::Showcase::V1beta1::EchoResponse.decode_json result_json[:body]
            end

            ##
            # This method, upon receiving a request on the stream, the same content will
            # be passed  back on the stream. This method showcases bidirectional
            # streaming rpcs.
            #
            # @param request_pb [::Google::Showcase::V1beta1::EchoRequest]
            #   A request object representing the call parameters. Required.
            # @param options [::Gapic::CallOptions]
            #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            # @return [::Google::Showcase::V1beta1::EchoResponse]
            def chat request_pb, options:, &block
              request_json = JSON.parse ::Google::Showcase::V1beta1::EchoRequest.encode_json(request_pb)

              uri = ""

              result_json = @client_stub.make__request(
                uri:     uri,
                options: options,
                &block
              )

              ::Google::Showcase::V1beta1::EchoResponse.decode_json result_json[:body]
            end

            ##
            # This is similar to the Expand method but instead of returning a stream of
            # expanded words, this method returns a paged list of expanded words.
            #
            # @param request_pb [::Google::Showcase::V1beta1::PagedExpandRequest]
            #   A request object representing the call parameters. Required.
            # @param options [::Gapic::CallOptions]
            #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            # @return [::Google::Showcase::V1beta1::PagedExpandResponse]
            def paged_expand request_pb, options:, &block
              request_json = JSON.parse ::Google::Showcase::V1beta1::PagedExpandRequest.encode_json(request_pb)

              uri = "/v1beta1/echo:pagedExpand"
              body = request_pb.to_json

              result_json = @client_stub.make_post_request(
                uri:     uri,
                body:    body,
                options: options,
                &block
              )

              ::Google::Showcase::V1beta1::PagedExpandResponse.decode_json result_json[:body]
            end

            ##
            # This method will wait the requested amount of and then return.
            # This method showcases how a client handles a request timing out.
            #
            # @param request_pb [::Google::Showcase::V1beta1::WaitRequest]
            #   A request object representing the call parameters. Required.
            # @param options [::Gapic::CallOptions]
            #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            # @return [::Google::Longrunning::Operation]
            def wait request_pb, options:, &block
              request_json = JSON.parse ::Google::Showcase::V1beta1::WaitRequest.encode_json(request_pb)

              uri = "/v1beta1/echo:wait"
              body = request_pb.to_json

              result_json = @client_stub.make_post_request(
                uri:     uri,
                body:    body,
                options: options,
                &block
              )

              ::Google::Longrunning::Operation.decode_json result_json[:body]
            end

            ##
            # This method will block (wait) for the requested amount of time
            # and then return the response or error.
            # This method showcases how a client handles delays or retries.
            #
            # @param request_pb [::Google::Showcase::V1beta1::BlockRequest]
            #   A request object representing the call parameters. Required.
            # @param options [::Gapic::CallOptions]
            #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            # @return [::Google::Showcase::V1beta1::BlockResponse]
            def block request_pb, options:, &block
              request_json = JSON.parse ::Google::Showcase::V1beta1::BlockRequest.encode_json(request_pb)

              uri = "/v1beta1/echo:block"
              body = request_pb.to_json

              result_json = @client_stub.make_post_request(
                uri:     uri,
                body:    body,
                options: options,
                &block
              )

              ::Google::Showcase::V1beta1::BlockResponse.decode_json result_json[:body]
            end
          end
        end
      end
    end
  end
end
