# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/showcase/v1beta1/messaging_pb"

module Google
  module Showcase
    module V1beta1
      module Messaging
        module Rest
          ##
          # REST client for the Messaging service.
          #
          # A simple messaging service that implements chat rooms and profile posts.
          #
          # This messaging service showcases the features that API clients
          # generated by gapic-generators implement.
          #
          class Client
            include Paths

            # @private
            attr_reader :messaging_stub

            ##
            # Configure the Messaging Client class.
            #
            # See {::Google::Showcase::V1beta1::Messaging::Rest::Client::Configuration}
            # for a description of the configuration fields.
            #
            # ## Example
            #
            # To modify the configuration for all Messaging clients:
            #
            #     ::Google::Showcase::V1beta1::Messaging::Rest::Client.configure do |config|
            #       config.timeout = 10.0
            #     end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                default_config = Client::Configuration.new

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the Messaging Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Showcase::V1beta1::Messaging::Rest::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # Create a new Messaging REST client object.
            #
            # ## Examples
            #
            # To create a new Messaging REST client with the default
            # configuration:
            #
            #     client = ::Google::Showcase::V1beta1::Messaging::Rest::Client.new
            #
            # To create a new Messaging REST client with a custom
            # configuration:
            #
            #     client = ::Google::Showcase::V1beta1::Messaging::Rest::Client.new do |config|
            #       config.timeout = 10.0
            #     end
            #
            # @yield [config] Configure the Messaging client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # These require statements are intentionally placed here to initialize
              # the REST modules only when it's required.
              require "google/showcase/v1beta1/messaging/rest/service_stub"

              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              credentials ||= Credentials.default scope: @config.scope
              if credentials.is_a?(String) || credentials.is_a?(Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end

              @messaging_stub = ::Google::Showcase::V1beta1::Messaging::Rest::ServiceStub.new(
                credentials: credentials,
                endpoint:    @config.endpoint
              )
            end

            # Service calls

            ##
            # Creates a room.
            #
            # @overload create_room(request, options = nil)
            #   Pass arguments to `create_room` via a request object, either of type
            #   {::Google::Showcase::V1beta1::CreateRoomRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::CreateRoomRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_room(room: nil)
            #   Pass arguments to `create_room` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param room [::Google::Showcase::V1beta1::Room, ::Hash]
            #     The room to create.
            #
            # @yield [result, env] Access the result along with the Faraday environment object
            # @yieldparam result [::Google::Showcase::V1beta1::Room]
            # @yieldparam env [::Faraday::Env]
            #
            # @return [::Google::Showcase::V1beta1::Room]
            #
            # @raise [::Faraday::Error] if the REST call is aborted.
            def create_room request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::CreateRoomRequest

              @messaging_stub.create_room request, options: options do |response, env|
                yield response, env if block_given?
              end
            end

            ##
            # Retrieves the Room with the given resource name.
            #
            # @overload get_room(request, options = nil)
            #   Pass arguments to `get_room` via a request object, either of type
            #   {::Google::Showcase::V1beta1::GetRoomRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::GetRoomRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_room(name: nil)
            #   Pass arguments to `get_room` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the requested room.
            #
            # @yield [result, env] Access the result along with the Faraday environment object
            # @yieldparam result [::Google::Showcase::V1beta1::Room]
            # @yieldparam env [::Faraday::Env]
            #
            # @return [::Google::Showcase::V1beta1::Room]
            #
            # @raise [::Faraday::Error] if the REST call is aborted.
            def get_room request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::GetRoomRequest

              @messaging_stub.get_room request, options: options do |response, env|
                yield response, env if block_given?
              end
            end

            ##
            # Updates a room.
            #
            # @overload update_room(request, options = nil)
            #   Pass arguments to `update_room` via a request object, either of type
            #   {::Google::Showcase::V1beta1::UpdateRoomRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::UpdateRoomRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_room(room: nil, update_mask: nil)
            #   Pass arguments to `update_room` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param room [::Google::Showcase::V1beta1::Room, ::Hash]
            #     The room to update.
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #     The field mask to determine wich fields are to be updated. If empty, the
            #     server will assume all fields are to be updated.
            #
            # @yield [result, env] Access the result along with the Faraday environment object
            # @yieldparam result [::Google::Showcase::V1beta1::Room]
            # @yieldparam env [::Faraday::Env]
            #
            # @return [::Google::Showcase::V1beta1::Room]
            #
            # @raise [::Faraday::Error] if the REST call is aborted.
            def update_room request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::UpdateRoomRequest

              @messaging_stub.update_room request, options: options do |response, env|
                yield response, env if block_given?
              end
            end

            ##
            # Deletes a room and all of its blurbs.
            #
            # @overload delete_room(request, options = nil)
            #   Pass arguments to `delete_room` via a request object, either of type
            #   {::Google::Showcase::V1beta1::DeleteRoomRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::DeleteRoomRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_room(name: nil)
            #   Pass arguments to `delete_room` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the requested room.
            #
            # @yield [result, env] Access the result along with the Faraday environment object
            # @yieldparam result [::Google::Protobuf::Empty]
            # @yieldparam env [::Faraday::Env]
            #
            # @return [::Google::Protobuf::Empty]
            #
            # @raise [::Faraday::Error] if the REST call is aborted.
            def delete_room request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::DeleteRoomRequest

              @messaging_stub.delete_room request, options: options do |response, env|
                yield response, env if block_given?
              end
            end

            ##
            # Lists all chat rooms.
            #
            # @overload list_rooms(request, options = nil)
            #   Pass arguments to `list_rooms` via a request object, either of type
            #   {::Google::Showcase::V1beta1::ListRoomsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::ListRoomsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_rooms(page_size: nil, page_token: nil)
            #   Pass arguments to `list_rooms` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param page_size [::Integer]
            #     The maximum number of rooms return. Server may return fewer rooms
            #     than requested. If unspecified, server will pick an appropriate default.
            #   @param page_token [::String]
            #     The value of google.showcase.v1beta1.ListRoomsResponse.next_page_token
            #     returned from the previous call to
            #     `google.showcase.v1beta1.Messaging\ListRooms` method.
            #
            # @yield [result, env] Access the result along with the Faraday environment object
            # @yieldparam result [::Gapic::PagedEnumerable<::Google::Showcase::V1beta1::Room>]
            # @yieldparam env [::Faraday::Env]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Showcase::V1beta1::Room>]
            #
            # @raise [::Faraday::Error] if the REST call is aborted.
            def list_rooms request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::ListRoomsRequest

              @messaging_stub.list_rooms request, options: options do |response, env|
                yield response, env if block_given?
              end
            end

            ##
            # Creates a blurb. If the parent is a room, the blurb is understood to be a
            # message in that room. If the parent is a profile, the blurb is understood
            # to be a post on the profile.
            #
            # @overload create_blurb(request, options = nil)
            #   Pass arguments to `create_blurb` via a request object, either of type
            #   {::Google::Showcase::V1beta1::CreateBlurbRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::CreateBlurbRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_blurb(parent: nil, blurb: nil)
            #   Pass arguments to `create_blurb` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     The resource name of the chat room or user profile that this blurb will
            #     be tied to.
            #   @param blurb [::Google::Showcase::V1beta1::Blurb, ::Hash]
            #     The blurb to create.
            #
            # @yield [result, env] Access the result along with the Faraday environment object
            # @yieldparam result [::Google::Showcase::V1beta1::Blurb]
            # @yieldparam env [::Faraday::Env]
            #
            # @return [::Google::Showcase::V1beta1::Blurb]
            #
            # @raise [::Faraday::Error] if the REST call is aborted.
            def create_blurb request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::CreateBlurbRequest

              @messaging_stub.create_blurb request, options: options do |response, env|
                yield response, env if block_given?
              end
            end

            ##
            # Retrieves the Blurb with the given resource name.
            #
            # @overload get_blurb(request, options = nil)
            #   Pass arguments to `get_blurb` via a request object, either of type
            #   {::Google::Showcase::V1beta1::GetBlurbRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::GetBlurbRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_blurb(name: nil)
            #   Pass arguments to `get_blurb` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the requested blurb.
            #
            # @yield [result, env] Access the result along with the Faraday environment object
            # @yieldparam result [::Google::Showcase::V1beta1::Blurb]
            # @yieldparam env [::Faraday::Env]
            #
            # @return [::Google::Showcase::V1beta1::Blurb]
            #
            # @raise [::Faraday::Error] if the REST call is aborted.
            def get_blurb request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::GetBlurbRequest

              @messaging_stub.get_blurb request, options: options do |response, env|
                yield response, env if block_given?
              end
            end

            ##
            # Updates a blurb.
            #
            # @overload update_blurb(request, options = nil)
            #   Pass arguments to `update_blurb` via a request object, either of type
            #   {::Google::Showcase::V1beta1::UpdateBlurbRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::UpdateBlurbRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_blurb(blurb: nil, update_mask: nil)
            #   Pass arguments to `update_blurb` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param blurb [::Google::Showcase::V1beta1::Blurb, ::Hash]
            #     The blurb to update.
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #     The field mask to determine wich fields are to be updated. If empty, the
            #     server will assume all fields are to be updated.
            #
            # @yield [result, env] Access the result along with the Faraday environment object
            # @yieldparam result [::Google::Showcase::V1beta1::Blurb]
            # @yieldparam env [::Faraday::Env]
            #
            # @return [::Google::Showcase::V1beta1::Blurb]
            #
            # @raise [::Faraday::Error] if the REST call is aborted.
            def update_blurb request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::UpdateBlurbRequest

              @messaging_stub.update_blurb request, options: options do |response, env|
                yield response, env if block_given?
              end
            end

            ##
            # Deletes a blurb.
            #
            # @overload delete_blurb(request, options = nil)
            #   Pass arguments to `delete_blurb` via a request object, either of type
            #   {::Google::Showcase::V1beta1::DeleteBlurbRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::DeleteBlurbRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_blurb(name: nil)
            #   Pass arguments to `delete_blurb` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the requested blurb.
            #
            # @yield [result, env] Access the result along with the Faraday environment object
            # @yieldparam result [::Google::Protobuf::Empty]
            # @yieldparam env [::Faraday::Env]
            #
            # @return [::Google::Protobuf::Empty]
            #
            # @raise [::Faraday::Error] if the REST call is aborted.
            def delete_blurb request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::DeleteBlurbRequest

              @messaging_stub.delete_blurb request, options: options do |response, env|
                yield response, env if block_given?
              end
            end

            ##
            # Lists blurbs for a specific chat room or user profile depending on the
            # parent resource name.
            #
            # @overload list_blurbs(request, options = nil)
            #   Pass arguments to `list_blurbs` via a request object, either of type
            #   {::Google::Showcase::V1beta1::ListBlurbsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::ListBlurbsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_blurbs(parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_blurbs` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     The resource name of the requested room or profile whos blurbs to list.
            #   @param page_size [::Integer]
            #     The maximum number of blurbs to return. Server may return fewer
            #     blurbs than requested. If unspecified, server will pick an appropriate
            #     default.
            #   @param page_token [::String]
            #     The value of google.showcase.v1beta1.ListBlurbsResponse.next_page_token
            #     returned from the previous call to
            #     `google.showcase.v1beta1.Messaging\ListBlurbs` method.
            #
            # @yield [result, env] Access the result along with the Faraday environment object
            # @yieldparam result [::Gapic::PagedEnumerable<::Google::Showcase::V1beta1::Blurb>]
            # @yieldparam env [::Faraday::Env]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Showcase::V1beta1::Blurb>]
            #
            # @raise [::Faraday::Error] if the REST call is aborted.
            def list_blurbs request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::ListBlurbsRequest

              @messaging_stub.list_blurbs request, options: options do |response, env|
                yield response, env if block_given?
              end
            end

            ##
            # This method searches through all blurbs across all rooms and profiles
            # for blurbs containing to words found in the query. Only posts that
            # contain an exact match of a queried word will be returned.
            #
            # @overload search_blurbs(request, options = nil)
            #   Pass arguments to `search_blurbs` via a request object, either of type
            #   {::Google::Showcase::V1beta1::SearchBlurbsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::SearchBlurbsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload search_blurbs(query: nil, parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `search_blurbs` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param query [::String]
            #     The query used to search for blurbs containing to words of this string.
            #     Only posts that contain an exact match of a queried word will be returned.
            #   @param parent [::String]
            #     The rooms or profiles to search. If unset, `SearchBlurbs` will search all
            #     rooms and all profiles.
            #   @param page_size [::Integer]
            #     The maximum number of blurbs return. Server may return fewer
            #     blurbs than requested. If unspecified, server will pick an appropriate
            #     default.
            #   @param page_token [::String]
            #     The value of
            #     google.showcase.v1beta1.SearchBlurbsResponse.next_page_token
            #     returned from the previous call to
            #     `google.showcase.v1beta1.Messaging\SearchBlurbs` method.
            #
            # @yield [result, env] Access the result along with the Faraday environment object
            # @yieldparam result [::Gapic::Operation]
            # @yieldparam env [::Faraday::Env]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Faraday::Error] if the REST call is aborted.
            def search_blurbs request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::SearchBlurbsRequest

              @messaging_stub.search_blurbs request, options: options do |response, env|
                yield response, env if block_given?
              end
            end

            ##
            # This returns a stream that emits the blurbs that are created for a
            # particular chat room or user profile.
            #
            # @overload stream_blurbs(request, options = nil)
            #   Pass arguments to `stream_blurbs` via a request object, either of type
            #   {::Google::Showcase::V1beta1::StreamBlurbsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::StreamBlurbsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload stream_blurbs(name: nil, expire_time: nil)
            #   Pass arguments to `stream_blurbs` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of a chat room or user profile whose blurbs to stream.
            #   @param expire_time [::Google::Protobuf::Timestamp, ::Hash]
            #     The time at which this stream will close.
            #
            # @yield [result, env] Access the result along with the Faraday environment object
            # @yieldparam result [::Enumerable<::Google::Showcase::V1beta1::StreamBlurbsResponse>]
            # @yieldparam env [::Faraday::Env]
            #
            # @return [::Enumerable<::Google::Showcase::V1beta1::StreamBlurbsResponse>]
            #
            # @raise [::Faraday::Error] if the REST call is aborted.
            def stream_blurbs request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::StreamBlurbsRequest

              @messaging_stub.stream_blurbs request, options: options do |response, env|
                yield response, env if block_given?
              end
            end

            ##
            # This is a stream to create multiple blurbs. If an invalid blurb is
            # requested to be created, the stream will close with an error.
            #
            # @param request [::Gapic::StreamInput, ::Enumerable<::Google::Showcase::V1beta1::CreateBlurbRequest, ::Hash>]
            #   An enumerable of {::Google::Showcase::V1beta1::CreateBlurbRequest} instances.
            # @param options [::Gapic::CallOptions, ::Hash]
            #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @yield [result, env] Access the result along with the Faraday environment object
            # @yieldparam result [::Google::Showcase::V1beta1::SendBlurbsResponse]
            # @yieldparam env [::Faraday::Env]
            #
            # @return [::Google::Showcase::V1beta1::SendBlurbsResponse]
            #
            # @raise [::Faraday::Error] if the REST call is aborted.
            def send_blurbs request, options = nil
              unless request.is_a? ::Enumerable
                raise ::ArgumentError, "request must be an Enumerable" unless request.respond_to? :to_enum
                request = request.to_enum
              end

              request = request.lazy.map do |req|
                ::Gapic::Protobuf.coerce req, to: ::Google::Showcase::V1beta1::CreateBlurbRequest
              end

              @messaging_stub.send_blurbs request, options: options do |response, env|
                yield response, env if block_given?
              end
            end

            ##
            # This method starts a bidirectional stream that receives all blurbs that
            # are being created after the stream has started and sends requests to create
            # blurbs. If an invalid blurb is requested to be created, the stream will
            # close with an error.
            #
            # @param request [::Gapic::StreamInput, ::Enumerable<::Google::Showcase::V1beta1::ConnectRequest, ::Hash>]
            #   An enumerable of {::Google::Showcase::V1beta1::ConnectRequest} instances.
            # @param options [::Gapic::CallOptions, ::Hash]
            #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @yield [result, env] Access the result along with the Faraday environment object
            # @yieldparam result [::Enumerable<::Google::Showcase::V1beta1::StreamBlurbsResponse>]
            # @yieldparam env [::Faraday::Env]
            #
            # @return [::Enumerable<::Google::Showcase::V1beta1::StreamBlurbsResponse>]
            #
            # @raise [::Faraday::Error] if the REST call is aborted.
            def connect request, options = nil
              unless request.is_a? ::Enumerable
                raise ::ArgumentError, "request must be an Enumerable" unless request.respond_to? :to_enum
                request = request.to_enum
              end

              request = request.lazy.map do |req|
                ::Gapic::Protobuf.coerce req, to: ::Google::Showcase::V1beta1::ConnectRequest
              end

              @messaging_stub.connect request, options: options do |response, env|
                yield response, env if block_given?
              end
            end

            ##
            # Configuration class for the Messaging REST API.
            #
            # This class represents the configuration for Messaging REST,
            # providing control over credentials, timeouts, retry behavior, logging.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # # Examples
            #
            # To modify the global config, setting the timeout for all calls to 10 seconds:
            #
            #     ::Google::Showcase::V1beta1::Messaging::Client.configure do |config|
            #       config.timeout = 10.0
            #     end
            #
            # To apply the above configuration only to a new client:
            #
            #     client = ::Google::Showcase::V1beta1::Messaging::Client.new do |config|
            #       config.timeout = 10.0
            #     end
            #
            # @!attribute [rw] endpoint
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"localhost:7469"`.
            #   @return [::String]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            #
            class Configuration
              extend ::Gapic::Config

              config_attr :endpoint,      "localhost:7469", ::String
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config&.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the Messaging API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `create_room`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_room
                ##
                # RPC-specific configuration for `get_room`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_room
                ##
                # RPC-specific configuration for `update_room`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_room
                ##
                # RPC-specific configuration for `delete_room`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_room
                ##
                # RPC-specific configuration for `list_rooms`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_rooms
                ##
                # RPC-specific configuration for `create_blurb`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_blurb
                ##
                # RPC-specific configuration for `get_blurb`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_blurb
                ##
                # RPC-specific configuration for `update_blurb`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_blurb
                ##
                # RPC-specific configuration for `delete_blurb`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_blurb
                ##
                # RPC-specific configuration for `list_blurbs`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_blurbs
                ##
                # RPC-specific configuration for `search_blurbs`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :search_blurbs
                ##
                # RPC-specific configuration for `stream_blurbs`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :stream_blurbs
                ##
                # RPC-specific configuration for `send_blurbs`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :send_blurbs
                ##
                # RPC-specific configuration for `connect`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :connect

                # @private
                def initialize parent_rpcs = nil
                  create_room_config = parent_rpcs&.create_room if parent_rpcs&.respond_to? :create_room
                  @create_room = ::Gapic::Config::Method.new create_room_config
                  get_room_config = parent_rpcs&.get_room if parent_rpcs&.respond_to? :get_room
                  @get_room = ::Gapic::Config::Method.new get_room_config
                  update_room_config = parent_rpcs&.update_room if parent_rpcs&.respond_to? :update_room
                  @update_room = ::Gapic::Config::Method.new update_room_config
                  delete_room_config = parent_rpcs&.delete_room if parent_rpcs&.respond_to? :delete_room
                  @delete_room = ::Gapic::Config::Method.new delete_room_config
                  list_rooms_config = parent_rpcs&.list_rooms if parent_rpcs&.respond_to? :list_rooms
                  @list_rooms = ::Gapic::Config::Method.new list_rooms_config
                  create_blurb_config = parent_rpcs&.create_blurb if parent_rpcs&.respond_to? :create_blurb
                  @create_blurb = ::Gapic::Config::Method.new create_blurb_config
                  get_blurb_config = parent_rpcs&.get_blurb if parent_rpcs&.respond_to? :get_blurb
                  @get_blurb = ::Gapic::Config::Method.new get_blurb_config
                  update_blurb_config = parent_rpcs&.update_blurb if parent_rpcs&.respond_to? :update_blurb
                  @update_blurb = ::Gapic::Config::Method.new update_blurb_config
                  delete_blurb_config = parent_rpcs&.delete_blurb if parent_rpcs&.respond_to? :delete_blurb
                  @delete_blurb = ::Gapic::Config::Method.new delete_blurb_config
                  list_blurbs_config = parent_rpcs&.list_blurbs if parent_rpcs&.respond_to? :list_blurbs
                  @list_blurbs = ::Gapic::Config::Method.new list_blurbs_config
                  search_blurbs_config = parent_rpcs&.search_blurbs if parent_rpcs&.respond_to? :search_blurbs
                  @search_blurbs = ::Gapic::Config::Method.new search_blurbs_config
                  stream_blurbs_config = parent_rpcs&.stream_blurbs if parent_rpcs&.respond_to? :stream_blurbs
                  @stream_blurbs = ::Gapic::Config::Method.new stream_blurbs_config
                  send_blurbs_config = parent_rpcs&.send_blurbs if parent_rpcs&.respond_to? :send_blurbs
                  @send_blurbs = ::Gapic::Config::Method.new send_blurbs_config
                  connect_config = parent_rpcs&.connect if parent_rpcs&.respond_to? :connect
                  @connect = ::Gapic::Config::Method.new connect_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
