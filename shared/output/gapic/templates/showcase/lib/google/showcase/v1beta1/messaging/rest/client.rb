# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/showcase/v1beta1/messaging_pb"
require "google/showcase/v1beta1/messaging/rest/service_stub"
require "google/cloud/location/rest"
require "google/iam/v1/rest"

module Google
  module Showcase
    module V1beta1
      module Messaging
        module Rest
          ##
          # REST client for the Messaging service.
          #
          # A simple messaging service that implements chat rooms and profile posts.
          #
          # This messaging service showcases the features that API clients
          # generated by gapic-generators implement.
          #
          class Client
            # @private
            API_VERSION = ""

            # @private
            DEFAULT_ENDPOINT_TEMPLATE = "localhost:7469"

            include Paths

            # @private
            attr_reader :messaging_stub

            ##
            # Configure the Messaging Client class.
            #
            # See {::Google::Showcase::V1beta1::Messaging::Rest::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all Messaging clients
            #   ::Google::Showcase::V1beta1::Messaging::Rest::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                default_config = Client::Configuration.new

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the Messaging Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Showcase::V1beta1::Messaging::Rest::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # The effective universe domain
            #
            # @return [String]
            #
            def universe_domain
              @messaging_stub.universe_domain
            end

            ##
            # Create a new Messaging REST client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Showcase::V1beta1::Messaging::Rest::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Showcase::V1beta1::Messaging::Rest::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Messaging client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              # Use self-signed JWT if the endpoint is unchanged from default,
              # but only if the default endpoint does not have a region prefix.
              enable_self_signed_jwt = @config.endpoint.nil? ||
                                       (@config.endpoint == Configuration::DEFAULT_ENDPOINT &&
                                       !@config.endpoint.split(".").first.include?("-"))
              credentials ||= Credentials.default scope: @config.scope,
                                                  enable_self_signed_jwt: enable_self_signed_jwt
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end

              @quota_project_id = @config.quota_project
              @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

              @operations_client = ::Google::Showcase::V1beta1::Messaging::Rest::Operations.new do |config|
                config.credentials = credentials
                config.quota_project = @quota_project_id
                config.endpoint = @config.endpoint
                config.universe_domain = @config.universe_domain
              end

              @messaging_stub = ::Google::Showcase::V1beta1::Messaging::Rest::ServiceStub.new(
                endpoint: @config.endpoint,
                endpoint_template: DEFAULT_ENDPOINT_TEMPLATE,
                universe_domain: @config.universe_domain,
                credentials: credentials
              )

              @location_client = Google::Cloud::Location::Locations::Rest::Client.new do |config|
                config.credentials = credentials
                config.quota_project = @quota_project_id
                config.endpoint = @messaging_stub.endpoint
                config.universe_domain = @messaging_stub.universe_domain
                config.bindings_override = @config.bindings_override
              end

              @iam_policy_client = Google::Iam::V1::IAMPolicy::Rest::Client.new do |config|
                config.credentials = credentials
                config.quota_project = @quota_project_id
                config.endpoint = @messaging_stub.endpoint
                config.universe_domain = @messaging_stub.universe_domain
                config.bindings_override = @config.bindings_override
              end
            end

            ##
            # Get the associated client for long-running operations.
            #
            # @return [::Google::Showcase::V1beta1::Messaging::Rest::Operations]
            #
            attr_reader :operations_client

            ##
            # Get the associated client for mix-in of the Locations.
            #
            # @return [Google::Cloud::Location::Locations::Rest::Client]
            #
            attr_reader :location_client

            ##
            # Get the associated client for mix-in of the IAMPolicy.
            #
            # @return [Google::Iam::V1::IAMPolicy::Rest::Client]
            #
            attr_reader :iam_policy_client

            # Service calls

            ##
            # Creates a room.
            #
            # @overload create_room(request, options = nil)
            #   Pass arguments to `create_room` via a request object, either of type
            #   {::Google::Showcase::V1beta1::CreateRoomRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::CreateRoomRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload create_room(room: nil)
            #   Pass arguments to `create_room` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param room [::Google::Showcase::V1beta1::Room, ::Hash]
            #     The room to create.
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Google::Showcase::V1beta1::Room]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Google::Showcase::V1beta1::Room]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Messaging::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::CreateRoomRequest.new
            #
            #   # Call the create_room method.
            #   result = client.create_room request
            #
            #   # The returned object is of type Google::Showcase::V1beta1::Room.
            #   p result
            #
            def create_room request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::CreateRoomRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.create_room.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.create_room.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.create_room.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @messaging_stub.create_room request, options do |result, operation|
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Retrieves the Room with the given resource name.
            #
            # @overload get_room(request, options = nil)
            #   Pass arguments to `get_room` via a request object, either of type
            #   {::Google::Showcase::V1beta1::GetRoomRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::GetRoomRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload get_room(name: nil)
            #   Pass arguments to `get_room` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the requested room.
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Google::Showcase::V1beta1::Room]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Google::Showcase::V1beta1::Room]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Messaging::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::GetRoomRequest.new
            #
            #   # Call the get_room method.
            #   result = client.get_room request
            #
            #   # The returned object is of type Google::Showcase::V1beta1::Room.
            #   p result
            #
            def get_room request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::GetRoomRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.get_room.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.get_room.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.get_room.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @messaging_stub.get_room request, options do |result, operation|
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Updates a room.
            #
            # @overload update_room(request, options = nil)
            #   Pass arguments to `update_room` via a request object, either of type
            #   {::Google::Showcase::V1beta1::UpdateRoomRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::UpdateRoomRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload update_room(room: nil, update_mask: nil)
            #   Pass arguments to `update_room` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param room [::Google::Showcase::V1beta1::Room, ::Hash]
            #     The room to update.
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #     The field mask to determine which fields are to be updated. If empty, the
            #     server will assume all fields are to be updated.
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Google::Showcase::V1beta1::Room]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Google::Showcase::V1beta1::Room]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Messaging::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::UpdateRoomRequest.new
            #
            #   # Call the update_room method.
            #   result = client.update_room request
            #
            #   # The returned object is of type Google::Showcase::V1beta1::Room.
            #   p result
            #
            def update_room request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::UpdateRoomRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.update_room.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.update_room.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.update_room.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @messaging_stub.update_room request, options do |result, operation|
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Deletes a room and all of its blurbs.
            #
            # @overload delete_room(request, options = nil)
            #   Pass arguments to `delete_room` via a request object, either of type
            #   {::Google::Showcase::V1beta1::DeleteRoomRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::DeleteRoomRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload delete_room(name: nil)
            #   Pass arguments to `delete_room` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the requested room.
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Google::Protobuf::Empty]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Google::Protobuf::Empty]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Messaging::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::DeleteRoomRequest.new
            #
            #   # Call the delete_room method.
            #   result = client.delete_room request
            #
            #   # The returned object is of type Google::Protobuf::Empty.
            #   p result
            #
            def delete_room request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::DeleteRoomRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.delete_room.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.delete_room.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.delete_room.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @messaging_stub.delete_room request, options do |result, operation|
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Lists all chat rooms.
            #
            # @overload list_rooms(request, options = nil)
            #   Pass arguments to `list_rooms` via a request object, either of type
            #   {::Google::Showcase::V1beta1::ListRoomsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::ListRoomsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload list_rooms(page_size: nil, page_token: nil)
            #   Pass arguments to `list_rooms` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param page_size [::Integer]
            #     The maximum number of rooms return. Server may return fewer rooms
            #     than requested. If unspecified, server will pick an appropriate default.
            #   @param page_token [::String]
            #     The value of google.showcase.v1beta1.ListRoomsResponse.next_page_token
            #     returned from the previous call to
            #     `google.showcase.v1beta1.Messaging\ListRooms` method.
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Gapic::Rest::PagedEnumerable<::Google::Showcase::V1beta1::Room>]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Gapic::Rest::PagedEnumerable<::Google::Showcase::V1beta1::Room>]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Messaging::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::ListRoomsRequest.new
            #
            #   # Call the list_rooms method.
            #   result = client.list_rooms request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can iterate
            #   # over elements, and API calls will be issued to fetch pages as needed.
            #   result.each do |item|
            #     # Each element is of type ::Google::Showcase::V1beta1::Room.
            #     p item
            #   end
            #
            def list_rooms request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::ListRoomsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.list_rooms.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.list_rooms.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.list_rooms.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @messaging_stub.list_rooms request, options do |result, operation|
                result = ::Gapic::Rest::PagedEnumerable.new @messaging_stub, :list_rooms, "rooms", request, result,
                                                            options
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Creates a blurb. If the parent is a room, the blurb is understood to be a
            # message in that room. If the parent is a profile, the blurb is understood
            # to be a post on the profile.
            #
            # @overload create_blurb(request, options = nil)
            #   Pass arguments to `create_blurb` via a request object, either of type
            #   {::Google::Showcase::V1beta1::CreateBlurbRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::CreateBlurbRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload create_blurb(parent: nil, blurb: nil)
            #   Pass arguments to `create_blurb` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     The resource name of the chat room or user profile that this blurb will
            #     be tied to.
            #   @param blurb [::Google::Showcase::V1beta1::Blurb, ::Hash]
            #     The blurb to create.
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Google::Showcase::V1beta1::Blurb]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Google::Showcase::V1beta1::Blurb]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Messaging::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::CreateBlurbRequest.new
            #
            #   # Call the create_blurb method.
            #   result = client.create_blurb request
            #
            #   # The returned object is of type Google::Showcase::V1beta1::Blurb.
            #   p result
            #
            def create_blurb request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::CreateBlurbRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.create_blurb.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.create_blurb.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.create_blurb.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @messaging_stub.create_blurb request, options do |result, operation|
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Retrieves the Blurb with the given resource name.
            #
            # @overload get_blurb(request, options = nil)
            #   Pass arguments to `get_blurb` via a request object, either of type
            #   {::Google::Showcase::V1beta1::GetBlurbRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::GetBlurbRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload get_blurb(name: nil)
            #   Pass arguments to `get_blurb` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the requested blurb.
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Google::Showcase::V1beta1::Blurb]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Google::Showcase::V1beta1::Blurb]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Messaging::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::GetBlurbRequest.new
            #
            #   # Call the get_blurb method.
            #   result = client.get_blurb request
            #
            #   # The returned object is of type Google::Showcase::V1beta1::Blurb.
            #   p result
            #
            def get_blurb request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::GetBlurbRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.get_blurb.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.get_blurb.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.get_blurb.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @messaging_stub.get_blurb request, options do |result, operation|
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Updates a blurb.
            #
            # @overload update_blurb(request, options = nil)
            #   Pass arguments to `update_blurb` via a request object, either of type
            #   {::Google::Showcase::V1beta1::UpdateBlurbRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::UpdateBlurbRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload update_blurb(blurb: nil, update_mask: nil)
            #   Pass arguments to `update_blurb` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param blurb [::Google::Showcase::V1beta1::Blurb, ::Hash]
            #     The blurb to update.
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #     The field mask to determine wich fields are to be updated. If empty, the
            #     server will assume all fields are to be updated.
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Google::Showcase::V1beta1::Blurb]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Google::Showcase::V1beta1::Blurb]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Messaging::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::UpdateBlurbRequest.new
            #
            #   # Call the update_blurb method.
            #   result = client.update_blurb request
            #
            #   # The returned object is of type Google::Showcase::V1beta1::Blurb.
            #   p result
            #
            def update_blurb request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::UpdateBlurbRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.update_blurb.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.update_blurb.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.update_blurb.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @messaging_stub.update_blurb request, options do |result, operation|
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Deletes a blurb.
            #
            # @overload delete_blurb(request, options = nil)
            #   Pass arguments to `delete_blurb` via a request object, either of type
            #   {::Google::Showcase::V1beta1::DeleteBlurbRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::DeleteBlurbRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload delete_blurb(name: nil)
            #   Pass arguments to `delete_blurb` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of the requested blurb.
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Google::Protobuf::Empty]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Google::Protobuf::Empty]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Messaging::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::DeleteBlurbRequest.new
            #
            #   # Call the delete_blurb method.
            #   result = client.delete_blurb request
            #
            #   # The returned object is of type Google::Protobuf::Empty.
            #   p result
            #
            def delete_blurb request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::DeleteBlurbRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.delete_blurb.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.delete_blurb.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.delete_blurb.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @messaging_stub.delete_blurb request, options do |result, operation|
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Lists blurbs for a specific chat room or user profile depending on the
            # parent resource name.
            #
            # @overload list_blurbs(request, options = nil)
            #   Pass arguments to `list_blurbs` via a request object, either of type
            #   {::Google::Showcase::V1beta1::ListBlurbsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::ListBlurbsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload list_blurbs(parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_blurbs` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     The resource name of the requested room or profile whos blurbs to list.
            #   @param page_size [::Integer]
            #     The maximum number of blurbs to return. Server may return fewer
            #     blurbs than requested. If unspecified, server will pick an appropriate
            #     default.
            #   @param page_token [::String]
            #     The value of google.showcase.v1beta1.ListBlurbsResponse.next_page_token
            #     returned from the previous call to
            #     `google.showcase.v1beta1.Messaging\ListBlurbs` method.
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Gapic::Rest::PagedEnumerable<::Google::Showcase::V1beta1::Blurb>]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Gapic::Rest::PagedEnumerable<::Google::Showcase::V1beta1::Blurb>]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Messaging::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::ListBlurbsRequest.new
            #
            #   # Call the list_blurbs method.
            #   result = client.list_blurbs request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can iterate
            #   # over elements, and API calls will be issued to fetch pages as needed.
            #   result.each do |item|
            #     # Each element is of type ::Google::Showcase::V1beta1::Blurb.
            #     p item
            #   end
            #
            def list_blurbs request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::ListBlurbsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.list_blurbs.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.list_blurbs.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.list_blurbs.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @messaging_stub.list_blurbs request, options do |result, operation|
                result = ::Gapic::Rest::PagedEnumerable.new @messaging_stub, :list_blurbs, "blurbs", request, result,
                                                            options
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # This method searches through all blurbs across all rooms and profiles
            # for blurbs containing to words found in the query. Only posts that
            # contain an exact match of a queried word will be returned.
            #
            # @overload search_blurbs(request, options = nil)
            #   Pass arguments to `search_blurbs` via a request object, either of type
            #   {::Google::Showcase::V1beta1::SearchBlurbsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::SearchBlurbsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload search_blurbs(query: nil, parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `search_blurbs` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param query [::String]
            #     The query used to search for blurbs containing to words of this string.
            #     Only posts that contain an exact match of a queried word will be returned.
            #   @param parent [::String]
            #     The rooms or profiles to search. If unset, `SearchBlurbs` will search all
            #     rooms and all profiles.
            #   @param page_size [::Integer]
            #     The maximum number of blurbs return. Server may return fewer
            #     blurbs than requested. If unspecified, server will pick an appropriate
            #     default.
            #   @param page_token [::String]
            #     The value of
            #     google.showcase.v1beta1.SearchBlurbsResponse.next_page_token
            #     returned from the previous call to
            #     `google.showcase.v1beta1.Messaging\SearchBlurbs` method.
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Gapic::Operation]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Messaging::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::SearchBlurbsRequest.new
            #
            #   # Call the search_blurbs method.
            #   result = client.search_blurbs request
            #
            #   # The returned object is of type Gapic::Operation. You can use it to
            #   # check the status of an operation, cancel it, or wait for results.
            #   # Here is how to wait for a response.
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "No response received."
            #   end
            #
            def search_blurbs request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::SearchBlurbsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.search_blurbs.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.search_blurbs.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.search_blurbs.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @messaging_stub.search_blurbs request, options do |result, operation|
                result = ::Gapic::Operation.new result, @operations_client, options: options
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # This returns a stream that emits the blurbs that are created for a
            # particular chat room or user profile.
            #
            # @overload stream_blurbs(request, options = nil)
            #   Pass arguments to `stream_blurbs` via a request object, either of type
            #   {::Google::Showcase::V1beta1::StreamBlurbsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::StreamBlurbsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload stream_blurbs(name: nil, expire_time: nil)
            #   Pass arguments to `stream_blurbs` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The resource name of a chat room or user profile whose blurbs to stream.
            #   @param expire_time [::Google::Protobuf::Timestamp, ::Hash]
            #     The time at which this stream will close.
            # @return [::Enumerable<::Google::Showcase::V1beta1::StreamBlurbsResponse>]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Messaging::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::StreamBlurbsRequest.new
            #
            #   # Call the stream_blurbs method to start streaming.
            #   output = client.stream_blurbs request
            #
            #   # The returned object is a streamed enumerable yielding elements of type
            #   # ::Google::Showcase::V1beta1::StreamBlurbsResponse
            #   output.each do |current_response|
            #     p current_response
            #   end
            #
            def stream_blurbs request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::StreamBlurbsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.stream_blurbs.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.stream_blurbs.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.stream_blurbs.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              ::Gapic::Rest::ServerStream.new(
                ::Google::Showcase::V1beta1::StreamBlurbsResponse,
                ::Gapic::Rest::ThreadedEnumerator.new do |in_q, out_q|
                  @messaging_stub.stream_blurbs request, options do |chunk|
                    in_q.deq
                    out_q.enq chunk
                  end
                end
              )
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Configuration class for the Messaging REST API.
            #
            # This class represents the configuration for Messaging REST,
            # providing control over timeouts, retry behavior, logging, transport
            # parameters, and other low-level controls. Certain parameters can also be
            # applied individually to specific RPCs. See
            # {::Google::Showcase::V1beta1::Messaging::Rest::Client::Configuration::Rpcs}
            # for a list of RPCs that can be configured independently.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # @example
            #
            #   # Modify the global config, setting the timeout for
            #   # create_room to 20 seconds,
            #   # and all remaining timeouts to 10 seconds.
            #   ::Google::Showcase::V1beta1::Messaging::Rest::Client.configure do |config|
            #     config.timeout = 10.0
            #     config.rpcs.create_room.timeout = 20.0
            #   end
            #
            #   # Apply the above configuration only to a new client.
            #   client = ::Google::Showcase::V1beta1::Messaging::Rest::Client.new do |config|
            #     config.timeout = 10.0
            #     config.rpcs.create_room.timeout = 20.0
            #   end
            #
            # @!attribute [rw] endpoint
            #   A custom service endpoint, as a hostname or hostname:port. The default is
            #   nil, indicating to use the default endpoint in the current universe domain.
            #   @return [::String,nil]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            # @!attribute [rw] quota_project
            #   A separate project against which to charge quota.
            #   @return [::String]
            # @!attribute [rw] universe_domain
            #   The universe domain within which to make requests. This determines the
            #   default endpoint URL. The default value of nil uses the environment
            #   universe (usually the default "googleapis.com" universe).
            #   @return [::String,nil]
            #
            class Configuration
              extend ::Gapic::Config

              # @private
              # The endpoint specific to the default "googleapis.com" universe. Deprecated.
              DEFAULT_ENDPOINT = "localhost:7469"

              config_attr :endpoint,      nil, ::String, nil
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client,
                           nil]
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
              config_attr :quota_project, nil, ::String, nil
              config_attr :universe_domain, nil, ::String, nil

              # @private
              # Overrides for http bindings for the RPCs of this service
              # are only used when this service is used as mixin, and only
              # by the host service.
              # @return [::Hash{::Symbol=>::Array<::Gapic::Rest::GrpcTranscoder::HttpBinding>}]
              config_attr :bindings_override, {}, ::Hash, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the Messaging API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `create_room`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_room
                ##
                # RPC-specific configuration for `get_room`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_room
                ##
                # RPC-specific configuration for `update_room`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_room
                ##
                # RPC-specific configuration for `delete_room`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_room
                ##
                # RPC-specific configuration for `list_rooms`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_rooms
                ##
                # RPC-specific configuration for `create_blurb`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_blurb
                ##
                # RPC-specific configuration for `get_blurb`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_blurb
                ##
                # RPC-specific configuration for `update_blurb`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_blurb
                ##
                # RPC-specific configuration for `delete_blurb`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_blurb
                ##
                # RPC-specific configuration for `list_blurbs`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_blurbs
                ##
                # RPC-specific configuration for `search_blurbs`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :search_blurbs
                ##
                # RPC-specific configuration for `stream_blurbs`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :stream_blurbs

                # @private
                def initialize parent_rpcs = nil
                  create_room_config = parent_rpcs.create_room if parent_rpcs.respond_to? :create_room
                  @create_room = ::Gapic::Config::Method.new create_room_config
                  get_room_config = parent_rpcs.get_room if parent_rpcs.respond_to? :get_room
                  @get_room = ::Gapic::Config::Method.new get_room_config
                  update_room_config = parent_rpcs.update_room if parent_rpcs.respond_to? :update_room
                  @update_room = ::Gapic::Config::Method.new update_room_config
                  delete_room_config = parent_rpcs.delete_room if parent_rpcs.respond_to? :delete_room
                  @delete_room = ::Gapic::Config::Method.new delete_room_config
                  list_rooms_config = parent_rpcs.list_rooms if parent_rpcs.respond_to? :list_rooms
                  @list_rooms = ::Gapic::Config::Method.new list_rooms_config
                  create_blurb_config = parent_rpcs.create_blurb if parent_rpcs.respond_to? :create_blurb
                  @create_blurb = ::Gapic::Config::Method.new create_blurb_config
                  get_blurb_config = parent_rpcs.get_blurb if parent_rpcs.respond_to? :get_blurb
                  @get_blurb = ::Gapic::Config::Method.new get_blurb_config
                  update_blurb_config = parent_rpcs.update_blurb if parent_rpcs.respond_to? :update_blurb
                  @update_blurb = ::Gapic::Config::Method.new update_blurb_config
                  delete_blurb_config = parent_rpcs.delete_blurb if parent_rpcs.respond_to? :delete_blurb
                  @delete_blurb = ::Gapic::Config::Method.new delete_blurb_config
                  list_blurbs_config = parent_rpcs.list_blurbs if parent_rpcs.respond_to? :list_blurbs
                  @list_blurbs = ::Gapic::Config::Method.new list_blurbs_config
                  search_blurbs_config = parent_rpcs.search_blurbs if parent_rpcs.respond_to? :search_blurbs
                  @search_blurbs = ::Gapic::Config::Method.new search_blurbs_config
                  stream_blurbs_config = parent_rpcs.stream_blurbs if parent_rpcs.respond_to? :stream_blurbs
                  @stream_blurbs = ::Gapic::Config::Method.new stream_blurbs_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
