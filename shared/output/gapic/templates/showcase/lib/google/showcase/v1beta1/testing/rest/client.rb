# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/showcase/v1beta1/testing_pb"
require "google/showcase/v1beta1/testing/rest/service_stub"
require "google/cloud/location/rest"
require "google/iam/v1/rest"

module Google
  module Showcase
    module V1beta1
      module Testing
        module Rest
          ##
          # REST client for the Testing service.
          #
          # A service to facilitate running discrete sets of tests
          # against Showcase.
          # Adding this comment with special characters for comment formatting tests:
          # 1. (abra->kadabra->alakazam)
          # 2) [Nonsense][]: `pokemon/*/psychic/*`
          #
          class Client
            # @private
            API_VERSION = ""

            # @private
            DEFAULT_ENDPOINT_TEMPLATE = "localhost:7469"

            include Paths

            # @private
            attr_reader :testing_stub

            ##
            # Configure the Testing Client class.
            #
            # See {::Google::Showcase::V1beta1::Testing::Rest::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all Testing clients
            #   ::Google::Showcase::V1beta1::Testing::Rest::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                default_config = Client::Configuration.new

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the Testing Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Showcase::V1beta1::Testing::Rest::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # The effective universe domain
            #
            # @return [String]
            #
            def universe_domain
              @testing_stub.universe_domain
            end

            ##
            # Create a new Testing REST client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Showcase::V1beta1::Testing::Rest::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Showcase::V1beta1::Testing::Rest::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Testing client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              # Use self-signed JWT if the endpoint is unchanged from default,
              # but only if the default endpoint does not have a region prefix.
              enable_self_signed_jwt = @config.endpoint.nil? ||
                                       (@config.endpoint == Configuration::DEFAULT_ENDPOINT &&
                                       !@config.endpoint.split(".").first.include?("-"))
              credentials ||= Credentials.default scope: @config.scope,
                                                  enable_self_signed_jwt: enable_self_signed_jwt
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end

              @quota_project_id = @config.quota_project
              @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

              @testing_stub = ::Google::Showcase::V1beta1::Testing::Rest::ServiceStub.new(
                endpoint: @config.endpoint,
                endpoint_template: DEFAULT_ENDPOINT_TEMPLATE,
                universe_domain: @config.universe_domain,
                credentials: credentials
              )

              @location_client = Google::Cloud::Location::Locations::Rest::Client.new do |config|
                config.credentials = credentials
                config.quota_project = @quota_project_id
                config.endpoint = @testing_stub.endpoint
                config.universe_domain = @testing_stub.universe_domain
                config.bindings_override = @config.bindings_override
              end

              @iam_policy_client = Google::Iam::V1::IAMPolicy::Rest::Client.new do |config|
                config.credentials = credentials
                config.quota_project = @quota_project_id
                config.endpoint = @testing_stub.endpoint
                config.universe_domain = @testing_stub.universe_domain
                config.bindings_override = @config.bindings_override
              end
            end

            ##
            # Get the associated client for mix-in of the Locations.
            #
            # @return [Google::Cloud::Location::Locations::Rest::Client]
            #
            attr_reader :location_client

            ##
            # Get the associated client for mix-in of the IAMPolicy.
            #
            # @return [Google::Iam::V1::IAMPolicy::Rest::Client]
            #
            attr_reader :iam_policy_client

            # Service calls

            ##
            # Creates a new testing session.
            # Adding this comment with special characters for comment formatting tests:
            # 1. (abra->kadabra->alakazam)
            # 2) [Nonsense][]: `pokemon/*/psychic/*`
            #
            # @overload create_session(request, options = nil)
            #   Pass arguments to `create_session` via a request object, either of type
            #   {::Google::Showcase::V1beta1::CreateSessionRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::CreateSessionRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload create_session(session: nil)
            #   Pass arguments to `create_session` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param session [::Google::Showcase::V1beta1::Session, ::Hash]
            #     The session to be created.
            #     Sessions are immutable once they are created (although they can
            #     be deleted).
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Google::Showcase::V1beta1::Session]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Google::Showcase::V1beta1::Session]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Testing::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::CreateSessionRequest.new
            #
            #   # Call the create_session method.
            #   result = client.create_session request
            #
            #   # The returned object is of type Google::Showcase::V1beta1::Session.
            #   p result
            #
            def create_session request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::CreateSessionRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.create_session.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.create_session.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.create_session.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @testing_stub.create_session request, options do |result, operation|
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Gets a testing session.
            #
            # @overload get_session(request, options = nil)
            #   Pass arguments to `get_session` via a request object, either of type
            #   {::Google::Showcase::V1beta1::GetSessionRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::GetSessionRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload get_session(name: nil)
            #   Pass arguments to `get_session` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The session to be retrieved.
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Google::Showcase::V1beta1::Session]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Google::Showcase::V1beta1::Session]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Testing::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::GetSessionRequest.new
            #
            #   # Call the get_session method.
            #   result = client.get_session request
            #
            #   # The returned object is of type Google::Showcase::V1beta1::Session.
            #   p result
            #
            def get_session request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::GetSessionRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.get_session.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.get_session.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.get_session.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @testing_stub.get_session request, options do |result, operation|
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Lists the current test sessions.
            #
            # @overload list_sessions(request, options = nil)
            #   Pass arguments to `list_sessions` via a request object, either of type
            #   {::Google::Showcase::V1beta1::ListSessionsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::ListSessionsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload list_sessions(page_size: nil, page_token: nil)
            #   Pass arguments to `list_sessions` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param page_size [::Integer]
            #     The maximum number of sessions to return per page.
            #   @param page_token [::String]
            #     The page token, for retrieving subsequent pages.
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Gapic::Rest::PagedEnumerable<::Google::Showcase::V1beta1::Session>]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Gapic::Rest::PagedEnumerable<::Google::Showcase::V1beta1::Session>]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Testing::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::ListSessionsRequest.new
            #
            #   # Call the list_sessions method.
            #   result = client.list_sessions request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can iterate
            #   # over elements, and API calls will be issued to fetch pages as needed.
            #   result.each do |item|
            #     # Each element is of type ::Google::Showcase::V1beta1::Session.
            #     p item
            #   end
            #
            def list_sessions request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::ListSessionsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.list_sessions.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.list_sessions.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.list_sessions.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @testing_stub.list_sessions request, options do |result, operation|
                result = ::Gapic::Rest::PagedEnumerable.new @testing_stub, :list_sessions, "sessions", request, result,
                                                            options
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Delete a test session.
            #
            # @overload delete_session(request, options = nil)
            #   Pass arguments to `delete_session` via a request object, either of type
            #   {::Google::Showcase::V1beta1::DeleteSessionRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::DeleteSessionRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload delete_session(name: nil)
            #   Pass arguments to `delete_session` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The session to be deleted.
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Google::Protobuf::Empty]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Google::Protobuf::Empty]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Testing::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::DeleteSessionRequest.new
            #
            #   # Call the delete_session method.
            #   result = client.delete_session request
            #
            #   # The returned object is of type Google::Protobuf::Empty.
            #   p result
            #
            def delete_session request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::DeleteSessionRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.delete_session.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.delete_session.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.delete_session.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @testing_stub.delete_session request, options do |result, operation|
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Report on the status of a session.
            # This generates a report detailing which tests have been completed,
            # and an overall rollup.
            #
            # @overload report_session(request, options = nil)
            #   Pass arguments to `report_session` via a request object, either of type
            #   {::Google::Showcase::V1beta1::ReportSessionRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::ReportSessionRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload report_session(name: nil)
            #   Pass arguments to `report_session` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The session to be reported on.
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Google::Showcase::V1beta1::ReportSessionResponse]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Google::Showcase::V1beta1::ReportSessionResponse]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Testing::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::ReportSessionRequest.new
            #
            #   # Call the report_session method.
            #   result = client.report_session request
            #
            #   # The returned object is of type Google::Showcase::V1beta1::ReportSessionResponse.
            #   p result
            #
            def report_session request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::ReportSessionRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.report_session.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.report_session.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.report_session.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @testing_stub.report_session request, options do |result, operation|
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # List the tests of a sessesion.
            #
            # @overload list_tests(request, options = nil)
            #   Pass arguments to `list_tests` via a request object, either of type
            #   {::Google::Showcase::V1beta1::ListTestsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::ListTestsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload list_tests(parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_tests` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     The session.
            #   @param page_size [::Integer]
            #     The maximum number of tests to return per page.
            #   @param page_token [::String]
            #     The page token, for retrieving subsequent pages.
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Gapic::Rest::PagedEnumerable<::Google::Showcase::V1beta1::Test>]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Gapic::Rest::PagedEnumerable<::Google::Showcase::V1beta1::Test>]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Testing::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::ListTestsRequest.new
            #
            #   # Call the list_tests method.
            #   result = client.list_tests request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can iterate
            #   # over elements, and API calls will be issued to fetch pages as needed.
            #   result.each do |item|
            #     # Each element is of type ::Google::Showcase::V1beta1::Test.
            #     p item
            #   end
            #
            def list_tests request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::ListTestsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.list_tests.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.list_tests.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.list_tests.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @testing_stub.list_tests request, options do |result, operation|
                result = ::Gapic::Rest::PagedEnumerable.new @testing_stub, :list_tests, "tests", request, result,
                                                            options
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Explicitly decline to implement a test.
            #
            # This removes the test from subsequent `ListTests` calls, and
            # attempting to do the test will error.
            #
            # This method will error if attempting to delete a required test.
            #
            # @overload delete_test(request, options = nil)
            #   Pass arguments to `delete_test` via a request object, either of type
            #   {::Google::Showcase::V1beta1::DeleteTestRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::DeleteTestRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload delete_test(name: nil)
            #   Pass arguments to `delete_test` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The test to be deleted.
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Google::Protobuf::Empty]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Google::Protobuf::Empty]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Testing::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::DeleteTestRequest.new
            #
            #   # Call the delete_test method.
            #   result = client.delete_test request
            #
            #   # The returned object is of type Google::Protobuf::Empty.
            #   p result
            #
            def delete_test request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::DeleteTestRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.delete_test.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.delete_test.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.delete_test.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @testing_stub.delete_test request, options do |result, operation|
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Register a response to a test.
            #
            # In cases where a test involves registering a final answer at the
            # end of the test, this method provides the means to do so.
            #
            # @overload verify_test(request, options = nil)
            #   Pass arguments to `verify_test` via a request object, either of type
            #   {::Google::Showcase::V1beta1::VerifyTestRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Showcase::V1beta1::VerifyTestRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
            #
            # @overload verify_test(name: nil, answer: nil, answers: nil)
            #   Pass arguments to `verify_test` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     The test to have an answer registered to it.
            #   @param answer [::String]
            #     The answer from the test.
            #   @param answers [::Array<::String>]
            #     The answers from the test if multiple are to be checked
            # @yield [result, operation] Access the result along with the TransportOperation object
            # @yieldparam result [::Google::Showcase::V1beta1::VerifyTestResponse]
            # @yieldparam operation [::Gapic::Rest::TransportOperation]
            #
            # @return [::Google::Showcase::V1beta1::VerifyTestResponse]
            #
            # @raise [::Gapic::Rest::Error] if the REST call is aborted.
            #
            # @example Basic example
            #   require "google/showcase/v1beta1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Showcase::V1beta1::Testing::Rest::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Showcase::V1beta1::VerifyTestRequest.new
            #
            #   # Call the verify_test method.
            #   result = client.verify_test request
            #
            #   # The returned object is of type Google::Showcase::V1beta1::VerifyTestResponse.
            #   p result
            #
            def verify_test request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::VerifyTestRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              call_metadata = @config.rpcs.verify_test.metadata.to_h

              # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
              call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Showcase::VERSION,
                transports_version_send: [:rest]

              call_metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
              call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.verify_test.timeout,
                                     metadata:     call_metadata,
                                     retry_policy: @config.rpcs.verify_test.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @testing_stub.verify_test request, options do |result, operation|
                yield result, operation if block_given?
                return result
              end
            rescue ::Faraday::Error => e
              raise ::Gapic::Rest::Error.wrap_faraday_error e
            end

            ##
            # Configuration class for the Testing REST API.
            #
            # This class represents the configuration for Testing REST,
            # providing control over timeouts, retry behavior, logging, transport
            # parameters, and other low-level controls. Certain parameters can also be
            # applied individually to specific RPCs. See
            # {::Google::Showcase::V1beta1::Testing::Rest::Client::Configuration::Rpcs}
            # for a list of RPCs that can be configured independently.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # @example
            #
            #   # Modify the global config, setting the timeout for
            #   # create_session to 20 seconds,
            #   # and all remaining timeouts to 10 seconds.
            #   ::Google::Showcase::V1beta1::Testing::Rest::Client.configure do |config|
            #     config.timeout = 10.0
            #     config.rpcs.create_session.timeout = 20.0
            #   end
            #
            #   # Apply the above configuration only to a new client.
            #   client = ::Google::Showcase::V1beta1::Testing::Rest::Client.new do |config|
            #     config.timeout = 10.0
            #     config.rpcs.create_session.timeout = 20.0
            #   end
            #
            # @!attribute [rw] endpoint
            #   A custom service endpoint, as a hostname or hostname:port. The default is
            #   nil, indicating to use the default endpoint in the current universe domain.
            #   @return [::String,nil]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            # @!attribute [rw] quota_project
            #   A separate project against which to charge quota.
            #   @return [::String]
            # @!attribute [rw] universe_domain
            #   The universe domain within which to make requests. This determines the
            #   default endpoint URL. The default value of nil uses the environment
            #   universe (usually the default "googleapis.com" universe).
            #   @return [::String,nil]
            #
            class Configuration
              extend ::Gapic::Config

              # @private
              # The endpoint specific to the default "googleapis.com" universe. Deprecated.
              DEFAULT_ENDPOINT = "localhost:7469"

              config_attr :endpoint,      nil, ::String, nil
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client,
                           nil]
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
              config_attr :quota_project, nil, ::String, nil
              config_attr :universe_domain, nil, ::String, nil

              # @private
              # Overrides for http bindings for the RPCs of this service
              # are only used when this service is used as mixin, and only
              # by the host service.
              # @return [::Hash{::Symbol=>::Array<::Gapic::Rest::GrpcTranscoder::HttpBinding>}]
              config_attr :bindings_override, {}, ::Hash, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the Testing API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `create_session`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_session
                ##
                # RPC-specific configuration for `get_session`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_session
                ##
                # RPC-specific configuration for `list_sessions`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_sessions
                ##
                # RPC-specific configuration for `delete_session`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_session
                ##
                # RPC-specific configuration for `report_session`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :report_session
                ##
                # RPC-specific configuration for `list_tests`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_tests
                ##
                # RPC-specific configuration for `delete_test`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_test
                ##
                # RPC-specific configuration for `verify_test`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :verify_test

                # @private
                def initialize parent_rpcs = nil
                  create_session_config = parent_rpcs.create_session if parent_rpcs.respond_to? :create_session
                  @create_session = ::Gapic::Config::Method.new create_session_config
                  get_session_config = parent_rpcs.get_session if parent_rpcs.respond_to? :get_session
                  @get_session = ::Gapic::Config::Method.new get_session_config
                  list_sessions_config = parent_rpcs.list_sessions if parent_rpcs.respond_to? :list_sessions
                  @list_sessions = ::Gapic::Config::Method.new list_sessions_config
                  delete_session_config = parent_rpcs.delete_session if parent_rpcs.respond_to? :delete_session
                  @delete_session = ::Gapic::Config::Method.new delete_session_config
                  report_session_config = parent_rpcs.report_session if parent_rpcs.respond_to? :report_session
                  @report_session = ::Gapic::Config::Method.new report_session_config
                  list_tests_config = parent_rpcs.list_tests if parent_rpcs.respond_to? :list_tests
                  @list_tests = ::Gapic::Config::Method.new list_tests_config
                  delete_test_config = parent_rpcs.delete_test if parent_rpcs.respond_to? :delete_test
                  @delete_test = ::Gapic::Config::Method.new delete_test_config
                  verify_test_config = parent_rpcs.verify_test if parent_rpcs.respond_to? :verify_test
                  @verify_test = ::Gapic::Config::Method.new verify_test_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
