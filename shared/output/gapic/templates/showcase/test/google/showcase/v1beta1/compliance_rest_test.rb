# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"
require "gapic/rest"
require "google/showcase/v1beta1/compliance_pb"
require "google/showcase/v1beta1/compliance"


class ::Google::Showcase::V1beta1::Compliance::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_count, :requests

    def initialize response, &block
      @response = response
      @block = block
      @call_count = 0
      @requests = []
    end

    def make_get_request uri:, params: {}, options: {}
      make_http_request :get, uri: uri, body: nil, params: params, options: options
    end

    def make_delete_request uri:, params: {}, options: {}
      make_http_request :delete, uri: uri, body: nil, params: params, options: options
    end

    def make_post_request uri:, body: nil, params: {}, options: {}
      make_http_request :post, uri: uri, body: body, params: params, options: options
    end

    def make_patch_request uri:, body:, params: {}, options: {}
      make_http_request :patch, uri: uri, body: body, params: params, options: options
    end

    def make_put_request uri:, body:, params: {}, options: {}
      make_http_request :put, uri: uri, body: body, params: params, options: options
    end

    def make_http_request *args, **kwargs
      @call_count += 1

      @requests << @block&.call(*args, **kwargs)

      @response
    end
  end

  def test_repeat_data_body
    # Create test objects.
    client_result = ::Google::Showcase::V1beta1::RepeatResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    info = {}
    server_verify = true
    f_int32 = 42
    f_int64 = 42
    f_double = 3.5
    p_int32 = 42
    p_int64 = 42
    p_double = 3.5

    repeat_data_body_client_stub = ClientStub.new http_response do |verb, uri:, body:, params:, options:|
      assert_equal :post, verb

      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    Gapic::Rest::ClientStub.stub :new, repeat_data_body_client_stub do
      # Create client
      client = ::Google::Showcase::V1beta1::Compliance::Rest::Client.new do |config|
        config.credentials = :dummy_value
      end

      # Use hash object
      client.repeat_data_body({ name: name, info: info, server_verify: server_verify, f_int32: f_int32,
f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double }) do |result, response|
        assert_equal http_response, response
      end

      # Use named arguments
      client.repeat_data_body name: name, info: info, server_verify: server_verify, f_int32: f_int32, f_int64: f_int64,
                              f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double do |result, response|
        assert_equal http_response, response
      end

      # Use protobuf object
      client.repeat_data_body ::Google::Showcase::V1beta1::RepeatRequest.new(name: name, info: info,
                                                                             server_verify: server_verify, f_int32: f_int32, f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double) do |result, response|
        assert_equal http_response, response
      end

      # Use hash object with options
      client.repeat_data_body(
        { name: name, info: info, server_verify: server_verify, f_int32: f_int32, f_int64: f_int64, f_double: f_double,
p_int32: p_int32, p_int64: p_int64, p_double: p_double }, call_options
      ) do |result, response|
        assert_equal http_response, response
      end

      # Use protobuf object with options
      client.repeat_data_body(
        ::Google::Showcase::V1beta1::RepeatRequest.new(name: name, info: info, server_verify: server_verify, f_int32: f_int32,
                                                       f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double), call_options
      ) do |result, response|
        assert_equal http_response, response
      end

      # Verify method calls
      assert_equal 5, repeat_data_body_client_stub.call_count
    end
  end

  def test_repeat_data_body_info
    # Create test objects.
    client_result = ::Google::Showcase::V1beta1::RepeatResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    info = {}
    server_verify = true
    f_int32 = 42
    f_int64 = 42
    f_double = 3.5
    p_int32 = 42
    p_int64 = 42
    p_double = 3.5

    repeat_data_body_info_client_stub = ClientStub.new http_response do |verb, uri:, body:, params:, options:|
      assert_equal :post, verb

      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    Gapic::Rest::ClientStub.stub :new, repeat_data_body_info_client_stub do
      # Create client
      client = ::Google::Showcase::V1beta1::Compliance::Rest::Client.new do |config|
        config.credentials = :dummy_value
      end

      # Use hash object
      client.repeat_data_body_info({ name: name, info: info, server_verify: server_verify, f_int32: f_int32,
f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double }) do |result, response|
        assert_equal http_response, response
      end

      # Use named arguments
      client.repeat_data_body_info name: name, info: info, server_verify: server_verify, f_int32: f_int32,
                                   f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double do |result, response|
        assert_equal http_response, response
      end

      # Use protobuf object
      client.repeat_data_body_info ::Google::Showcase::V1beta1::RepeatRequest.new(name: name, info: info,
                                                                                  server_verify: server_verify, f_int32: f_int32, f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double) do |result, response|
        assert_equal http_response, response
      end

      # Use hash object with options
      client.repeat_data_body_info(
        { name: name, info: info, server_verify: server_verify, f_int32: f_int32, f_int64: f_int64, f_double: f_double,
p_int32: p_int32, p_int64: p_int64, p_double: p_double }, call_options
      ) do |result, response|
        assert_equal http_response, response
      end

      # Use protobuf object with options
      client.repeat_data_body_info(
        ::Google::Showcase::V1beta1::RepeatRequest.new(name: name, info: info, server_verify: server_verify, f_int32: f_int32,
                                                       f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double), call_options
      ) do |result, response|
        assert_equal http_response, response
      end

      # Verify method calls
      assert_equal 5, repeat_data_body_info_client_stub.call_count
    end
  end

  def test_repeat_data_query
    # Create test objects.
    client_result = ::Google::Showcase::V1beta1::RepeatResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    info = {}
    server_verify = true
    f_int32 = 42
    f_int64 = 42
    f_double = 3.5
    p_int32 = 42
    p_int64 = 42
    p_double = 3.5

    repeat_data_query_client_stub = ClientStub.new http_response do |verb, uri:, body:, params:, options:|
      assert_equal :get, verb

      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    Gapic::Rest::ClientStub.stub :new, repeat_data_query_client_stub do
      # Create client
      client = ::Google::Showcase::V1beta1::Compliance::Rest::Client.new do |config|
        config.credentials = :dummy_value
      end

      # Use hash object
      client.repeat_data_query({ name: name, info: info, server_verify: server_verify, f_int32: f_int32,
f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double }) do |result, response|
        assert_equal http_response, response
      end

      # Use named arguments
      client.repeat_data_query name: name, info: info, server_verify: server_verify, f_int32: f_int32,
                               f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double do |result, response|
        assert_equal http_response, response
      end

      # Use protobuf object
      client.repeat_data_query ::Google::Showcase::V1beta1::RepeatRequest.new(name: name, info: info,
                                                                              server_verify: server_verify, f_int32: f_int32, f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double) do |result, response|
        assert_equal http_response, response
      end

      # Use hash object with options
      client.repeat_data_query(
        { name: name, info: info, server_verify: server_verify, f_int32: f_int32, f_int64: f_int64, f_double: f_double,
p_int32: p_int32, p_int64: p_int64, p_double: p_double }, call_options
      ) do |result, response|
        assert_equal http_response, response
      end

      # Use protobuf object with options
      client.repeat_data_query(
        ::Google::Showcase::V1beta1::RepeatRequest.new(name: name, info: info, server_verify: server_verify, f_int32: f_int32,
                                                       f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double), call_options
      ) do |result, response|
        assert_equal http_response, response
      end

      # Verify method calls
      assert_equal 5, repeat_data_query_client_stub.call_count
    end
  end

  def test_repeat_data_simple_path
    # Create test objects.
    client_result = ::Google::Showcase::V1beta1::RepeatResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    info = {}
    server_verify = true
    f_int32 = 42
    f_int64 = 42
    f_double = 3.5
    p_int32 = 42
    p_int64 = 42
    p_double = 3.5

    repeat_data_simple_path_client_stub = ClientStub.new http_response do |verb, uri:, body:, params:, options:|
      assert_equal :get, verb

      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    Gapic::Rest::ClientStub.stub :new, repeat_data_simple_path_client_stub do
      # Create client
      client = ::Google::Showcase::V1beta1::Compliance::Rest::Client.new do |config|
        config.credentials = :dummy_value
      end

      # Use hash object
      client.repeat_data_simple_path({ name: name, info: info, server_verify: server_verify, f_int32: f_int32,
f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double }) do |result, response|
        assert_equal http_response, response
      end

      # Use named arguments
      client.repeat_data_simple_path name: name, info: info, server_verify: server_verify, f_int32: f_int32,
                                     f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double do |result, response|
        assert_equal http_response, response
      end

      # Use protobuf object
      client.repeat_data_simple_path ::Google::Showcase::V1beta1::RepeatRequest.new(name: name, info: info,
                                                                                    server_verify: server_verify, f_int32: f_int32, f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double) do |result, response|
        assert_equal http_response, response
      end

      # Use hash object with options
      client.repeat_data_simple_path(
        { name: name, info: info, server_verify: server_verify, f_int32: f_int32, f_int64: f_int64, f_double: f_double,
p_int32: p_int32, p_int64: p_int64, p_double: p_double }, call_options
      ) do |result, response|
        assert_equal http_response, response
      end

      # Use protobuf object with options
      client.repeat_data_simple_path(
        ::Google::Showcase::V1beta1::RepeatRequest.new(name: name, info: info, server_verify: server_verify, f_int32: f_int32,
                                                       f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double), call_options
      ) do |result, response|
        assert_equal http_response, response
      end

      # Verify method calls
      assert_equal 5, repeat_data_simple_path_client_stub.call_count
    end
  end

  def test_repeat_data_path_resource
    # Create test objects.
    client_result = ::Google::Showcase::V1beta1::RepeatResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    info = {}
    server_verify = true
    f_int32 = 42
    f_int64 = 42
    f_double = 3.5
    p_int32 = 42
    p_int64 = 42
    p_double = 3.5

    repeat_data_path_resource_client_stub = ClientStub.new http_response do |verb, uri:, body:, params:, options:|
      assert_equal :get, verb

      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    Gapic::Rest::ClientStub.stub :new, repeat_data_path_resource_client_stub do
      # Create client
      client = ::Google::Showcase::V1beta1::Compliance::Rest::Client.new do  |config|
        config.credentials = :dummy_value
      end

      # Use hash object
      client.repeat_data_path_resource({ name: name, info: info, server_verify: server_verify, f_int32: f_int32,
f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double }) do |result, response|
        assert_equal http_response, response
      end

      # Use named arguments
      client.repeat_data_path_resource name: name, info: info, server_verify: server_verify, f_int32: f_int32,
                                       f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double do |result, response|
        assert_equal http_response, response
      end

      # Use protobuf object
      client.repeat_data_path_resource ::Google::Showcase::V1beta1::RepeatRequest.new(name: name, info: info,
                                                                                      server_verify: server_verify, f_int32: f_int32, f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double) do |result, response|
        assert_equal http_response, response
      end

      # Use hash object with options
      client.repeat_data_path_resource(
        { name: name, info: info, server_verify: server_verify, f_int32: f_int32, f_int64: f_int64, f_double: f_double,
p_int32: p_int32, p_int64: p_int64, p_double: p_double }, call_options
      ) do |result, response|
        assert_equal http_response, response
      end

      # Use protobuf object with options
      client.repeat_data_path_resource(
        ::Google::Showcase::V1beta1::RepeatRequest.new(name: name, info: info, server_verify: server_verify, f_int32: f_int32,
                                                       f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double), call_options
      ) do |result, response|
        assert_equal http_response, response
      end

      # Verify method calls
      assert_equal 5, repeat_data_path_resource_client_stub.call_count
    end
  end

  def test_repeat_data_path_trailing_resource
    # Create test objects.
    client_result = ::Google::Showcase::V1beta1::RepeatResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    info = {}
    server_verify = true
    f_int32 = 42
    f_int64 = 42
    f_double = 3.5
    p_int32 = 42
    p_int64 = 42
    p_double = 3.5

    repeat_data_path_trailing_resource_client_stub = ClientStub.new http_response do |verb, uri:, body:, params:, options:|
      assert_equal :get, verb

      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    Gapic::Rest::ClientStub.stub :new, repeat_data_path_trailing_resource_client_stub do
      # Create client
      client = ::Google::Showcase::V1beta1::Compliance::Rest::Client.new do |config|
        config.credentials = :dummy_value
      end

      # Use hash object
      client.repeat_data_path_trailing_resource({ name: name, info: info, server_verify: server_verify,
f_int32: f_int32, f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double }) do |result, response|
        assert_equal http_response, response
      end

      # Use named arguments
      client.repeat_data_path_trailing_resource name: name, info: info, server_verify: server_verify, f_int32: f_int32,
                                                f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double do |result, response|
        assert_equal http_response, response
      end

      # Use protobuf object
      client.repeat_data_path_trailing_resource ::Google::Showcase::V1beta1::RepeatRequest.new(name: name, info: info,
                                                                                               server_verify: server_verify, f_int32: f_int32, f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double) do |result, response|
        assert_equal http_response, response
      end

      # Use hash object with options
      client.repeat_data_path_trailing_resource(
        { name: name, info: info, server_verify: server_verify, f_int32: f_int32, f_int64: f_int64, f_double: f_double,
p_int32: p_int32, p_int64: p_int64, p_double: p_double }, call_options
      ) do |result, response|
        assert_equal http_response, response
      end

      # Use protobuf object with options
      client.repeat_data_path_trailing_resource(
        ::Google::Showcase::V1beta1::RepeatRequest.new(name: name, info: info, server_verify: server_verify, f_int32: f_int32,
                                                       f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double), call_options
      ) do |result, response|
        assert_equal http_response, response
      end

      # Verify method calls
      assert_equal 5, repeat_data_path_trailing_resource_client_stub.call_count
    end
  end

  def test_repeat_data_body_put
    # Create test objects.
    client_result = ::Google::Showcase::V1beta1::RepeatResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    info = {}
    server_verify = true
    f_int32 = 42
    f_int64 = 42
    f_double = 3.5
    p_int32 = 42
    p_int64 = 42
    p_double = 3.5

    repeat_data_body_put_client_stub = ClientStub.new http_response do |verb, uri:, body:, params:, options:|
      assert_equal :put, verb

      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    Gapic::Rest::ClientStub.stub :new, repeat_data_body_put_client_stub do
      # Create client
      client = ::Google::Showcase::V1beta1::Compliance::Rest::Client.new do |config|
        config.credentials = :dummy_value
      end

      # Use hash object
      client.repeat_data_body_put({ name: name, info: info, server_verify: server_verify, f_int32: f_int32,
f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double }) do |result, response|
        assert_equal http_response, response
      end

      # Use named arguments
      client.repeat_data_body_put name: name, info: info, server_verify: server_verify, f_int32: f_int32,
                                  f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double do |result, response|
        assert_equal http_response, response
      end

      # Use protobuf object
      client.repeat_data_body_put ::Google::Showcase::V1beta1::RepeatRequest.new(name: name, info: info,
                                                                                 server_verify: server_verify, f_int32: f_int32, f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double) do |result, response|
        assert_equal http_response, response
      end

      # Use hash object with options
      client.repeat_data_body_put(
        { name: name, info: info, server_verify: server_verify, f_int32: f_int32, f_int64: f_int64, f_double: f_double,
p_int32: p_int32, p_int64: p_int64, p_double: p_double }, call_options
      ) do |result, response|
        assert_equal http_response, response
      end

      # Use protobuf object with options
      client.repeat_data_body_put(
        ::Google::Showcase::V1beta1::RepeatRequest.new(name: name, info: info, server_verify: server_verify, f_int32: f_int32,
                                                       f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double), call_options
      ) do |result, response|
        assert_equal http_response, response
      end

      # Verify method calls
      assert_equal 5, repeat_data_body_put_client_stub.call_count
    end
  end

  def test_repeat_data_body_patch
    # Create test objects.
    client_result = ::Google::Showcase::V1beta1::RepeatResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    info = {}
    server_verify = true
    f_int32 = 42
    f_int64 = 42
    f_double = 3.5
    p_int32 = 42
    p_int64 = 42
    p_double = 3.5

    repeat_data_body_patch_client_stub = ClientStub.new http_response do |verb, uri:, body:, params:, options:|
      assert_equal :patch, verb

      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    Gapic::Rest::ClientStub.stub :new, repeat_data_body_patch_client_stub do
      # Create client
      client = ::Google::Showcase::V1beta1::Compliance::Rest::Client.new do |config|
        config.credentials = :dummy_value
      end

      # Use hash object
      client.repeat_data_body_patch({ name: name, info: info, server_verify: server_verify, f_int32: f_int32,
f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double }) do |result, response|
        assert_equal http_response, response
      end

      # Use named arguments
      client.repeat_data_body_patch name: name, info: info, server_verify: server_verify, f_int32: f_int32,
                                    f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double do |result, response|
        assert_equal http_response, response
      end

      # Use protobuf object
      client.repeat_data_body_patch ::Google::Showcase::V1beta1::RepeatRequest.new(name: name, info: info,
                                                                                   server_verify: server_verify, f_int32: f_int32, f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double) do |result, response|
        assert_equal http_response, response
      end

      # Use hash object with options
      client.repeat_data_body_patch(
        { name: name, info: info, server_verify: server_verify, f_int32: f_int32, f_int64: f_int64, f_double: f_double,
p_int32: p_int32, p_int64: p_int64, p_double: p_double }, call_options
      ) do |result, response|
        assert_equal http_response, response
      end

      # Use protobuf object with options
      client.repeat_data_body_patch(
        ::Google::Showcase::V1beta1::RepeatRequest.new(name: name, info: info, server_verify: server_verify, f_int32: f_int32,
                                                       f_int64: f_int64, f_double: f_double, p_int32: p_int32, p_int64: p_int64, p_double: p_double), call_options
      ) do |result, response|
        assert_equal http_response, response
      end

      # Verify method calls
      assert_equal 5, repeat_data_body_patch_client_stub.call_count
    end
  end

  def test_configure
    credentials_token = :dummy_value

    client = block_config = config = nil
    Gapic::Rest::ClientStub.stub :new, nil do
      client = ::Google::Showcase::V1beta1::Compliance::Rest::Client.new do |config|
        config.credentials = credentials_token
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Showcase::V1beta1::Compliance::Rest::Client::Configuration, config
  end
end
