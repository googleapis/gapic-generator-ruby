# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/showcase/v1beta1/sequence_pb"
require "google/showcase/v1beta1/sequence_services_pb"
require "google/showcase/v1beta1/sequence_service"

class ::Google::Showcase::V1beta1::SequenceService::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_create_sequence
    # Create GRPC objects.
    grpc_response = ::Google::Showcase::V1beta1::Sequence.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    sequence = {}

    create_sequence_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :create_sequence, name
      assert_kind_of ::Google::Showcase::V1beta1::CreateSequenceRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Showcase::V1beta1::Sequence), request["sequence"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, create_sequence_client_stub do
      # Create client
      client = ::Google::Showcase::V1beta1::SequenceService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.create_sequence({ sequence: sequence }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.create_sequence sequence: sequence do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.create_sequence ::Google::Showcase::V1beta1::CreateSequenceRequest.new(sequence: sequence) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.create_sequence({ sequence: sequence }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.create_sequence(::Google::Showcase::V1beta1::CreateSequenceRequest.new(sequence: sequence), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, create_sequence_client_stub.call_rpc_count
    end
  end

  def test_create_streaming_sequence
    # Create GRPC objects.
    grpc_response = ::Google::Showcase::V1beta1::StreamingSequence.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    streaming_sequence = {}

    create_streaming_sequence_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :create_streaming_sequence, name
      assert_kind_of ::Google::Showcase::V1beta1::CreateStreamingSequenceRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Showcase::V1beta1::StreamingSequence), request["streaming_sequence"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, create_streaming_sequence_client_stub do
      # Create client
      client = ::Google::Showcase::V1beta1::SequenceService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.create_streaming_sequence({ streaming_sequence: streaming_sequence }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.create_streaming_sequence streaming_sequence: streaming_sequence do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.create_streaming_sequence ::Google::Showcase::V1beta1::CreateStreamingSequenceRequest.new(streaming_sequence: streaming_sequence) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.create_streaming_sequence({ streaming_sequence: streaming_sequence }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.create_streaming_sequence(::Google::Showcase::V1beta1::CreateStreamingSequenceRequest.new(streaming_sequence: streaming_sequence), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, create_streaming_sequence_client_stub.call_rpc_count
    end
  end

  def test_get_sequence_report
    # Create GRPC objects.
    grpc_response = ::Google::Showcase::V1beta1::SequenceReport.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    get_sequence_report_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_sequence_report, name
      assert_kind_of ::Google::Showcase::V1beta1::GetSequenceReportRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_sequence_report_client_stub do
      # Create client
      client = ::Google::Showcase::V1beta1::SequenceService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_sequence_report({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_sequence_report name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_sequence_report ::Google::Showcase::V1beta1::GetSequenceReportRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_sequence_report({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_sequence_report(::Google::Showcase::V1beta1::GetSequenceReportRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_sequence_report_client_stub.call_rpc_count
    end
  end

  def test_get_streaming_sequence_report
    # Create GRPC objects.
    grpc_response = ::Google::Showcase::V1beta1::StreamingSequenceReport.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    get_streaming_sequence_report_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_streaming_sequence_report, name
      assert_kind_of ::Google::Showcase::V1beta1::GetStreamingSequenceReportRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_streaming_sequence_report_client_stub do
      # Create client
      client = ::Google::Showcase::V1beta1::SequenceService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_streaming_sequence_report({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_streaming_sequence_report name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_streaming_sequence_report ::Google::Showcase::V1beta1::GetStreamingSequenceReportRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_streaming_sequence_report({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_streaming_sequence_report(::Google::Showcase::V1beta1::GetStreamingSequenceReportRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_streaming_sequence_report_client_stub.call_rpc_count
    end
  end

  def test_attempt_sequence
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    attempt_sequence_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :attempt_sequence, name
      assert_kind_of ::Google::Showcase::V1beta1::AttemptSequenceRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, attempt_sequence_client_stub do
      # Create client
      client = ::Google::Showcase::V1beta1::SequenceService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.attempt_sequence({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.attempt_sequence name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.attempt_sequence ::Google::Showcase::V1beta1::AttemptSequenceRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.attempt_sequence({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.attempt_sequence(::Google::Showcase::V1beta1::AttemptSequenceRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, attempt_sequence_client_stub.call_rpc_count
    end
  end

  def test_attempt_streaming_sequence
    # Create GRPC objects.
    grpc_response = ::Google::Showcase::V1beta1::AttemptStreamingSequenceResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a server streaming method.
    name = "hello world"
    last_fail_index = 42

    attempt_streaming_sequence_client_stub = ClientStub.new [grpc_response].to_enum, grpc_operation do |name, request, options:|
      assert_equal :attempt_streaming_sequence, name
      assert_kind_of ::Google::Showcase::V1beta1::AttemptStreamingSequenceRequest, request
      assert_equal "hello world", request["name"]
      assert_equal 42, request["last_fail_index"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, attempt_streaming_sequence_client_stub do
      # Create client
      client = ::Google::Showcase::V1beta1::SequenceService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.attempt_streaming_sequence({ name: name, last_fail_index: last_fail_index }) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Showcase::V1beta1::AttemptStreamingSequenceResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.attempt_streaming_sequence name: name, last_fail_index: last_fail_index do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Showcase::V1beta1::AttemptStreamingSequenceResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.attempt_streaming_sequence ::Google::Showcase::V1beta1::AttemptStreamingSequenceRequest.new(name: name, last_fail_index: last_fail_index) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Showcase::V1beta1::AttemptStreamingSequenceResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.attempt_streaming_sequence({ name: name, last_fail_index: last_fail_index }, grpc_options) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Showcase::V1beta1::AttemptStreamingSequenceResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.attempt_streaming_sequence(::Google::Showcase::V1beta1::AttemptStreamingSequenceRequest.new(name: name, last_fail_index: last_fail_index), grpc_options) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Showcase::V1beta1::AttemptStreamingSequenceResponse, r
        end
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, attempt_streaming_sequence_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Showcase::V1beta1::SequenceService::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Showcase::V1beta1::SequenceService::Client::Configuration, config
  end
end
