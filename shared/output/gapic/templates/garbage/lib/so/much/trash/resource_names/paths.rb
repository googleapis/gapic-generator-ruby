# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module So
  module Much
    module Trash
      module ResourceNames
        # Path helper methods for the ResourceNames API.
        module Paths
          ##
          # Create a fully-qualified NonSlashMultiPattern resource string.
          #
          # @overload non_slash_multi_pattern_path(customer:, ad_group_id:, ad_id:)
          #   The resource will be in the following format:
          #
          #   `customers/{customer}/adGroupAds/{ad_group_id}~{ad_id}`
          #
          #   @param customer [String]
          #   @param ad_group_id [String]
          #   @param ad_id [String]
          #
          # @overload non_slash_multi_pattern_path(customer_1:, customer_2:, ad_group_id:, ad_id:, third_id:)
          #   The resource will be in the following format:
          #
          #   `customers/{customer_1}-{customer_2}/adGroupAds/{ad_group_id}~{ad_id}_{third_id}`
          #
          #   @param customer_1 [String]
          #   @param customer_2 [String]
          #   @param ad_group_id [String]
          #   @param ad_id [String]
          #   @param third_id [String]
          #
          # @return [String]
          def non_slash_multi_pattern_path **args
            resources = {
              "ad_group_id:ad_id:customer"                       => (proc do |customer:, ad_group_id:, ad_id:|
                raise ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"
                raise ArgumentError, "ad_group_id cannot contain /" if ad_group_id.to_s.include? "/"

                "customers/#{customer}/adGroupAds/#{ad_group_id}~#{ad_id}"
              end),
              "ad_group_id:ad_id:customer_1:customer_2:third_id" => (proc do |customer_1:, customer_2:, ad_group_id:, ad_id:, third_id:|
                raise ArgumentError, "customer_1 cannot contain /" if customer_1.to_s.include? "/"
                raise ArgumentError, "customer_2 cannot contain /" if customer_2.to_s.include? "/"
                raise ArgumentError, "ad_group_id cannot contain /" if ad_group_id.to_s.include? "/"
                raise ArgumentError, "ad_id cannot contain /" if ad_id.to_s.include? "/"

                "customers/#{customer_1}-#{customer_2}/adGroupAds/#{ad_group_id}~#{ad_id}_#{third_id}"
              end)
            }

            resource = resources[args.keys.sort.join(":")]
            raise ArgumentError, "no resource found for values #{args.keys}" if resource.nil?
            resource.call(**args)
          end

          ##
          # Create a fully-qualified SinglePattern resource string.
          #
          # The resource will be in the following format:
          #
          # `items/{item_id}`
          #
          # @param item_id [String]
          #
          # @return [String]
          def single_pattern_path item_id:
            "items/#{item_id}"
          end

          extend self
        end
      end
    end
  end
end
