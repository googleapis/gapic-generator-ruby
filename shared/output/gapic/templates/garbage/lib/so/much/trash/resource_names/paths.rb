# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module So
  module Much
    module Trash
      module ResourceNames
        # Path helper methods for the ResourceNames API.
        module Paths
          ##
          # Create a fully-qualified ComplexPatternLogParent resource string.
          #
          # The resource will be in the following format:
          #
          # `returns/{return_order}~{return_item}`
          #
          # @param return_order [String]
          # @param return_item [String]
          #
          # @return [::String]
          def complex_pattern_log_parent_path return_order:, return_item:
            raise ::ArgumentError, "return_order cannot contain /" if return_order.to_s.include? "/"

            "returns/#{return_order}~#{return_item}"
          end

          ##
          # Create a fully-qualified ComplexPatternNonParentResource resource string.
          #
          # The resource will be in the following format:
          #
          # `orders/{order_a}~{order_b}`
          #
          # @param order_a [String]
          # @param order_b [String]
          #
          # @return [::String]
          def complex_pattern_non_parent_resource_path order_a:, order_b:
            raise ::ArgumentError, "order_a cannot contain /" if order_a.to_s.include? "/"

            "orders/#{order_a}~#{order_b}"
          end

          ##
          # Create a fully-qualified ComplexPatternRequest resource string.
          #
          # @overload complex_pattern_request_path(customer:, item_a_id:, item_b_id:, items_c_id:, details_a_id:, details_b_id:, details_c_id:, extra_id:)
          #   The resource will be in the following format:
          #
          #   `customers/{customer}/items/{item_a_id}.{item_b_id}~{items_c_id}/details/{details_a_id}_{details_b_id}-{details_c_id}/extra/{extra_id}`
          #
          #   @param customer [String]
          #   @param item_a_id [String]
          #   @param item_b_id [String]
          #   @param items_c_id [String]
          #   @param details_a_id [String]
          #   @param details_b_id [String]
          #   @param details_c_id [String]
          #   @param extra_id [String]
          #
          # @overload complex_pattern_request_path(request:)
          #   The resource will be in the following format:
          #
          #   `complexrequests/{request}`
          #
          #   @param request [String]
          #
          # @return [::String]
          def complex_pattern_request_path **args
            resources = {
              "customer:details_a_id:details_b_id:details_c_id:extra_id:item_a_id:item_b_id:items_c_id" => (proc do |customer:, item_a_id:, item_b_id:, items_c_id:, details_a_id:, details_b_id:, details_c_id:, extra_id:|
                raise ::ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"
                raise ::ArgumentError, "item_a_id cannot contain /" if item_a_id.to_s.include? "/"
                raise ::ArgumentError, "item_b_id cannot contain /" if item_b_id.to_s.include? "/"
                raise ::ArgumentError, "items_c_id cannot contain /" if items_c_id.to_s.include? "/"
                raise ::ArgumentError, "details_a_id cannot contain /" if details_a_id.to_s.include? "/"
                raise ::ArgumentError, "details_b_id cannot contain /" if details_b_id.to_s.include? "/"
                raise ::ArgumentError, "details_c_id cannot contain /" if details_c_id.to_s.include? "/"

                "customers/#{customer}/items/#{item_a_id}.#{item_b_id}~#{items_c_id}/details/#{details_a_id}_#{details_b_id}-#{details_c_id}/extra/#{extra_id}"
              end),
              "request" => (proc do |request:|
                "complexrequests/#{request}"
              end)
            }

            resource = resources[args.keys.sort.join(":")]
            raise ::ArgumentError, "no resource found for values #{args.keys}" if resource.nil?
            resource.call(**args)
          end

          ##
          # Create a fully-qualified ComplexPatternResource resource string.
          #
          # The resource will be in the following format:
          #
          # `customers/{customer}/items/{item_a}.{item_b}~{items_c}`
          #
          # @param customer [String]
          # @param item_a [String]
          # @param item_b [String]
          # @param items_c [String]
          #
          # @return [::String]
          def complex_pattern_resource_path customer:, item_a:, item_b:, items_c:
            raise ::ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"
            raise ::ArgumentError, "item_a cannot contain /" if item_a.to_s.include? "/"
            raise ::ArgumentError, "item_b cannot contain /" if item_b.to_s.include? "/"

            "customers/#{customer}/items/#{item_a}.#{item_b}~#{items_c}"
          end

          ##
          # Create a fully-qualified NoArgumentsMulti resource string.
          #
          # @overload no_arguments_multi_path(project:, widget:)
          #   The resource will be in the following format:
          #
          #   `projects/{project}/widgets/{widget}`
          #
          #   @param project [String]
          #   @param widget [String]
          #
          # @overload no_arguments_multi_path()
          #   The resource will be in the following format:
          #
          #   `_default-widget_`
          #
          # @return [::String]
          def no_arguments_multi_path **args
            resources = {
              "project:widget" => (proc do |project:, widget:|
                raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"

                "projects/#{project}/widgets/#{widget}"
              end),
              "" => (proc do
                "_default-widget_"
              end)
            }

            resource = resources[args.keys.sort.join(":")]
            raise ::ArgumentError, "no resource found for values #{args.keys}" if resource.nil?
            resource.call(**args)
          end

          ##
          # Create a fully-qualified ResourceNamePatternRequest resource string.
          #
          # @overload resource_name_pattern_request_path(customer:, path:)
          #   The resource will be in the following format:
          #
          #   `customers/{customer}/path/{path=**}`
          #
          #   @param customer [String]
          #   @param path [String]
          #
          # @overload resource_name_pattern_request_path(request:)
          #   The resource will be in the following format:
          #
          #   `patternrequests/{request}`
          #
          #   @param request [String]
          #
          # @return [::String]
          def resource_name_pattern_request_path **args
            resources = {
              "customer:path" => (proc do |customer:, path:|
                raise ::ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/path/#{path}"
              end),
              "request" => (proc do |request:|
                "patternrequests/#{request}"
              end)
            }

            resource = resources[args.keys.sort.join(":")]
            raise ::ArgumentError, "no resource found for values #{args.keys}" if resource.nil?
            resource.call(**args)
          end

          ##
          # Create a fully-qualified SimplePatternLogParent resource string.
          #
          # The resource will be in the following format:
          #
          # `transactions/{transaction}`
          #
          # @param transaction [String]
          #
          # @return [::String]
          def simple_pattern_log_parent_path transaction:
            "transactions/#{transaction}"
          end

          ##
          # Create a fully-qualified SimplePatternNonParentResource resource string.
          #
          # The resource will be in the following format:
          #
          # `locations/{location}`
          #
          # @param location [String]
          #
          # @return [::String]
          def simple_pattern_non_parent_resource_path location:
            "locations/#{location}"
          end

          ##
          # Create a fully-qualified SimplePatternRequest resource string.
          #
          # @overload simple_pattern_request_path(customer:, thing:)
          #   The resource will be in the following format:
          #
          #   `customers/{customer}/things/{thing}`
          #
          #   @param customer [String]
          #   @param thing [String]
          #
          # @overload simple_pattern_request_path(request:)
          #   The resource will be in the following format:
          #
          #   `simplerequests/{request}`
          #
          #   @param request [String]
          #
          # @return [::String]
          def simple_pattern_request_path **args
            resources = {
              "customer:thing" => (proc do |customer:, thing:|
                raise ::ArgumentError, "customer cannot contain /" if customer.to_s.include? "/"

                "customers/#{customer}/things/#{thing}"
              end),
              "request" => (proc do |request:|
                "simplerequests/#{request}"
              end)
            }

            resource = resources[args.keys.sort.join(":")]
            raise ::ArgumentError, "no resource found for values #{args.keys}" if resource.nil?
            resource.call(**args)
          end

          ##
          # Create a fully-qualified SimplePatternResource resource string.
          #
          # The resource will be in the following format:
          #
          # `customers/{customer}`
          #
          # @param customer [String]
          #
          # @return [::String]
          def simple_pattern_resource_path customer:
            "customers/#{customer}"
          end

          extend self
        end
      end
    end
  end
end
