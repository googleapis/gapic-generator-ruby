# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module So
  module Much
    module Trash
      module GarbageService
        # Path helper methods for the GarbageService API.
        module Paths
          ##
          # Create a fully-qualified Project resource string.
          #
          # The resource will be in the following format:
          #
          # `projects/{project}`
          #
          # @param project [String]
          #
          # @return [::String]
          def project_path project:
            "projects/#{project}"
          end

          ##
          # Create a fully-qualified SimpleGarbage resource string.
          #
          # The resource will be in the following format:
          #
          # `projects/{project}/simple_garbage/{simple_garbage}`
          #
          # @param project [String]
          # @param simple_garbage [String]
          #
          # @return [::String]
          def simple_garbage_path project:, simple_garbage:
            raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"

            "projects/#{project}/simple_garbage/#{simple_garbage}"
          end

          ##
          # Create a fully-qualified SpecificGarbage resource string.
          #
          # The resource will be in the following format:
          #
          # `projects/{project}/specific_garbage/{specific_garbage}`
          #
          # @param project [String]
          # @param specific_garbage [String]
          #
          # @return [::String]
          def specific_garbage_path project:, specific_garbage:
            raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"

            "projects/#{project}/specific_garbage/#{specific_garbage}"
          end

          ##
          # Create a fully-qualified TypicalGarbage resource string.
          #
          # @overload typical_garbage_path(project:, typical_garbage_1:)
          #   The resource will be in the following format:
          #
          #   `projects/{project}/typical_garbage_1/{typical_garbage_1}`
          #
          #   @param project [String]
          #   @param typical_garbage_1 [String]
          #
          # @overload typical_garbage_path(project:, typical_garbage_2:)
          #   The resource will be in the following format:
          #
          #   `projects/{project}/typical_garbage_2/{typical_garbage_2}`
          #
          #   @param project [String]
          #   @param typical_garbage_2 [String]
          #
          # @return [::String]
          def typical_garbage_path **args
            resources = {
              "project:typical_garbage_1" => (proc do |project:, typical_garbage_1:|
                raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"

                "projects/#{project}/typical_garbage_1/#{typical_garbage_1}"
              end),
              "project:typical_garbage_2" => (proc do |project:, typical_garbage_2:|
                raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"

                "projects/#{project}/typical_garbage_2/#{typical_garbage_2}"
              end)
            }

            resource = resources[args.keys.sort.join(":")]
            raise ::ArgumentError, "no resource found for values #{args.keys}" if resource.nil?
            resource.call(**args)
          end

          extend self
        end
      end
    end
  end
end
