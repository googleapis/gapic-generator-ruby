# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "garbage/garbage_pb"

module So
  module Much
    module Trash
      module GarbageService
        ##
        # Client for the GarbageService service.
        #
        # Endless trash
        #
        class Client
          include Paths

          # @private
          attr_reader :garbage_service_stub

          ##
          # Configure the GarbageService Client class.
          #
          # See {::So::Much::Trash::GarbageService::Client::Configuration}
          # for a description of the configuration fields.
          #
          # ## Example
          #
          # To modify the configuration for all GarbageService clients:
          #
          #     ::So::Much::Trash::GarbageService::Client.configure do |config|
          #       config.timeout = 10.0
          #     end
          #
          # @yield [config] Configure the Client client.
          # @yieldparam config [Client::Configuration]
          #
          # @return [Client::Configuration]
          #
          def self.configure
            @configure ||= begin
              default_config = Client::Configuration.new

              default_config
            end
            yield @configure if block_given?
            @configure
          end

          ##
          # Configure the GarbageService Client instance.
          #
          # The configuration is set to the derived mode, meaning that values can be changed,
          # but structural changes (adding new fields, etc.) are not allowed. Structural changes
          # should be made on {Client.configure}.
          #
          # See {::So::Much::Trash::GarbageService::Client::Configuration}
          # for a description of the configuration fields.
          #
          # @yield [config] Configure the Client client.
          # @yieldparam config [Client::Configuration]
          #
          # @return [Client::Configuration]
          #
          def configure
            yield @config if block_given?
            @config
          end

          ##
          # Create a new GarbageService client object.
          #
          # ## Examples
          #
          # To create a new GarbageService client with the default
          # configuration:
          #
          #     client = ::So::Much::Trash::GarbageService::Client.new
          #
          # To create a new GarbageService client with a custom
          # configuration:
          #
          #     client = ::So::Much::Trash::GarbageService::Client.new do |config|
          #       config.timeout = 10.0
          #     end
          #
          # @yield [config] Configure the GarbageService client.
          # @yieldparam config [Client::Configuration]
          #
          def initialize
            # These require statements are intentionally placed here to initialize
            # the gRPC module only when it's required.
            # See https://github.com/googleapis/toolkit/issues/446
            require "gapic/grpc"
            require "garbage/garbage_services_pb"

            # Create the configuration object
            @config = Configuration.new Client.configure

            # Yield the configuration if needed
            yield @config if block_given?

            # Create credentials
            credentials = @config.credentials
            credentials ||= Credentials.default scope: @config.scope
            if credentials.is_a?(String) || credentials.is_a?(Hash)
              credentials = Credentials.new credentials, scope: @config.scope
            end
            @quota_project_id = @config.quota_project
            @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

            @operations_client = Operations.new do |config|
              config.credentials = credentials
              config.endpoint = @config.endpoint
            end

            @garbage_service_stub = ::Gapic::ServiceStub.new(
              ::So::Much::Trash::GarbageService::Stub,
              credentials:  credentials,
              endpoint:     @config.endpoint,
              channel_args: @config.channel_args,
              interceptors: @config.interceptors
            )
          end

          ##
          # Get the associated client for long-running operations.
          #
          # @return [::So::Much::Trash::GarbageService::Operations]
          #
          attr_reader :operations_client

          # Service calls

          ##
          # Retrieves an EmptyGarbage resource
          #
          # @overload get_empty_garbage(request, options = nil)
          #   Pass arguments to `get_empty_garbage` via a request object, either of type
          #   {::So::Much::Trash::EmptyGarbage} or an equivalent Hash.
          #
          #   @param request [::So::Much::Trash::EmptyGarbage, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::So::Much::Trash::EmptyGarbage]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::So::Much::Trash::EmptyGarbage]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          def get_empty_garbage request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::So::Much::Trash::EmptyGarbage

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_empty_garbage.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Garbage::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_empty_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_empty_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_empty_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Retrieves a SimpleGarbage resource.
          #
          # @overload get_simple_garbage(request, options = nil)
          #   Pass arguments to `get_simple_garbage` via a request object, either of type
          #   {::So::Much::Trash::SimpleGarbage} or an equivalent Hash.
          #
          #   @param request [::So::Much::Trash::SimpleGarbage, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_simple_garbage(name: nil)
          #   Pass arguments to `get_simple_garbage` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param name [::String]
          #     The name of this garbage.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::So::Much::Trash::SimpleGarbage]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::So::Much::Trash::SimpleGarbage]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Getting garbage
          #   require "so/much/trash/garbage_service"
          #
          #   client = ::So::Much::Trash::GarbageService::Client.new
          #
          #   name = "Simple Garbage"
          #
          #   response = client.get_simple_garbage name: name
          #
          #   # The garbage resource
          #   garbage = response
          #
          #   # Print the garbage resource
          #   puts "Garbage: #{garbage.name}"
          #
          # @example Getting garbage from file using variable
          #   require "so/much/trash/garbage_service"
          #
          #   client = ::So::Much::Trash::GarbageService::Client.new
          #
          #   # Get the garbage name from a file.
          #   name = File.read "path/to/garbage-name.txt"
          #
          #   response = client.get_simple_garbage name: name
          #
          #   # The garbage resource
          #   garbage = response
          #
          #   # Print the garbage resource
          #   puts "Garbage: #{garbage.name}"
          #
          # @example Getting garbage from file using variable
          #   require "so/much/trash/garbage_service"
          #
          #   client = ::So::Much::Trash::GarbageService::Client.new
          #
          #   garbage_name = File.read "path/to/garbage-name.txt"
          #
          #   # Get the garbage name from a file.
          #   name = garbage_name
          #
          #   response = client.get_simple_garbage name: name
          #
          #   # The garbage resource
          #   garbage = response
          #
          #   # Print the garbage resource
          #   puts "Garbage: #{garbage.name}"
          #
          def get_simple_garbage request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::So::Much::Trash::SimpleGarbage

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_simple_garbage.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Garbage::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_simple_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_simple_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_simple_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Retrieves a SpecificGarbage resource.
          #
          # @overload get_specific_garbage(request, options = nil)
          #   Pass arguments to `get_specific_garbage` via a request object, either of type
          #   {::So::Much::Trash::SpecificGarbage} or an equivalent Hash.
          #
          #   @param request [::So::Much::Trash::SpecificGarbage, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_specific_garbage(name: nil, int32: nil, int64: nil, uint32: nil, uint64: nil, bool: nil, float: nil, double: nil, bytes: nil, enum: nil, nested: nil)
          #   Pass arguments to `get_specific_garbage` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param name [::String]
          #     The name of this garbage.
          #   @param int32 [::Integer]
          #     The int32 of this garbage.
          #   @param int64 [::Integer]
          #     The int64 of this garbage.
          #   @param uint32 [::Integer]
          #     The uint32 of this garbage.
          #   @param uint64 [::Integer]
          #     The uint64 of this garbage.
          #   @param bool [::Boolean]
          #     The bool of this garbage.
          #   @param float [::Float]
          #     The float of this garbage.
          #   @param double [::Float]
          #     The double of this garbage.
          #   @param bytes [::String]
          #     The bytes of this garbage.
          #   @param enum [::So::Much::Trash::GarbageEnum]
          #     The type of this garbage.
          #   @param nested [::So::Much::Trash::SpecificGarbage::NestedGarbage, ::Hash]
          #     The nested garbage resource of this garbage.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::So::Much::Trash::SpecificGarbage]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::So::Much::Trash::SpecificGarbage]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          def get_specific_garbage request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::So::Much::Trash::SpecificGarbage

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_specific_garbage.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Garbage::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_specific_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_specific_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_specific_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Retrieves a NestedGarbage resource.
          #
          # @overload get_nested_garbage(request, options = nil)
          #   Pass arguments to `get_nested_garbage` via a request object, either of type
          #   {::So::Much::Trash::SpecificGarbage::NestedGarbage} or an equivalent Hash.
          #
          #   @param request [::So::Much::Trash::SpecificGarbage::NestedGarbage, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_nested_garbage(name: nil, int32: nil, int64: nil, uint32: nil, uint64: nil, bool: nil, float: nil, double: nil, bytes: nil, enum: nil)
          #   Pass arguments to `get_nested_garbage` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param name [::String]
          #     The name of this garbage.
          #   @param int32 [::Integer]
          #     The int32 of this garbage.
          #   @param int64 [::Integer]
          #     The int64 of this garbage.
          #   @param uint32 [::Integer]
          #     The uint32 of this garbage.
          #   @param uint64 [::Integer]
          #     The uint64 of this garbage.
          #   @param bool [::Boolean]
          #     The bool of this garbage.
          #   @param float [::Float]
          #     The float of this garbage.
          #   @param double [::Float]
          #     The double of this garbage.
          #   @param bytes [::String]
          #     The bytes of this garbage.
          #   @param enum [::So::Much::Trash::GarbageEnum]
          #     The type of this garbage.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::So::Much::Trash::SpecificGarbage::NestedGarbage]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::So::Much::Trash::SpecificGarbage::NestedGarbage]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          def get_nested_garbage request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::So::Much::Trash::SpecificGarbage::NestedGarbage

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_nested_garbage.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Garbage::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_nested_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_nested_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_nested_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Retrieves a RepeatedGarbage resource.
          #
          # @overload get_repeated_garbage(request, options = nil)
          #   Pass arguments to `get_repeated_garbage` via a request object, either of type
          #   {::So::Much::Trash::RepeatedGarbage} or an equivalent Hash.
          #
          #   @param request [::So::Much::Trash::RepeatedGarbage, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_repeated_garbage(repeated_name: nil, repeated_int32: nil, repeated_int64: nil, repeated_uint32: nil, repeated_uint64: nil, repeated_bool: nil, repeated_float: nil, repeated_double: nil, repeated_bytes: nil, repeated_enum: nil)
          #   Pass arguments to `get_repeated_garbage` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param repeated_name [::Array<::String>]
          #     The repeated name of this garbage.
          #   @param repeated_int32 [::Array<::Integer>]
          #     The repeated int32 of this garbage.
          #   @param repeated_int64 [::Array<::Integer>]
          #     The repeated int64 of this garbage.
          #   @param repeated_uint32 [::Array<::Integer>]
          #     The repeated uint32 of this garbage.
          #   @param repeated_uint64 [::Array<::Integer>]
          #     The repeated uint64 of this garbage.
          #   @param repeated_bool [::Array<::Boolean>]
          #     The repeated bool of this garbage.
          #   @param repeated_float [::Array<::Float>]
          #     The repeated float of this garbage.
          #   @param repeated_double [::Array<::Float>]
          #     The repeated double of this garbage.
          #   @param repeated_bytes [::Array<::String>]
          #     The repeated bytes of this garbage.
          #   @param repeated_enum [::Array<::So::Much::Trash::GarbageEnum>]
          #     The repeated type of this garbage.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::So::Much::Trash::RepeatedGarbage]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::So::Much::Trash::RepeatedGarbage]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          def get_repeated_garbage request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::So::Much::Trash::RepeatedGarbage

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_repeated_garbage.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Garbage::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_repeated_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_repeated_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_repeated_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Retrieves a TypicalGarbage resource.
          #
          # @overload get_typical_garbage(request, options = nil)
          #   Pass arguments to `get_typical_garbage` via a request object, either of type
          #   {::So::Much::Trash::TypicalGarbage} or an equivalent Hash.
          #
          #   @param request [::So::Much::Trash::TypicalGarbage, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_typical_garbage(name: nil, int32: nil, int64: nil, uint32: nil, uint64: nil, bool: nil, float: nil, double: nil, bytes: nil, timeout: nil, duration: nil, enum: nil, amap: nil, oneof_singular_str: nil, oneof_pair_int32: nil, oneof_pair_float: nil, oneof_multiple_message: nil, oneof_multiple_bytes: nil, oneof_multiple_enum: nil, oneof_multiple_double: nil, optional_int32: nil)
          #   Pass arguments to `get_typical_garbage` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param name [::String]
          #     The name of this garbage.
          #   @param int32 [::Integer]
          #     The int32 of this garbage.
          #   @param int64 [::Integer]
          #     The int64 of this garbage.
          #   @param uint32 [::Integer]
          #     The uint32 of this garbage.
          #   @param uint64 [::Integer]
          #     The uint64 of this garbage.
          #   @param bool [::Boolean]
          #     The bool of this garbage.
          #   @param float [::Float]
          #     The float of this garbage.
          #   @param double [::Float]
          #     The double of this garbage.
          #   @param bytes [::String]
          #     The bytes of this garbage.
          #   @param timeout [::Google::Protobuf::Timestamp, ::Hash]
          #     When the garbage was first activated.
          #   @param duration [::Google::Protobuf::Duration, ::Hash]
          #     Time limit for this garbage. If not defined, the garbage endures forever.
          #   @param enum [::So::Much::Trash::GarbageEnum]
          #     The type of this garbage.
          #   @param amap [::Hash{::String => ::String}]
          #     This is a map.
          #   @param oneof_singular_str [::String]
          #     This is a one-field oneof's string field.
          #   @param oneof_pair_int32 [::Integer]
          #     This is a pair oneof's int32 field.
          #   @param oneof_pair_float [::Float]
          #     This is a pair oneof's float field.
          #   @param oneof_multiple_message [::So::Much::Trash::SimpleGarbageItem, ::Hash]
          #     This is a multiple-field oneof's message field.
          #   @param oneof_multiple_bytes [::String]
          #     This is a multiple-field oneof's bytes field.
          #   @param oneof_multiple_enum [::So::Much::Trash::GarbageEnum]
          #     This is a multiple-field oneof's enum field.
          #   @param oneof_multiple_double [::Float]
          #     This is a multiple-field oneof's double field.
          #   @param optional_int32 [::Integer]
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::So::Much::Trash::TypicalGarbage]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::So::Much::Trash::TypicalGarbage]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Getting garbage (printing timestamp)
          #   require "so/much/trash/garbage_service"
          #
          #   client = ::So::Much::Trash::GarbageService::Client.new
          #
          #   name = "Typical Garbage"
          #   int32 = 42
          #   bool = true
          #
          #   response = client.get_typical_garbage name: name, int32: int32, bool: bool
          #
          #   # The garbage resource
          #   garbage = response
          #
          #   # The garbage timestamp
          #   timestamp = garbage.timestamp
          #
          #   # Print the garbage resource timestamp
          #   puts "Garbage: #{garbage.name} (#{timestamp})"
          #
          # @example Getting garbage (printing timestamp)
          #   require "so/much/trash/garbage_service"
          #
          #   client = ::So::Much::Trash::GarbageService::Client.new
          #
          #   name = "Typical Garbage"
          #   int32 = 42
          #   bool = true
          #
          #   response = client.get_typical_garbage name: name, int32: int32, bool: bool
          #
          #   # The garbage resource
          #   garbage = response
          #
          #   # The garbage duration
          #   duration = garbage.duration
          #
          #   # Print the garbage resource duration
          #   puts "Garbage: #{garbage.name} (#{duration})"
          #
          # @example Getting garbage (printing msg hash)
          #   require "so/much/trash/garbage_service"
          #
          #   client = ::So::Much::Trash::GarbageService::Client.new
          #
          #   name = "Typical Garbage"
          #   int32 = 42
          #   bool = true
          #
          #   response = client.get_typical_garbage name: name, int32: int32, bool: bool
          #
          #   # Print the garbage resource msg hash
          #   response.msg.map_string_int32.each do |msg_key, msg_value|
          #     puts "Garbage msg key: #{msg_key}, msg value: #{msg_value}"
          #   end
          #
          def get_typical_garbage request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::So::Much::Trash::TypicalGarbage

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_typical_garbage.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Garbage::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_typical_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_typical_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_typical_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Retrieves a TypicalGarbage resource by a request.
          #
          # @overload get_typical_garbage_by_request(request, options = nil)
          #   Pass arguments to `get_typical_garbage_by_request` via a request object, either of type
          #   {::So::Much::Trash::GetTypicalGarbageRequest} or an equivalent Hash.
          #
          #   @param request [::So::Much::Trash::GetTypicalGarbageRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_typical_garbage_by_request(name: nil)
          #   Pass arguments to `get_typical_garbage_by_request` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param name [::String]
          #     The name of the garbage.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::So::Much::Trash::TypicalGarbage]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::So::Much::Trash::TypicalGarbage]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          def get_typical_garbage_by_request request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::So::Much::Trash::GetTypicalGarbageRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_typical_garbage_by_request.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Garbage::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_typical_garbage_by_request.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_typical_garbage_by_request.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_typical_garbage_by_request, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Retrieves a ComplexGarbage resource.
          #
          # @overload get_complex_garbage(request, options = nil)
          #   Pass arguments to `get_complex_garbage` via a request object, either of type
          #   {::So::Much::Trash::ComplexGarbage} or an equivalent Hash.
          #
          #   @param request [::So::Much::Trash::ComplexGarbage, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_complex_garbage(layer1: nil)
          #   Pass arguments to `get_complex_garbage` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param layer1 [::So::Much::Trash::ComplexGarbage::Layer1Garbage, ::Hash]
          #     The first step to total and complete garbage.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::So::Much::Trash::ComplexGarbage]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::So::Much::Trash::ComplexGarbage]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Getting garbage
          #   require "so/much/trash/garbage_service"
          #
          #   client = ::So::Much::Trash::GarbageService::Client.new
          #
          #   layer1 = {
          #     layer2 = {
          #       layer3 = {
          #         garbage = {
          #           name: "Complex Garbage"
          #         }
          #       }
          #     }
          #   }
          #
          #   response = client.get_complex_garbage layer1: layer1
          #
          #   # The garbage resource
          #   garbage = response
          #
          #   # Print the garbage resource
          #   puts "Garbage: #{garbage.layer1.layer2.layer3.garbage.name}"
          #
          # @example Getting garbage (write a file)
          #   require "so/much/trash/garbage_service"
          #
          #   client = ::So::Much::Trash::GarbageService::Client.new
          #
          #   layer1 = {
          #     layer2 = {
          #       layer3 = {
          #         garbage = {
          #           name: "Complex Garbage"
          #         }
          #       }
          #     }
          #   }
          #
          #   response = client.get_complex_garbage layer1: layer1
          #
          #   # Save the garbage resource
          #   File.write "path/to/garbage_name.txt", response.layer1.layer2.layer3.garbage.name
          #
          def get_complex_garbage request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::So::Much::Trash::ComplexGarbage

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_complex_garbage.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Garbage::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_complex_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_complex_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_complex_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Retrieves a GarbageNode resource.
          #
          # @overload get_garbage_node(request, options = nil)
          #   Pass arguments to `get_garbage_node` via a request object, either of type
          #   {::So::Much::Trash::GarbageNode} or an equivalent Hash.
          #
          #   @param request [::So::Much::Trash::GarbageNode, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_garbage_node(data: nil, parent: nil)
          #   Pass arguments to `get_garbage_node` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param data [::String]
          #   @param parent [::So::Much::Trash::GarbageNode, ::Hash]
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::So::Much::Trash::GarbageNode]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::So::Much::Trash::GarbageNode]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          def get_garbage_node request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::So::Much::Trash::GarbageNode

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_garbage_node.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Garbage::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_garbage_node.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_garbage_node.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_garbage_node, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Performs paged garbage listing.
          #
          # @overload get_paged_garbage(request, options = nil)
          #   Pass arguments to `get_paged_garbage` via a request object, either of type
          #   {::So::Much::Trash::PagedGarbageRequest} or an equivalent Hash.
          #
          #   @param request [::So::Much::Trash::PagedGarbageRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_paged_garbage(garbage: nil, page_size: nil, page_token: nil)
          #   Pass arguments to `get_paged_garbage` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param garbage [::String]
          #     The garbage to page.
          #   @param page_size [::Integer]
          #     The amount of garbage items to returned in each page.
          #   @param page_token [::String]
          #     The position of the page to be returned.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Gapic::PagedEnumerable<::So::Much::Trash::GarbageItem>]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Gapic::PagedEnumerable<::So::Much::Trash::GarbageItem>]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Getting garbage
          #   require "so/much/trash/garbage_service"
          #
          #   client = ::So::Much::Trash::GarbageService::Client.new
          #
          #   garbage = "Paged Garbage"
          #
          #   responses = client.get_paged_garbage garbage: garbage
          #
          #   responses.each do |response|
          #     # Print the garbage resource
          #     puts "Garbage: #{response.garbage}"
          #     response.items.each do |garbage_item|
          #       puts "Garbage item: #{garbage_item.garbage}"
          #     end
          #   end
          #
          def get_paged_garbage request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::So::Much::Trash::PagedGarbageRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_paged_garbage.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Garbage::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_paged_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_paged_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_paged_garbage, request, options: options do |response, operation|
              response = ::Gapic::PagedEnumerable.new @garbage_service_stub, :get_paged_garbage, request, response, operation, options
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Performs asynchronous garbage listing. Garbage items are available via the
          # google.longrunning.Operations interface.
          #
          # @overload long_running_garbage(request, options = nil)
          #   Pass arguments to `long_running_garbage` via a request object, either of type
          #   {::So::Much::Trash::LongRunningGarbageRequest} or an equivalent Hash.
          #
          #   @param request [::So::Much::Trash::LongRunningGarbageRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload long_running_garbage(garbage: nil)
          #   Pass arguments to `long_running_garbage` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param garbage [::String]
          #     The name of the garbage this item belongs to.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Gapic::Operation]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Gapic::Operation]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          def long_running_garbage request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::So::Much::Trash::LongRunningGarbageRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.long_running_garbage.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Garbage::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.long_running_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.long_running_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :long_running_garbage, request, options: options do |response, operation|
              response = ::Gapic::Operation.new response, @operations_client, options: options
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Performs client streaming garbage listing.
          #
          # @param request [::Gapic::StreamInput, ::Enumerable<::So::Much::Trash::ListGarbageRequest, ::Hash>]
          #   An enumerable of {::So::Much::Trash::ListGarbageRequest} instances.
          # @param options [::Gapic::CallOptions, ::Hash]
          #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::So::Much::Trash::ListGarbageResponse]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::So::Much::Trash::ListGarbageResponse]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          def client_garbage request, options = nil
            unless request.is_a? ::Enumerable
              raise ::ArgumentError, "request must be an Enumerable" unless request.respond_to? :to_enum
              request = request.to_enum
            end

            request = request.lazy.map do |req|
              ::Gapic::Protobuf.coerce req, to: ::So::Much::Trash::ListGarbageRequest
            end

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.client_garbage.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Garbage::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.client_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.client_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :client_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Performs server streaming garbage listing.
          #
          # @overload server_garbage(request, options = nil)
          #   Pass arguments to `server_garbage` via a request object, either of type
          #   {::So::Much::Trash::ListGarbageRequest} or an equivalent Hash.
          #
          #   @param request [::So::Much::Trash::ListGarbageRequest, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload server_garbage(garbage: nil)
          #   Pass arguments to `server_garbage` via keyword arguments. Note that at
          #   least one keyword argument is required. To specify no parameters, or to keep all
          #   the default parameter values, pass an empty Hash as a request object (see above).
          #
          #   @param garbage [::String]
          #     The name of the garbage this item belongs to.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Enumerable<::So::Much::Trash::GarbageItem>]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Enumerable<::So::Much::Trash::GarbageItem>]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Getting garbage
          #   require "so/much/trash/garbage_service"
          #
          #   client = ::So::Much::Trash::GarbageService::Client.new
          #
          #   garbage = "Server Garbage"
          #
          #   responses = client.server_garbage garbage: garbage
          #
          #   responses.each do |response|
          #     # Print the garbage resource
          #     puts "Garbage: #{response.garbage}"
          #     response.items.each do |garbage_item|
          #       puts "Garbage item: #{garbage_item.garbage}"
          #     end
          #   end
          #
          def server_garbage request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::So::Much::Trash::ListGarbageRequest

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.server_garbage.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Garbage::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.server_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.server_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :server_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Performs bidirectional streaming garbage listing.
          #
          # @param request [::Gapic::StreamInput, ::Enumerable<::So::Much::Trash::ListGarbageRequest, ::Hash>]
          #   An enumerable of {::So::Much::Trash::ListGarbageRequest} instances.
          # @param options [::Gapic::CallOptions, ::Hash]
          #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Enumerable<::So::Much::Trash::GarbageItem>]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Enumerable<::So::Much::Trash::GarbageItem>]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          def bidi_garbage request, options = nil
            unless request.is_a? ::Enumerable
              raise ::ArgumentError, "request must be an Enumerable" unless request.respond_to? :to_enum
              request = request.to_enum
            end

            request = request.lazy.map do |req|
              ::Gapic::Protobuf.coerce req, to: ::So::Much::Trash::ListGarbageRequest
            end

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.bidi_garbage.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Garbage::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.bidi_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.bidi_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :bidi_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Performs bidirectional streaming with all typical garbage.
          #
          # @param request [::Gapic::StreamInput, ::Enumerable<::So::Much::Trash::TypicalGarbage, ::Hash>]
          #   An enumerable of {::So::Much::Trash::TypicalGarbage} instances.
          # @param options [::Gapic::CallOptions, ::Hash]
          #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::Enumerable<::So::Much::Trash::TypicalGarbage>]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::Enumerable<::So::Much::Trash::TypicalGarbage>]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          def bidi_typical_garbage request, options = nil
            unless request.is_a? ::Enumerable
              raise ::ArgumentError, "request must be an Enumerable" unless request.respond_to? :to_enum
              request = request.to_enum
            end

            request = request.lazy.map do |req|
              ::Gapic::Protobuf.coerce req, to: ::So::Much::Trash::TypicalGarbage
            end

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.bidi_typical_garbage.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Garbage::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.bidi_typical_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.bidi_typical_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :bidi_typical_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # A method that collides with a Ruby method
          #
          # @overload call_send(request, options = nil)
          #   Pass arguments to `call_send` via a request object, either of type
          #   {::So::Much::Trash::EmptyGarbage} or an equivalent Hash.
          #
          #   @param request [::So::Much::Trash::EmptyGarbage, ::Hash]
          #     A request object representing the call parameters. Required. To specify no
          #     parameters, or to keep all the default parameter values, pass an empty Hash.
          #   @param options [::Gapic::CallOptions, ::Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [::So::Much::Trash::EmptyGarbage]
          # @yieldparam operation [::GRPC::ActiveCall::Operation]
          #
          # @return [::So::Much::Trash::EmptyGarbage]
          #
          # @raise [::GRPC::BadStatus] if the RPC is aborted.
          #
          def call_send request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?

            request = ::Gapic::Protobuf.coerce request, to: ::So::Much::Trash::EmptyGarbage

            # Converts hash and nil to an options object
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.call_send.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Google::Garbage::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.call_send.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.call_send.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :call_send, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Configuration class for the GarbageService API.
          #
          # This class represents the configuration for GarbageService,
          # providing control over timeouts, retry behavior, logging, transport
          # parameters, and other low-level controls. Certain parameters can also be
          # applied individually to specific RPCs. See
          # {::So::Much::Trash::GarbageService::Client::Configuration::Rpcs}
          # for a list of RPCs that can be configured independently.
          #
          # Configuration can be applied globally to all clients, or to a single client
          # on construction.
          #
          # # Examples
          #
          # To modify the global config, setting the timeout for get_empty_garbage
          # to 20 seconds, and all remaining timeouts to 10 seconds:
          #
          #     ::So::Much::Trash::GarbageService::Client.configure do |config|
          #       config.timeout = 10.0
          #       config.rpcs.get_empty_garbage.timeout = 20.0
          #     end
          #
          # To apply the above configuration only to a new client:
          #
          #     client = ::So::Much::Trash::GarbageService::Client.new do |config|
          #       config.timeout = 10.0
          #       config.rpcs.get_empty_garbage.timeout = 20.0
          #     end
          #
          # @!attribute [rw] endpoint
          #   The hostname or hostname:port of the service endpoint.
          #   Defaults to `"endlesstrash.example.net"`.
          #   @return [::String]
          # @!attribute [rw] credentials
          #   Credentials to send with calls. You may provide any of the following types:
          #    *  (`String`) The path to a service account key file in JSON format
          #    *  (`Hash`) A service account key as a Hash
          #    *  (`Google::Auth::Credentials`) A googleauth credentials object
          #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
          #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
          #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
          #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
          #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
          #    *  (`nil`) indicating no credentials
          #   @return [::Object]
          # @!attribute [rw] scope
          #   The OAuth scopes
          #   @return [::Array<::String>]
          # @!attribute [rw] lib_name
          #   The library name as recorded in instrumentation and logging
          #   @return [::String]
          # @!attribute [rw] lib_version
          #   The library version as recorded in instrumentation and logging
          #   @return [::String]
          # @!attribute [rw] channel_args
          #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
          #   `GRPC::Core::Channel` object is provided as the credential.
          #   @return [::Hash]
          # @!attribute [rw] interceptors
          #   An array of interceptors that are run before calls are executed.
          #   @return [::Array<::GRPC::ClientInterceptor>]
          # @!attribute [rw] timeout
          #   The call timeout in seconds.
          #   @return [::Numeric]
          # @!attribute [rw] metadata
          #   Additional gRPC headers to be sent with the call.
          #   @return [::Hash{::Symbol=>::String}]
          # @!attribute [rw] retry_policy
          #   The retry policy. The value is a hash with the following keys:
          #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
          #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
          #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
          #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
          #       trigger a retry.
          #   @return [::Hash]
          # @!attribute [rw] quota_project
          #   A separate project against which to charge quota.
          #   @return [::String]
          #
          class Configuration
            extend ::Gapic::Config

            config_attr :endpoint,      "endlesstrash.example.net", ::String
            config_attr :credentials,   nil do |value|
              allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
              allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
              allowed.any? { |klass| klass === value }
            end
            config_attr :scope,         nil, ::String, ::Array, nil
            config_attr :lib_name,      nil, ::String, nil
            config_attr :lib_version,   nil, ::String, nil
            config_attr(:channel_args,  { "grpc.service_config_disable_resolution"=>1 }, ::Hash, nil)
            config_attr :interceptors,  nil, ::Array, nil
            config_attr :timeout,       nil, ::Numeric, nil
            config_attr :metadata,      nil, ::Hash, nil
            config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
            config_attr :quota_project, nil, ::String, nil

            # @private
            def initialize parent_config = nil
              @parent_config = parent_config unless parent_config.nil?

              yield self if block_given?
            end

            ##
            # Configurations for individual RPCs
            # @return [Rpcs]
            #
            def rpcs
              @rpcs ||= begin
                parent_rpcs = nil
                parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config&.respond_to?(:rpcs)
                Rpcs.new parent_rpcs
              end
            end

            ##
            # Configuration RPC class for the GarbageService API.
            #
            # Includes fields providing the configuration for each RPC in this service.
            # Each configuration object is of type `Gapic::Config::Method` and includes
            # the following configuration fields:
            #
            #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
            #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
            #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
            #     include the following keys:
            #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #         trigger a retry.
            #
            class Rpcs
              ##
              # RPC-specific configuration for `get_empty_garbage`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_empty_garbage
              ##
              # RPC-specific configuration for `get_simple_garbage`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_simple_garbage
              ##
              # RPC-specific configuration for `get_specific_garbage`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_specific_garbage
              ##
              # RPC-specific configuration for `get_nested_garbage`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_nested_garbage
              ##
              # RPC-specific configuration for `get_repeated_garbage`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_repeated_garbage
              ##
              # RPC-specific configuration for `get_typical_garbage`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_typical_garbage
              ##
              # RPC-specific configuration for `get_typical_garbage_by_request`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_typical_garbage_by_request
              ##
              # RPC-specific configuration for `get_complex_garbage`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_complex_garbage
              ##
              # RPC-specific configuration for `get_garbage_node`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_garbage_node
              ##
              # RPC-specific configuration for `get_paged_garbage`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :get_paged_garbage
              ##
              # RPC-specific configuration for `long_running_garbage`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :long_running_garbage
              ##
              # RPC-specific configuration for `client_garbage`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :client_garbage
              ##
              # RPC-specific configuration for `server_garbage`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :server_garbage
              ##
              # RPC-specific configuration for `bidi_garbage`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :bidi_garbage
              ##
              # RPC-specific configuration for `bidi_typical_garbage`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :bidi_typical_garbage
              ##
              # RPC-specific configuration for `call_send`
              # @return [::Gapic::Config::Method]
              #
              attr_reader :call_send

              # @private
              def initialize parent_rpcs = nil
                get_empty_garbage_config = parent_rpcs&.get_empty_garbage if parent_rpcs&.respond_to? :get_empty_garbage
                @get_empty_garbage = ::Gapic::Config::Method.new get_empty_garbage_config
                get_simple_garbage_config = parent_rpcs&.get_simple_garbage if parent_rpcs&.respond_to? :get_simple_garbage
                @get_simple_garbage = ::Gapic::Config::Method.new get_simple_garbage_config
                get_specific_garbage_config = parent_rpcs&.get_specific_garbage if parent_rpcs&.respond_to? :get_specific_garbage
                @get_specific_garbage = ::Gapic::Config::Method.new get_specific_garbage_config
                get_nested_garbage_config = parent_rpcs&.get_nested_garbage if parent_rpcs&.respond_to? :get_nested_garbage
                @get_nested_garbage = ::Gapic::Config::Method.new get_nested_garbage_config
                get_repeated_garbage_config = parent_rpcs&.get_repeated_garbage if parent_rpcs&.respond_to? :get_repeated_garbage
                @get_repeated_garbage = ::Gapic::Config::Method.new get_repeated_garbage_config
                get_typical_garbage_config = parent_rpcs&.get_typical_garbage if parent_rpcs&.respond_to? :get_typical_garbage
                @get_typical_garbage = ::Gapic::Config::Method.new get_typical_garbage_config
                get_typical_garbage_by_request_config = parent_rpcs&.get_typical_garbage_by_request if parent_rpcs&.respond_to? :get_typical_garbage_by_request
                @get_typical_garbage_by_request = ::Gapic::Config::Method.new get_typical_garbage_by_request_config
                get_complex_garbage_config = parent_rpcs&.get_complex_garbage if parent_rpcs&.respond_to? :get_complex_garbage
                @get_complex_garbage = ::Gapic::Config::Method.new get_complex_garbage_config
                get_garbage_node_config = parent_rpcs&.get_garbage_node if parent_rpcs&.respond_to? :get_garbage_node
                @get_garbage_node = ::Gapic::Config::Method.new get_garbage_node_config
                get_paged_garbage_config = parent_rpcs&.get_paged_garbage if parent_rpcs&.respond_to? :get_paged_garbage
                @get_paged_garbage = ::Gapic::Config::Method.new get_paged_garbage_config
                long_running_garbage_config = parent_rpcs&.long_running_garbage if parent_rpcs&.respond_to? :long_running_garbage
                @long_running_garbage = ::Gapic::Config::Method.new long_running_garbage_config
                client_garbage_config = parent_rpcs&.client_garbage if parent_rpcs&.respond_to? :client_garbage
                @client_garbage = ::Gapic::Config::Method.new client_garbage_config
                server_garbage_config = parent_rpcs&.server_garbage if parent_rpcs&.respond_to? :server_garbage
                @server_garbage = ::Gapic::Config::Method.new server_garbage_config
                bidi_garbage_config = parent_rpcs&.bidi_garbage if parent_rpcs&.respond_to? :bidi_garbage
                @bidi_garbage = ::Gapic::Config::Method.new bidi_garbage_config
                bidi_typical_garbage_config = parent_rpcs&.bidi_typical_garbage if parent_rpcs&.respond_to? :bidi_typical_garbage
                @bidi_typical_garbage = ::Gapic::Config::Method.new bidi_typical_garbage_config
                call_send_config = parent_rpcs&.call_send if parent_rpcs&.respond_to? :call_send
                @call_send = ::Gapic::Config::Method.new call_send_config

                yield self if block_given?
              end
            end
          end
        end
      end
    end
  end
end
