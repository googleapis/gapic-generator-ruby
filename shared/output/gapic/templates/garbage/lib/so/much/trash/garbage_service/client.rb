# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "gapic/common"
require "gapic/config"
require "gapic/config/method"

require "google/garbage/version"
require "garbage/garbage_pb"
require "so/much/trash/garbage_service/credentials"
require "so/much/trash/garbage_service/paths"
require "so/much/trash/garbage_service/operations"


module So
  module Much
    module Trash
      module GarbageService
        # Service that implements GarbageService API.
        class Client
          include Paths

          # @private
          attr_reader :garbage_service_stub

          ##
          # Configuration for the GarbageService Client API.
          #
          # @yield [config] Configure the Client client.
          # @yieldparam config [Client::Configuration]
          #
          # @return [Client::Configuration]
          #
          def self.configure
            @configure ||= Client::Configuration.new
            yield @configure if block_given?
            @configure
          end

          ##
          # Configure the GarbageService Client instance.
          #
          # The configuration is set to the derived mode, meaning that values can be changed,
          # but structural changes (adding new fields, etc.) are not allowed. Structural changes
          # should be made on {Client.configure}.
          #
          # @yield [config] Configure the Client client.
          # @yieldparam config [Client::Configuration]
          #
          # @return [Client::Configuration]
          #
          def configure
            yield @config if block_given?
            @config
          end

          ##
          # Create a new Client client object.
          #
          # @yield [config] Configure the Client client.
          # @yieldparam config [Client::Configuration]
          #
          def initialize
            # These require statements are intentionally placed here to initialize
            # the gRPC module only when it's required.
            # See https://github.com/googleapis/toolkit/issues/446
            require "gapic/grpc"
            require "garbage/garbage_services_pb"

            # Create the configuration object
            @config = Configuration.new Client.configure

            # Yield the configuration if needed
            yield @config if block_given?

            # Create credentials
            credentials = @config.credentials
            credentials ||= Credentials.default scope: @config.scope
            if credentials.is_a?(String) || credentials.is_a?(Hash)
              credentials = Credentials.new credentials, scope: @config.scope
            end

            @operations_client = Operations.new do |config|
              config.credentials = credentials
            end

            @garbage_service_stub = Gapic::ServiceStub.new(
              So::Much::Trash::GarbageService::Stub,
              credentials:  credentials,
              endpoint:     @config.endpoint,
              channel_args: @config.channel_args,
              interceptors: @config.interceptors
            )
          end

          # Service calls

          ##
          # Retrieves a SimpleGarbage resource.
          #
          # @overload get_simple_garbage(request, options = nil)
          #   @param request [So::Much::Trash::SimpleGarbage | Hash]
          #     Retrieves a SimpleGarbage resource.
          #   @param options [Gapic::CallOptions, Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_simple_garbage(name: nil)
          #   @param name [String]
          #     The name of this garbage.
          #
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [So::Much::Trash::SimpleGarbage]
          # @yieldparam operation [GRPC::ActiveCall::Operation]
          #
          # @return [So::Much::Trash::SimpleGarbage]
          #
          # @raise [GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Getting garbage
          #   require "so/much/trash/garbage_service"
          #
          #   client = So::Much::Trash::GarbageService::Client.new
          #
          #   name = "Simple Garbage"
          #
          #   response = client.get_simple_garbage name: name
          #
          #   # The garbage resource
          #   garbage = response
          #
          #   # Print the garbage resource
          #   puts "Garbage: #{garbage.name}"
          #
          # @example Getting garbage from file using variable
          #   require "so/much/trash/garbage_service"
          #
          #   client = So::Much::Trash::GarbageService::Client.new
          #
          #   # Get the garbage name from a file.
          #   name = File.read "path/to/garbage-name.txt"
          #
          #   response = client.get_simple_garbage name: name
          #
          #   # The garbage resource
          #   garbage = response
          #
          #   # Print the garbage resource
          #   puts "Garbage: #{garbage.name}"
          #
          # @example Getting garbage from file using variable
          #   require "so/much/trash/garbage_service"
          #
          #   client = So::Much::Trash::GarbageService::Client.new
          #
          #   garbage_name = File.read "path/to/garbage-name.txt"
          #
          #   # Get the garbage name from a file.
          #   name = garbage_name
          #
          #   response = client.get_simple_garbage name: name
          #
          #   # The garbage resource
          #   garbage = response
          #
          #   # Print the garbage resource
          #   puts "Garbage: #{garbage.name}"
          #
          def get_simple_garbage request, options = nil
            raise ArgumentError, "request must be provided" if request.nil?

            request = Gapic::Protobuf.coerce request, to: So::Much::Trash::SimpleGarbage

            # Converts hash and nil to an options object
            options = Gapic::CallOptions.new options.to_h if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_simple_garbage.metadata.to_h

            # Set x-goog-api-client header
            metadata[:"x-goog-api-client"] ||= Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: Google::Garbage::VERSION

            options.apply_defaults timeout:      @config.rpcs.get_simple_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_simple_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_simple_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Retrieves a SpecificGarbage resource.
          #
          # @overload get_specific_garbage(request, options = nil)
          #   @param request [So::Much::Trash::SpecificGarbage | Hash]
          #     Retrieves a SpecificGarbage resource.
          #   @param options [Gapic::CallOptions, Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_specific_garbage(name: nil, int32: nil, int64: nil, uint32: nil, uint64: nil, bool: nil, float: nil, double: nil, bytes: nil, enum: nil, nested: nil)
          #   @param name [String]
          #     The name of this garbage.
          #   @param int32 [Integer]
          #     The int32 of this garbage.
          #   @param int64 [Integer]
          #     The int64 of this garbage.
          #   @param uint32 [Integer]
          #     The uint32 of this garbage.
          #   @param uint64 [Integer]
          #     The uint64 of this garbage.
          #   @param bool [Boolean]
          #     The bool of this garbage.
          #   @param float [Float]
          #     The float of this garbage.
          #   @param double [Float]
          #     The double of this garbage.
          #   @param bytes [String]
          #     The bytes of this garbage.
          #   @param enum [ENUM(GarbageEnum)]
          #     The type of this garbage.
          #   @param nested [So::Much::Trash::SpecificGarbage::NestedGarbage | Hash]
          #     The nested garbage resource of this garbage.
          #
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [So::Much::Trash::SpecificGarbage]
          # @yieldparam operation [GRPC::ActiveCall::Operation]
          #
          # @return [So::Much::Trash::SpecificGarbage]
          #
          # @raise [GRPC::BadStatus] if the RPC is aborted.
          #
          def get_specific_garbage request, options = nil
            raise ArgumentError, "request must be provided" if request.nil?

            request = Gapic::Protobuf.coerce request, to: So::Much::Trash::SpecificGarbage

            # Converts hash and nil to an options object
            options = Gapic::CallOptions.new options.to_h if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_specific_garbage.metadata.to_h

            # Set x-goog-api-client header
            metadata[:"x-goog-api-client"] ||= Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: Google::Garbage::VERSION

            options.apply_defaults timeout:      @config.rpcs.get_specific_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_specific_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_specific_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Retrieves a NestedGarbage resource.
          #
          # @overload get_nested_garbage(request, options = nil)
          #   @param request [So::Much::Trash::SpecificGarbage::NestedGarbage | Hash]
          #     Retrieves a NestedGarbage resource.
          #   @param options [Gapic::CallOptions, Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_nested_garbage(name: nil, int32: nil, int64: nil, uint32: nil, uint64: nil, bool: nil, float: nil, double: nil, bytes: nil, enum: nil)
          #   @param name [String]
          #     The name of this garbage.
          #   @param int32 [Integer]
          #     The int32 of this garbage.
          #   @param int64 [Integer]
          #     The int64 of this garbage.
          #   @param uint32 [Integer]
          #     The uint32 of this garbage.
          #   @param uint64 [Integer]
          #     The uint64 of this garbage.
          #   @param bool [Boolean]
          #     The bool of this garbage.
          #   @param float [Float]
          #     The float of this garbage.
          #   @param double [Float]
          #     The double of this garbage.
          #   @param bytes [String]
          #     The bytes of this garbage.
          #   @param enum [ENUM(GarbageEnum)]
          #     The type of this garbage.
          #
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [So::Much::Trash::SpecificGarbage::NestedGarbage]
          # @yieldparam operation [GRPC::ActiveCall::Operation]
          #
          # @return [So::Much::Trash::SpecificGarbage::NestedGarbage]
          #
          # @raise [GRPC::BadStatus] if the RPC is aborted.
          #
          def get_nested_garbage request, options = nil
            raise ArgumentError, "request must be provided" if request.nil?

            request = Gapic::Protobuf.coerce request, to: So::Much::Trash::SpecificGarbage::NestedGarbage

            # Converts hash and nil to an options object
            options = Gapic::CallOptions.new options.to_h if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_nested_garbage.metadata.to_h

            # Set x-goog-api-client header
            metadata[:"x-goog-api-client"] ||= Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: Google::Garbage::VERSION

            options.apply_defaults timeout:      @config.rpcs.get_nested_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_nested_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_nested_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Retrieves a RepeatedGarbage resource.
          #
          # @overload get_repeated_garbage(request, options = nil)
          #   @param request [So::Much::Trash::RepeatedGarbage | Hash]
          #     Retrieves a RepeatedGarbage resource.
          #   @param options [Gapic::CallOptions, Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_repeated_garbage(repeated_name: nil, repeated_int32: nil, repeated_int64: nil, repeated_uint32: nil, repeated_uint64: nil, repeated_bool: nil, repeated_float: nil, repeated_double: nil, repeated_bytes: nil, repeated_enum: nil)
          #   @param repeated_name [Array<String>]
          #     The repeated name of this garbage.
          #   @param repeated_int32 [Array<Integer>]
          #     The repeated int32 of this garbage.
          #   @param repeated_int64 [Array<Integer>]
          #     The repeated int64 of this garbage.
          #   @param repeated_uint32 [Array<Integer>]
          #     The repeated uint32 of this garbage.
          #   @param repeated_uint64 [Array<Integer>]
          #     The repeated uint64 of this garbage.
          #   @param repeated_bool [Array<Boolean>]
          #     The repeated bool of this garbage.
          #   @param repeated_float [Array<Float>]
          #     The repeated float of this garbage.
          #   @param repeated_double [Array<Float>]
          #     The repeated double of this garbage.
          #   @param repeated_bytes [Array<String>]
          #     The repeated bytes of this garbage.
          #   @param repeated_enum [Array<ENUM(GarbageEnum)>]
          #     The repeated type of this garbage.
          #
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [So::Much::Trash::RepeatedGarbage]
          # @yieldparam operation [GRPC::ActiveCall::Operation]
          #
          # @return [So::Much::Trash::RepeatedGarbage]
          #
          # @raise [GRPC::BadStatus] if the RPC is aborted.
          #
          def get_repeated_garbage request, options = nil
            raise ArgumentError, "request must be provided" if request.nil?

            request = Gapic::Protobuf.coerce request, to: So::Much::Trash::RepeatedGarbage

            # Converts hash and nil to an options object
            options = Gapic::CallOptions.new options.to_h if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_repeated_garbage.metadata.to_h

            # Set x-goog-api-client header
            metadata[:"x-goog-api-client"] ||= Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: Google::Garbage::VERSION

            options.apply_defaults timeout:      @config.rpcs.get_repeated_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_repeated_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_repeated_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Retrieves a TypicalGarbage resource.
          #
          # @overload get_typical_garbage(request, options = nil)
          #   @param request [So::Much::Trash::TypicalGarbage | Hash]
          #     Retrieves a TypicalGarbage resource.
          #   @param options [Gapic::CallOptions, Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_typical_garbage(name: nil, int32: nil, int64: nil, uint32: nil, uint64: nil, bool: nil, float: nil, double: nil, bytes: nil, timeout: nil, duration: nil, enum: nil, amap: nil)
          #   @param name [String]
          #     The name of this garbage.
          #   @param int32 [Integer]
          #     The int32 of this garbage.
          #   @param int64 [Integer]
          #     The int64 of this garbage.
          #   @param uint32 [Integer]
          #     The uint32 of this garbage.
          #   @param uint64 [Integer]
          #     The uint64 of this garbage.
          #   @param bool [Boolean]
          #     The bool of this garbage.
          #   @param float [Float]
          #     The float of this garbage.
          #   @param double [Float]
          #     The double of this garbage.
          #   @param bytes [String]
          #     The bytes of this garbage.
          #   @param timeout [Google::Protobuf::Timestamp | Hash]
          #     When the garbage was first activated.
          #   @param duration [Google::Protobuf::Duration | Hash]
          #     Time limit for this garbage. If not defined, the garbage endures forever.
          #   @param enum [ENUM(GarbageEnum)]
          #     The type of this garbage.
          #   @param amap [Hash{String => String}]
          #     This is a map
          #
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [So::Much::Trash::TypicalGarbage]
          # @yieldparam operation [GRPC::ActiveCall::Operation]
          #
          # @return [So::Much::Trash::TypicalGarbage]
          #
          # @raise [GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Getting garbage (printing timestamp)
          #   require "so/much/trash/garbage_service"
          #
          #   client = So::Much::Trash::GarbageService::Client.new
          #
          #   name = "Typical Garbage"
          #   int32 = 42
          #   bool = true
          #
          #   response = client.get_typical_garbage name: name, int32: int32, bool: bool
          #
          #   # The garbage resource
          #   garbage = response
          #
          #   # The garbage timestamp
          #   timestamp = garbage.timestamp
          #
          #   # Print the garbage resource timestamp
          #   puts "Garbage: #{garbage.name} (#{timestamp})"
          #
          # @example Getting garbage (printing timestamp)
          #   require "so/much/trash/garbage_service"
          #
          #   client = So::Much::Trash::GarbageService::Client.new
          #
          #   name = "Typical Garbage"
          #   int32 = 42
          #   bool = true
          #
          #   response = client.get_typical_garbage name: name, int32: int32, bool: bool
          #
          #   # The garbage resource
          #   garbage = response
          #
          #   # The garbage duration
          #   duration = garbage.duration
          #
          #   # Print the garbage resource duration
          #   puts "Garbage: #{garbage.name} (#{duration})"
          #
          # @example Getting garbage (printing msg hash)
          #   require "so/much/trash/garbage_service"
          #
          #   client = So::Much::Trash::GarbageService::Client.new
          #
          #   name = "Typical Garbage"
          #   int32 = 42
          #   bool = true
          #
          #   response = client.get_typical_garbage name: name, int32: int32, bool: bool
          #
          #   # Print the garbage resource msg hash
          #   response.msg.map_string_int32.each do |msg_key, msg_value|
          #     puts "Garbage msg key: #{msg_key}, msg value: #{msg_value}"
          #   end
          #
          def get_typical_garbage request, options = nil
            raise ArgumentError, "request must be provided" if request.nil?

            request = Gapic::Protobuf.coerce request, to: So::Much::Trash::TypicalGarbage

            # Converts hash and nil to an options object
            options = Gapic::CallOptions.new options.to_h if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_typical_garbage.metadata.to_h

            # Set x-goog-api-client header
            metadata[:"x-goog-api-client"] ||= Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: Google::Garbage::VERSION

            options.apply_defaults timeout:      @config.rpcs.get_typical_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_typical_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_typical_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Retrieves a ComplexGarbage resource.
          #
          # @overload get_complex_garbage(request, options = nil)
          #   @param request [So::Much::Trash::ComplexGarbage | Hash]
          #     Retrieves a ComplexGarbage resource.
          #   @param options [Gapic::CallOptions, Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_complex_garbage(layer1: nil)
          #   @param layer1 [So::Much::Trash::ComplexGarbage::Layer1Garbage | Hash]
          #     The first step to total and complete garbage.
          #
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [So::Much::Trash::ComplexGarbage]
          # @yieldparam operation [GRPC::ActiveCall::Operation]
          #
          # @return [So::Much::Trash::ComplexGarbage]
          #
          # @raise [GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Getting garbage
          #   require "so/much/trash/garbage_service"
          #
          #   client = So::Much::Trash::GarbageService::Client.new
          #
          #   layer1 = {
          #     layer2 = {
          #       layer3 = {
          #         garbage = {
          #           name: "Complex Garbage"
          #         }
          #       }
          #     }
          #   }
          #
          #   response = client.get_complex_garbage layer1: layer1
          #
          #   # The garbage resource
          #   garbage = response
          #
          #   # Print the garbage resource
          #   puts "Garbage: #{garbage.layer1.layer2.layer3.garbage.name}"
          #
          # @example Getting garbage (write a file)
          #   require "so/much/trash/garbage_service"
          #
          #   client = So::Much::Trash::GarbageService::Client.new
          #
          #   layer1 = {
          #     layer2 = {
          #       layer3 = {
          #         garbage = {
          #           name: "Complex Garbage"
          #         }
          #       }
          #     }
          #   }
          #
          #   response = client.get_complex_garbage layer1: layer1
          #
          #   # Save the garbage resource
          #   File.write "path/to/garbage_name.txt", response.layer1.layer2.layer3.garbage.name
          #
          def get_complex_garbage request, options = nil
            raise ArgumentError, "request must be provided" if request.nil?

            request = Gapic::Protobuf.coerce request, to: So::Much::Trash::ComplexGarbage

            # Converts hash and nil to an options object
            options = Gapic::CallOptions.new options.to_h if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_complex_garbage.metadata.to_h

            # Set x-goog-api-client header
            metadata[:"x-goog-api-client"] ||= Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: Google::Garbage::VERSION

            options.apply_defaults timeout:      @config.rpcs.get_complex_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_complex_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_complex_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Retrieves a GarbageNode resource.
          #
          # @overload get_garbage_node(request, options = nil)
          #   @param request [So::Much::Trash::GarbageNode | Hash]
          #     Retrieves a GarbageNode resource.
          #   @param options [Gapic::CallOptions, Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_garbage_node(data: nil, parent: nil)
          #   @param data [String]
          #   @param parent [So::Much::Trash::GarbageNode | Hash]
          #
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [So::Much::Trash::GarbageNode]
          # @yieldparam operation [GRPC::ActiveCall::Operation]
          #
          # @return [So::Much::Trash::GarbageNode]
          #
          # @raise [GRPC::BadStatus] if the RPC is aborted.
          #
          def get_garbage_node request, options = nil
            raise ArgumentError, "request must be provided" if request.nil?

            request = Gapic::Protobuf.coerce request, to: So::Much::Trash::GarbageNode

            # Converts hash and nil to an options object
            options = Gapic::CallOptions.new options.to_h if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_garbage_node.metadata.to_h

            # Set x-goog-api-client header
            metadata[:"x-goog-api-client"] ||= Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: Google::Garbage::VERSION

            options.apply_defaults timeout:      @config.rpcs.get_garbage_node.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_garbage_node.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_garbage_node, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Performs paged garbage listing.
          #
          # @overload get_paged_garbage(request, options = nil)
          #   @param request [So::Much::Trash::PagedGarbageRequest | Hash]
          #     Performs paged garbage listing.
          #   @param options [Gapic::CallOptions, Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_paged_garbage(garbage: nil, page_size: nil, page_token: nil)
          #   @param garbage [String]
          #     The garbage to page.
          #   @param page_size [Integer]
          #     The amount of garbage items to returned in each page.
          #   @param page_token [String]
          #     The position of the page to be returned.
          #
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [Gapic::PagedEnumerable<So::Much::Trash::GarbageItem>]
          # @yieldparam operation [GRPC::ActiveCall::Operation]
          #
          # @return [Gapic::PagedEnumerable<So::Much::Trash::GarbageItem>]
          #
          # @raise [GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Getting garbage
          #   require "so/much/trash/garbage_service"
          #
          #   client = So::Much::Trash::GarbageService::Client.new
          #
          #   garbage = "Paged Garbage"
          #
          #   responses = client.get_paged_garbage garbage: garbage
          #
          #   responses.each do |response|
          #     # Print the garbage resource
          #     puts "Garbage: #{response.garbage}"
          #     response.items.each do |garbage_item|
          #       puts "Garbage item: #{garbage_item.garbage}"
          #     end
          #   end
          #
          def get_paged_garbage request, options = nil
            raise ArgumentError, "request must be provided" if request.nil?

            request = Gapic::Protobuf.coerce request, to: So::Much::Trash::PagedGarbageRequest

            # Converts hash and nil to an options object
            options = Gapic::CallOptions.new options.to_h if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_paged_garbage.metadata.to_h

            # Set x-goog-api-client header
            metadata[:"x-goog-api-client"] ||= Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: Google::Garbage::VERSION

            options.apply_defaults timeout:      @config.rpcs.get_paged_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_paged_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :get_paged_garbage, request, options: options do |response, operation|
              response = Gapic::PagedEnumerable.new @garbage_service_stub, :get_paged_garbage, request, response, operation, options
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Performs asynchronous garbage listing. Garbage items are available via the
          # google.longrunning.Operations interface.
          #
          # @overload long_running_garbage(request, options = nil)
          #   @param request [So::Much::Trash::LongRunningGarbageRequest | Hash]
          #     Performs asynchronous garbage listing. Garbage items are available via the
          #     google.longrunning.Operations interface.
          #   @param options [Gapic::CallOptions, Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload long_running_garbage(garbage: nil)
          #   @param garbage [String]
          #     The name of the garbage this item belongs to.
          #
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [Gapic::Operation]
          # @yieldparam operation [GRPC::ActiveCall::Operation]
          #
          # @return [Gapic::Operation]
          #
          # @raise [GRPC::BadStatus] if the RPC is aborted.
          #
          def long_running_garbage request, options = nil
            raise ArgumentError, "request must be provided" if request.nil?

            request = Gapic::Protobuf.coerce request, to: So::Much::Trash::LongRunningGarbageRequest

            # Converts hash and nil to an options object
            options = Gapic::CallOptions.new options.to_h if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.long_running_garbage.metadata.to_h

            # Set x-goog-api-client header
            metadata[:"x-goog-api-client"] ||= Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: Google::Garbage::VERSION

            options.apply_defaults timeout:      @config.rpcs.long_running_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.long_running_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :long_running_garbage, request, options: options do |response, operation|
              response = Gapic::Operation.new response, @operations_client
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Performs client streaming garbage listing.
          #
          # @param request [Gapic::StreamInput, Enumerable<So::Much::Trash::ListGarbageRequest | Hash>]
          #   An enumerable of {So::Much::Trash::ListGarbageRequest} instances.
          # @param options [Gapic::CallOptions, Hash]
          #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [So::Much::Trash::ListGarbageResponse]
          # @yieldparam operation [GRPC::ActiveCall::Operation]
          #
          # @return [So::Much::Trash::ListGarbageResponse]
          #
          # @raise [GRPC::BadStatus] if the RPC is aborted.
          #
          def client_garbage request, options = nil
            unless request.is_a? Enumerable
              raise ArgumentError, "request must be an Enumerable" unless request.respond_to? :to_enum
              request = request.to_enum
            end

            request = request.lazy.map do |req|
              Gapic::Protobuf.coerce req, to: So::Much::Trash::ListGarbageRequest
            end

            # Converts hash and nil to an options object
            options = Gapic::CallOptions.new options.to_h if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.client_garbage.metadata.to_h

            # Set x-goog-api-client header
            metadata[:"x-goog-api-client"] ||= Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: Google::Garbage::VERSION

            options.apply_defaults timeout:      @config.rpcs.client_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.client_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :client_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Performs server streaming garbage listing.
          #
          # @overload server_garbage(request, options = nil)
          #   @param request [So::Much::Trash::ListGarbageRequest | Hash]
          #     Performs server streaming garbage listing.
          #   @param options [Gapic::CallOptions, Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload server_garbage(garbage: nil)
          #   @param garbage [String]
          #     The name of the garbage this item belongs to.
          #
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [Enumerable<So::Much::Trash::GarbageItem>]
          # @yieldparam operation [GRPC::ActiveCall::Operation]
          #
          # @return [Enumerable<So::Much::Trash::GarbageItem>]
          #
          # @raise [GRPC::BadStatus] if the RPC is aborted.
          #
          # @example Getting garbage
          #   require "so/much/trash/garbage_service"
          #
          #   client = So::Much::Trash::GarbageService::Client.new
          #
          #   garbage = "Server Garbage"
          #
          #   responses = client.server_garbage garbage: garbage
          #
          #   responses.each do |response|
          #     # Print the garbage resource
          #     puts "Garbage: #{response.garbage}"
          #     response.items.each do |garbage_item|
          #       puts "Garbage item: #{garbage_item.garbage}"
          #     end
          #   end
          #
          def server_garbage request, options = nil
            raise ArgumentError, "request must be provided" if request.nil?

            request = Gapic::Protobuf.coerce request, to: So::Much::Trash::ListGarbageRequest

            # Converts hash and nil to an options object
            options = Gapic::CallOptions.new options.to_h if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.server_garbage.metadata.to_h

            # Set x-goog-api-client header
            metadata[:"x-goog-api-client"] ||= Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: Google::Garbage::VERSION

            options.apply_defaults timeout:      @config.rpcs.server_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.server_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :server_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Performs bidirectional streaming garbage listing.
          #
          # @param request [Gapic::StreamInput, Enumerable<So::Much::Trash::ListGarbageRequest | Hash>]
          #   An enumerable of {So::Much::Trash::ListGarbageRequest} instances.
          # @param options [Gapic::CallOptions, Hash]
          #   Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [Enumerable<So::Much::Trash::GarbageItem>]
          # @yieldparam operation [GRPC::ActiveCall::Operation]
          #
          # @return [Enumerable<So::Much::Trash::GarbageItem>]
          #
          # @raise [GRPC::BadStatus] if the RPC is aborted.
          #
          def bidi_garbage request, options = nil
            unless request.is_a? Enumerable
              raise ArgumentError, "request must be an Enumerable" unless request.respond_to? :to_enum
              request = request.to_enum
            end

            request = request.lazy.map do |req|
              Gapic::Protobuf.coerce req, to: So::Much::Trash::ListGarbageRequest
            end

            # Converts hash and nil to an options object
            options = Gapic::CallOptions.new options.to_h if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.bidi_garbage.metadata.to_h

            # Set x-goog-api-client header
            metadata[:"x-goog-api-client"] ||= Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: Google::Garbage::VERSION

            options.apply_defaults timeout:      @config.rpcs.bidi_garbage.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.bidi_garbage.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @garbage_service_stub.call_rpc :bidi_garbage, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          end

          ##
          # Configuration class for the GarbageService API.
          class Configuration
            extend Gapic::Config

            config_attr :endpoint,     "endlesstrash.example.net", String
            config_attr :credentials,  nil do |value|
              allowed = [::String, ::Hash, ::Proc, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
              allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
              allowed.any? { |klass| klass === value }
            end
            config_attr :scope,        nil, String, Array, nil
            config_attr :lib_name,     nil, String, nil
            config_attr :lib_version,  nil, String, nil
            config_attr(:channel_args, { "grpc.service_config_disable_resolution"=>1 }, Hash, nil)
            config_attr :interceptors, nil, Array, nil
            config_attr :timeout,      nil, Numeric, nil
            config_attr :metadata,     nil, Hash, nil
            config_attr :retry_policy, nil, Hash, Proc, nil

            def initialize parent_config = nil
              @parent_config = parent_config unless parent_config.nil?

              yield self if block_given?
            end

            def rpcs
              @rpcs ||= begin
                parent_rpcs = nil
                parent_rpcs = @parent_config.rpcs if @parent_config&.respond_to? :rpcs
                Rpcs.new parent_rpcs
              end
            end

            ##
            # Configuration RPC class for the GarbageService API.
            class Rpcs
              attr_reader :get_simple_garbage
              attr_reader :get_specific_garbage
              attr_reader :get_nested_garbage
              attr_reader :get_repeated_garbage
              attr_reader :get_typical_garbage
              attr_reader :get_complex_garbage
              attr_reader :get_garbage_node
              attr_reader :get_paged_garbage
              attr_reader :long_running_garbage
              attr_reader :client_garbage
              attr_reader :server_garbage
              attr_reader :bidi_garbage

              def initialize parent_rpcs = nil
                get_simple_garbage_config = parent_rpcs&.get_simple_garbage if parent_rpcs&.respond_to? :get_simple_garbage
                @get_simple_garbage = Gapic::Config::Method.new get_simple_garbage_config
                get_specific_garbage_config = parent_rpcs&.get_specific_garbage if parent_rpcs&.respond_to? :get_specific_garbage
                @get_specific_garbage = Gapic::Config::Method.new get_specific_garbage_config
                get_nested_garbage_config = parent_rpcs&.get_nested_garbage if parent_rpcs&.respond_to? :get_nested_garbage
                @get_nested_garbage = Gapic::Config::Method.new get_nested_garbage_config
                get_repeated_garbage_config = parent_rpcs&.get_repeated_garbage if parent_rpcs&.respond_to? :get_repeated_garbage
                @get_repeated_garbage = Gapic::Config::Method.new get_repeated_garbage_config
                get_typical_garbage_config = parent_rpcs&.get_typical_garbage if parent_rpcs&.respond_to? :get_typical_garbage
                @get_typical_garbage = Gapic::Config::Method.new get_typical_garbage_config
                get_complex_garbage_config = parent_rpcs&.get_complex_garbage if parent_rpcs&.respond_to? :get_complex_garbage
                @get_complex_garbage = Gapic::Config::Method.new get_complex_garbage_config
                get_garbage_node_config = parent_rpcs&.get_garbage_node if parent_rpcs&.respond_to? :get_garbage_node
                @get_garbage_node = Gapic::Config::Method.new get_garbage_node_config
                get_paged_garbage_config = parent_rpcs&.get_paged_garbage if parent_rpcs&.respond_to? :get_paged_garbage
                @get_paged_garbage = Gapic::Config::Method.new get_paged_garbage_config
                long_running_garbage_config = parent_rpcs&.long_running_garbage if parent_rpcs&.respond_to? :long_running_garbage
                @long_running_garbage = Gapic::Config::Method.new long_running_garbage_config
                client_garbage_config = parent_rpcs&.client_garbage if parent_rpcs&.respond_to? :client_garbage
                @client_garbage = Gapic::Config::Method.new client_garbage_config
                server_garbage_config = parent_rpcs&.server_garbage if parent_rpcs&.respond_to? :server_garbage
                @server_garbage = Gapic::Config::Method.new server_garbage_config
                bidi_garbage_config = parent_rpcs&.bidi_garbage if parent_rpcs&.respond_to? :bidi_garbage
                @bidi_garbage = Gapic::Config::Method.new bidi_garbage_config

                yield self if block_given?
              end
            end
          end
        end
      end
    end
  end
end

# rubocop:disable Lint/HandleExceptions

# Once client is loaded, load helpers.rb if it exists.
begin
  require "so/much/trash/garbage_service/helpers"
rescue LoadError
end

# rubocop:enable Lint/HandleExceptions
