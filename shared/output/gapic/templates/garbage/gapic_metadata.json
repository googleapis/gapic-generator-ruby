{
  "schema": "1.0",
  "comment": "This file maps proto services/RPCs to the corresponding library clients/methods",
  "language": "ruby",
  "protoPackage": "endless.trash.forever",
  "libraryPackage": "::So::Much::Trash",
  "services": {
    "GarbageService": {
      "clients": {
        "grpc": {
          "libraryClient": "::So::Much::Trash::GarbageService::Client",
          "rpcs": {
            "GetEmptyGarbage": {
              "methods": [
                "get_empty_garbage"
              ]
            },
            "GetSimpleGarbage": {
              "methods": [
                "get_simple_garbage"
              ]
            },
            "GetSpecificGarbage": {
              "methods": [
                "get_specific_garbage"
              ]
            },
            "GetNestedGarbage": {
              "methods": [
                "get_nested_garbage"
              ]
            },
            "GetRepeatedGarbage": {
              "methods": [
                "get_repeated_garbage"
              ]
            },
            "GetTypicalGarbage": {
              "methods": [
                "get_typical_garbage"
              ]
            },
            "GetTypicalGarbageByRequest": {
              "methods": [
                "get_typical_garbage_by_request"
              ]
            },
            "GetComplexGarbage": {
              "methods": [
                "get_complex_garbage"
              ]
            },
            "GetGarbageNode": {
              "methods": [
                "get_garbage_node"
              ]
            },
            "GetPagedGarbage": {
              "methods": [
                "get_paged_garbage"
              ]
            },
            "LongRunningGarbage": {
              "methods": [
                "long_running_garbage"
              ]
            },
            "ClientGarbage": {
              "methods": [
                "client_garbage"
              ]
            },
            "ServerGarbage": {
              "methods": [
                "server_garbage"
              ]
            },
            "BidiGarbage": {
              "methods": [
                "bidi_garbage"
              ]
            },
            "BidiTypicalGarbage": {
              "methods": [
                "bidi_typical_garbage"
              ]
            },
            "Send": {
              "methods": [
                "call_send"
              ]
            }
          }
        }
      }
    },
    "RenamedService": {
      "clients": {
        "grpc": {
          "libraryClient": "::So::Much::Trash::ReallyRenamedService::Client",
          "rpcs": {
            "GetEmptyGarbage": {
              "methods": [
                "get_empty_garbage"
              ]
            }
          }
        }
      }
    },
    "ResourceNames": {
      "clients": {
        "grpc": {
          "libraryClient": "::So::Much::Trash::ResourceNames::Client",
          "rpcs": {
            "SimplePatternMethod": {
              "methods": [
                "simple_pattern_method"
              ]
            },
            "ComplexPatternMethod": {
              "methods": [
                "complex_pattern_method"
              ]
            },
            "ResourceNamePatternMethod": {
              "methods": [
                "resource_name_pattern_method"
              ]
            },
            "MultiparentMethod": {
              "methods": [
                "multiparent_method"
              ]
            },
            "NoArgumentsMultiMethod": {
              "methods": [
                "no_arguments_multi_method"
              ]
            }
          }
        }
      }
    },
    "IAMPolicy": {
      "clients": {
        "grpc": {
          "libraryClient": "::So::Much::Trash::IAMPolicy::Client",
          "rpcs": {
            "SetIamPolicy": {
              "methods": [
                "set_iam_policy"
              ]
            },
            "GetIamPolicy": {
              "methods": [
                "get_iam_policy"
              ]
            },
            "TestIamPermissions": {
              "methods": [
                "test_iam_permissions"
              ]
            }
          }
        }
      }
    }
  }
}
