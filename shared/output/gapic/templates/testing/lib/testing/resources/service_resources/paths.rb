# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Testing
  module Resources
    module ServiceResources
      # Path helper methods for the ServiceResources API.
      module Paths
        ##
        # Create a fully-qualified RequestAnotherResource resource string.
        #
        # @overload request_another_resource_path()
        #   The resource will be in the following format:
        #
        #   `projects/responses`
        #
        # @overload request_another_resource_path(project:)
        #   The resource will be in the following format:
        #
        #   `projects/{project}/responses`
        #
        #   @param project [String]
        #
        # @return [::String]
        def request_another_resource_path **args
          resources = {
            "" => (proc do
              "projects/responses"
            end),
            "project" => (proc do |project:|
              "projects/#{project}/responses"
            end)
          }

          resource = resources[args.keys.sort.join(":")]
          raise ::ArgumentError, "no resource found for values #{args.keys}" if resource.nil?
          resource.call(**args)
        end

        ##
        # Create a fully-qualified RequestFourthResource resource string.
        #
        # The resource will be in the following format:
        #
        # `projects/{project}/resources/{resource}/versions/{version}`
        #
        # @param project [String]
        # @param resource [String]
        # @param version [String]
        #
        # @return [::String]
        def request_fourth_resource_path project:, resource:, version:
          raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"
          raise ::ArgumentError, "resource cannot contain /" if resource.to_s.include? "/"

          "projects/#{project}/resources/#{resource}/versions/#{version}"
        end

        ##
        # Create a fully-qualified RequestResource resource string.
        #
        # @overload request_resource_path(project:, resource:, version:)
        #   The resource will be in the following format:
        #
        #   `projects/{project}/resources/{resource}/versions/{version}`
        #
        #   @param project [String]
        #   @param resource [String]
        #   @param version [String]
        #
        # @overload request_resource_path(project:, resource:, subject:, version:)
        #   The resource will be in the following format:
        #
        #   `projects/{project}/resources/{resource}/subjects/{subject}/versions/{version}`
        #
        #   @param project [String]
        #   @param resource [String]
        #   @param subject [String]
        #   @param version [String]
        #
        # @overload request_resource_path(project:, resource:)
        #   The resource will be in the following format:
        #
        #   `projects/{project}/compatibility/resources/{resource}/versions`
        #
        #   @param project [String]
        #   @param resource [String]
        #
        # @return [::String]
        def request_resource_path **args
          resources = {
            "project:resource:version" => (proc do |project:, resource:, version:|
              raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"
              raise ::ArgumentError, "resource cannot contain /" if resource.to_s.include? "/"

              "projects/#{project}/resources/#{resource}/versions/#{version}"
            end),
            "project:resource:subject:version" => (proc do |project:, resource:, subject:, version:|
              raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"
              raise ::ArgumentError, "resource cannot contain /" if resource.to_s.include? "/"
              raise ::ArgumentError, "subject cannot contain /" if subject.to_s.include? "/"

              "projects/#{project}/resources/#{resource}/subjects/#{subject}/versions/#{version}"
            end),
            "project:resource" => (proc do |project:, resource:|
              raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"

              "projects/#{project}/compatibility/resources/#{resource}/versions"
            end)
          }

          resource = resources[args.keys.sort.join(":")]
          raise ::ArgumentError, "no resource found for values #{args.keys}" if resource.nil?
          resource.call(**args)
        end

        ##
        # Create a fully-qualified RequestThirdResource resource string.
        #
        # The resource will be in the following format:
        #
        # `projects/responses`
        #
        # @return [::String]
        def request_third_resource_path
          "projects/responses"
        end

        extend self
      end
    end
  end
end
