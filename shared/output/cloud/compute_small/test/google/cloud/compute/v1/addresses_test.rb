# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/cloud/compute/v1/compute_small_pb"
require "google/cloud/compute/v1/compute_small_services_pb"
require "google/cloud/compute/v1/addresses"

class ::Google::Cloud::Compute::V1::Addresses::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_aggregated_list
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Compute::V1::AddressAggregatedList.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    filter = "hello world"
    include_all_scopes = true
    max_results = 42
    order_by = "hello world"
    page_token = "hello world"
    project = "hello world"

    aggregated_list_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :aggregated_list, name
      assert_kind_of ::Google::Cloud::Compute::V1::AggregatedListAddressesRequest, request
      assert_equal "hello world", request["filter"]
      assert_equal true, request["include_all_scopes"]
      assert_equal 42, request["max_results"]
      assert_equal "hello world", request["order_by"]
      assert_equal "hello world", request["page_token"]
      assert_equal "hello world", request["project"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, aggregated_list_client_stub do
      # Create client
      client = ::Google::Cloud::Compute::V1::Addresses::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.aggregated_list({ filter: filter, include_all_scopes: include_all_scopes, max_results: max_results, order_by: order_by, page_token: page_token, project: project }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.aggregated_list filter: filter, include_all_scopes: include_all_scopes, max_results: max_results, order_by: order_by, page_token: page_token, project: project do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.aggregated_list ::Google::Cloud::Compute::V1::AggregatedListAddressesRequest.new(filter: filter, include_all_scopes: include_all_scopes, max_results: max_results, order_by: order_by, page_token: page_token, project: project) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.aggregated_list({ filter: filter, include_all_scopes: include_all_scopes, max_results: max_results, order_by: order_by, page_token: page_token, project: project }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.aggregated_list ::Google::Cloud::Compute::V1::AggregatedListAddressesRequest.new(filter: filter, include_all_scopes: include_all_scopes, max_results: max_results, order_by: order_by, page_token: page_token, project: project), grpc_options do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, aggregated_list_client_stub.call_rpc_count
    end
  end

  def test_delete
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Compute::V1::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    address = "hello world"
    project = "hello world"
    region = "hello world"
    request_id = "hello world"

    delete_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete, name
      assert_kind_of ::Google::Cloud::Compute::V1::DeleteAddressRequest, request
      assert_equal "hello world", request["address"]
      assert_equal "hello world", request["project"]
      assert_equal "hello world", request["region"]
      assert_equal "hello world", request["request_id"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_client_stub do
      # Create client
      client = ::Google::Cloud::Compute::V1::Addresses::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete({ address: address, project: project, region: region, request_id: request_id }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete address: address, project: project, region: region, request_id: request_id do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete ::Google::Cloud::Compute::V1::DeleteAddressRequest.new(address: address, project: project, region: region, request_id: request_id) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete({ address: address, project: project, region: region, request_id: request_id }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete ::Google::Cloud::Compute::V1::DeleteAddressRequest.new(address: address, project: project, region: region, request_id: request_id), grpc_options do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_client_stub.call_rpc_count
    end
  end

  def test_insert
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Compute::V1::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    address_resource = {}
    project = "hello world"
    region = "hello world"
    request_id = "hello world"

    insert_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :insert, name
      assert_kind_of ::Google::Cloud::Compute::V1::InsertAddressRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Cloud::Compute::V1::Address), request["address_resource"]
      assert_equal "hello world", request["project"]
      assert_equal "hello world", request["region"]
      assert_equal "hello world", request["request_id"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, insert_client_stub do
      # Create client
      client = ::Google::Cloud::Compute::V1::Addresses::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.insert({ address_resource: address_resource, project: project, region: region, request_id: request_id }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.insert address_resource: address_resource, project: project, region: region, request_id: request_id do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.insert ::Google::Cloud::Compute::V1::InsertAddressRequest.new(address_resource: address_resource, project: project, region: region, request_id: request_id) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.insert({ address_resource: address_resource, project: project, region: region, request_id: request_id }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.insert ::Google::Cloud::Compute::V1::InsertAddressRequest.new(address_resource: address_resource, project: project, region: region, request_id: request_id), grpc_options do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, insert_client_stub.call_rpc_count
    end
  end

  def test_list
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Compute::V1::AddressList.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    filter = "hello world"
    max_results = 42
    order_by = "hello world"
    page_token = "hello world"
    project = "hello world"
    region = "hello world"

    list_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list, name
      assert_kind_of ::Google::Cloud::Compute::V1::ListAddressesRequest, request
      assert_equal "hello world", request["filter"]
      assert_equal 42, request["max_results"]
      assert_equal "hello world", request["order_by"]
      assert_equal "hello world", request["page_token"]
      assert_equal "hello world", request["project"]
      assert_equal "hello world", request["region"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_client_stub do
      # Create client
      client = ::Google::Cloud::Compute::V1::Addresses::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list({ filter: filter, max_results: max_results, order_by: order_by, page_token: page_token, project: project, region: region }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list filter: filter, max_results: max_results, order_by: order_by, page_token: page_token, project: project, region: region do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list ::Google::Cloud::Compute::V1::ListAddressesRequest.new(filter: filter, max_results: max_results, order_by: order_by, page_token: page_token, project: project, region: region) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list({ filter: filter, max_results: max_results, order_by: order_by, page_token: page_token, project: project, region: region }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list ::Google::Cloud::Compute::V1::ListAddressesRequest.new(filter: filter, max_results: max_results, order_by: order_by, page_token: page_token, project: project, region: region), grpc_options do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Cloud::Compute::V1::Addresses::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Cloud::Compute::V1::Addresses::Client::Configuration, config
  end
end
