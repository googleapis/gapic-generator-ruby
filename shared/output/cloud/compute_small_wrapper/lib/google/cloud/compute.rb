# frozen_string_literal: true

# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

# Require this file early so that the version constant gets defined before
# requiring "google/cloud". This is because google-cloud-core will load the
# entrypoint (gem name) file, which in turn re-requires this file (hence
# causing a require cycle) unless the version constant is already defined.
require "google/cloud/compute/version"

require "googleauth"
gem "google-cloud-core"
require "google/cloud" unless defined? ::Google::Cloud.new
require "google/cloud/config"

# Set the default configuration
::Google::Cloud.configure.add_config! :compute do |config|
  config.add_field! :endpoint,      nil, match: ::String
  config.add_field! :credentials,   nil, match: [::String, ::Hash, ::Google::Auth::Credentials]
  config.add_field! :scope,         nil, match: [::Array, ::String]
  config.add_field! :lib_name,      nil, match: ::String
  config.add_field! :lib_version,   nil, match: ::String
  config.add_field! :timeout,       nil, match: ::Numeric
  config.add_field! :metadata,      nil, match: ::Hash
  config.add_field! :retry_policy,  nil, match: [::Hash, ::Proc]
  config.add_field! :quota_project, nil, match: ::String
  config.add_field! :universe_domain, nil, match: ::String
end

module Google
  module Cloud
    module Compute
      ##
      # Create a new client object for Addresses.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Addresses::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Addresses-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Addresses service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # Raises an exception if the currently installed versioned client gem for the
      # given API version does not support the Addresses service.
      # You can determine whether the method will succeed by calling
      # {Google::Cloud::Compute.addresses_available?}.
      #
      # ## About Addresses
      #
      # The Addresses API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.addresses version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Addresses)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Determines whether the Addresses service is supported by the current client.
      # If true, you can retrieve a client object by calling {Google::Cloud::Compute.addresses}.
      # If false, that method will raise an exception. This could happen if the given
      # API version does not exist or does not support the Addresses service,
      # or if the versioned client gem needs an update to support the Addresses service.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [boolean] Whether the service is available.
      #
      def self.addresses_available? version: :v1
        require "google/cloud/compute/#{version.to_s.downcase}"
        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        return false unless package_name
        service_module = Google::Cloud::Compute.const_get package_name
        return false unless service_module.const_defined? :Addresses
        service_module = service_module.const_get :Addresses
        return false unless service_module.const_defined? :Rest
        service_module = service_module.const_get :Rest
        service_module.const_defined? :Client
      rescue ::LoadError
        false
      end

      ##
      # Create a new client object for RegionOperations.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionOperations::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionOperations-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionOperations service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # Raises an exception if the currently installed versioned client gem for the
      # given API version does not support the RegionOperations service.
      # You can determine whether the method will succeed by calling
      # {Google::Cloud::Compute.region_operations_available?}.
      #
      # ## About RegionOperations
      #
      # The RegionOperations API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_operations version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionOperations)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Determines whether the RegionOperations service is supported by the current client.
      # If true, you can retrieve a client object by calling {Google::Cloud::Compute.region_operations}.
      # If false, that method will raise an exception. This could happen if the given
      # API version does not exist or does not support the RegionOperations service,
      # or if the versioned client gem needs an update to support the RegionOperations service.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [boolean] Whether the service is available.
      #
      def self.region_operations_available? version: :v1
        require "google/cloud/compute/#{version.to_s.downcase}"
        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        return false unless package_name
        service_module = Google::Cloud::Compute.const_get package_name
        return false unless service_module.const_defined? :RegionOperations
        service_module = service_module.const_get :RegionOperations
        return false unless service_module.const_defined? :Rest
        service_module = service_module.const_get :Rest
        service_module.const_defined? :Client
      rescue ::LoadError
        false
      end

      ##
      # Create a new client object for RegionInstanceGroupManagers.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionInstanceGroupManagers::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionInstanceGroupManagers-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionInstanceGroupManagers service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # Raises an exception if the currently installed versioned client gem for the
      # given API version does not support the RegionInstanceGroupManagers service.
      # You can determine whether the method will succeed by calling
      # {Google::Cloud::Compute.region_instance_group_managers_available?}.
      #
      # ## About RegionInstanceGroupManagers
      #
      # The RegionInstanceGroupManagers API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_instance_group_managers version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionInstanceGroupManagers)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Determines whether the RegionInstanceGroupManagers service is supported by the current client.
      # If true, you can retrieve a client object by calling {Google::Cloud::Compute.region_instance_group_managers}.
      # If false, that method will raise an exception. This could happen if the given
      # API version does not exist or does not support the RegionInstanceGroupManagers service,
      # or if the versioned client gem needs an update to support the RegionInstanceGroupManagers service.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [boolean] Whether the service is available.
      #
      def self.region_instance_group_managers_available? version: :v1
        require "google/cloud/compute/#{version.to_s.downcase}"
        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        return false unless package_name
        service_module = Google::Cloud::Compute.const_get package_name
        return false unless service_module.const_defined? :RegionInstanceGroupManagers
        service_module = service_module.const_get :RegionInstanceGroupManagers
        return false unless service_module.const_defined? :Rest
        service_module = service_module.const_get :Rest
        service_module.const_defined? :Client
      rescue ::LoadError
        false
      end

      ##
      # Create a new client object for Networks.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Networks::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Networks-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Networks service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # Raises an exception if the currently installed versioned client gem for the
      # given API version does not support the Networks service.
      # You can determine whether the method will succeed by calling
      # {Google::Cloud::Compute.networks_available?}.
      #
      # ## About Networks
      #
      # The Networks API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.networks version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Networks)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Determines whether the Networks service is supported by the current client.
      # If true, you can retrieve a client object by calling {Google::Cloud::Compute.networks}.
      # If false, that method will raise an exception. This could happen if the given
      # API version does not exist or does not support the Networks service,
      # or if the versioned client gem needs an update to support the Networks service.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [boolean] Whether the service is available.
      #
      def self.networks_available? version: :v1
        require "google/cloud/compute/#{version.to_s.downcase}"
        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        return false unless package_name
        service_module = Google::Cloud::Compute.const_get package_name
        return false unless service_module.const_defined? :Networks
        service_module = service_module.const_get :Networks
        return false unless service_module.const_defined? :Rest
        service_module = service_module.const_get :Rest
        service_module.const_defined? :Client
      rescue ::LoadError
        false
      end

      ##
      # Create a new client object for GlobalOperations.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::GlobalOperations::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-GlobalOperations-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the GlobalOperations service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # Raises an exception if the currently installed versioned client gem for the
      # given API version does not support the GlobalOperations service.
      # You can determine whether the method will succeed by calling
      # {Google::Cloud::Compute.global_operations_available?}.
      #
      # ## About GlobalOperations
      #
      # The GlobalOperations API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.global_operations version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:GlobalOperations)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Determines whether the GlobalOperations service is supported by the current client.
      # If true, you can retrieve a client object by calling {Google::Cloud::Compute.global_operations}.
      # If false, that method will raise an exception. This could happen if the given
      # API version does not exist or does not support the GlobalOperations service,
      # or if the versioned client gem needs an update to support the GlobalOperations service.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [boolean] Whether the service is available.
      #
      def self.global_operations_available? version: :v1
        require "google/cloud/compute/#{version.to_s.downcase}"
        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        return false unless package_name
        service_module = Google::Cloud::Compute.const_get package_name
        return false unless service_module.const_defined? :GlobalOperations
        service_module = service_module.const_get :GlobalOperations
        return false unless service_module.const_defined? :Rest
        service_module = service_module.const_get :Rest
        service_module.const_defined? :Client
      rescue ::LoadError
        false
      end

      ##
      # Configure the google-cloud-compute library.
      #
      # The following configuration parameters are supported:
      #
      # * `credentials` (*type:* `String, Hash, Google::Auth::Credentials`) -
      #   The path to the keyfile as a String, the contents of the keyfile as a
      #   Hash, or a Google::Auth::Credentials object.
      # * `lib_name` (*type:* `String`) -
      #   The library name as recorded in instrumentation and logging.
      # * `lib_version` (*type:* `String`) -
      #   The library version as recorded in instrumentation and logging.
      # * `timeout` (*type:* `Numeric`) -
      #   Default timeout in seconds.
      # * `metadata` (*type:* `Hash{Symbol=>String}`) -
      #   Additional headers to be sent with the call.
      # * `retry_policy` (*type:* `Hash`) -
      #   The retry policy. The value is a hash with the following keys:
      #     * `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
      #     * `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
      #     * `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
      #     * `:retry_codes` (*type:* `Array<String>`) -
      #       The error codes that should trigger a retry.
      #
      # @return [::Google::Cloud::Config] The default configuration used by this library
      #
      def self.configure
        yield ::Google::Cloud.configure.compute if block_given?

        ::Google::Cloud.configure.compute
      end
    end
  end
end

helper_path = ::File.join __dir__, "compute", "helpers.rb"
require "google/cloud/compute/helpers" if ::File.file? helper_path
