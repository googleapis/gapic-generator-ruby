# frozen_string_literal: true

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

desc "Generate the binary input files"
task :gen do
  Rake::Task["gen:speech"].invoke
  Rake::Task["gen:vision"].invoke
  Rake::Task["gen:showcase"].invoke
  Rake::Task["gen:garbage"].invoke
  Rake::Task["gen:googleads"].invoke
end
namespace :gen do
  desc "Generate the binary input files for speech"
  task :speech do
    speech_protos = [
      "google/cloud/speech/v1/cloud_speech.proto"
    ]
    generate_input_file "speech", speech_protos, "google/cloud/speech/v1/samples"
  end

  desc "Generate the binary input files for vision"
  task :vision do
    vision_protos = [
      "google/cloud/vision/v1/geometry.proto",
      "google/cloud/vision/v1/image_annotator.proto",
      "google/cloud/vision/v1/product_search.proto",
      "google/cloud/vision/v1/product_search_service.proto",
      "google/cloud/vision/v1/text_annotation.proto",
      "google/cloud/vision/v1/web_detection.proto"
    ]
    generate_input_file "vision", vision_protos
  end

  desc "Generate the binary input files for showcase"
  task :showcase do
    showcase_protos = [
      "google/showcase/v1beta1/echo.proto",
      "google/showcase/v1beta1/identity.proto",
      "google/showcase/v1beta1/messaging.proto",
      "google/showcase/v1beta1/testing.proto"
    ]
    generate_input_file "showcase", showcase_protos
  end

  desc "Generate the binary input files for garbage"
  task :garbage do
    garbage_protos = [
      "garbage/garbage.proto"
    ]
    generate_input_file "garbage", garbage_protos
  end

  desc "Generate the binary input files for Google Ads"
  task :googleads do
    googleads_protos = [
      "google/ads/googleads/v1/services/campaign_service.proto"
    ]
    generate_input_file "googleads", googleads_protos
  end
end

require "rake/testtask"
desc "Run functional tests for all custom protos"
task :test do
  Rake::Task["test:showcase"].invoke
end
namespace :test do
  desc "Run functional tests for showcase protos"
  Rake::TestTask.new :showcase do |t|
    t.libs << "test"
    t.test_files = FileList["test/showcase/**/*_test.rb"]
    t.warning = false
  end
end

desc "Start an interactive shell."
task :console do
  require "irb"
  require "irb/completion"
  require "pp"

  $LOAD_PATH.unshift "lib"

  require "gapic/schema"
  def schema service
    bin_proto = File.binread "input/#{service}_desc.bin"
    request = Google::Protobuf::Compiler::CodeGeneratorRequest.decode bin_proto
    Gapic::Schema::Api.new request
  end

  ARGV.clear
  IRB.start
end

desc "Run the CI build"
task :ci do
  puts "\nshared test\n"
  Rake::Task[:test].invoke
end

task default: :ci

def generate_input_file service, protos, samples = nil  # TODO: support multiple paths
  require "tmpdir"

  Dir.mktmpdir do |tmp|
    protoc_cmd = [
      "bundle exec grpc_tools_ruby_protoc #{Array(protos).join " "}",
      "--proto_path=api-common-protos/",
      "--proto_path=googleapis/",
      "--proto_path=protos/",
      "--ruby_gapic_out=#{tmp}",
      # TODO: invoke a custom runner?
      # "--ruby_gapic_opt=generator=cloud",
      # TODO: invoke a custom template path?
      # "--ruby_gapic_opt=templates=../gapic-generator-cloud/templates",
      # "--ruby_gapic_opt=gem_name=google-cloud-#{service}",
      "--ruby_gapic_opt=configuration=../shared/config/#{service}.yml",
      "--ruby_gapic_opt=binary_output=./input/#{service}_desc.bin",
    ]
    puts "--ruby_gapic_opt=samples=../shared/googleapis/#{samples}" unless samples.nil?
    protoc_cmd <<  "--ruby_gapic_opt=samples=../shared/googleapis/#{samples}" unless samples.nil?

    `#{protoc_cmd.join " "}`
  end
end
