# frozen_string_literal: true

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require_relative "./gem_defaults"

supported_apis = {
  gapic: [:showcase, :garbage, :testing, :noservice],
  cloud: [:language_v1, :language_v1beta1, :language_v1beta2, :speech_v1, :vision_v1, :grafeas_v1, :compute_small],
  ads: [:googleads]
}

# noservice does not have generated files, googleads does not have rubocop/yard/tests
test_output_exceptions = [ :noservice, :googleads ]

desc "Generate the binary input files"
task :gen do
  Rake::Task["gen:binaries"].invoke
end
namespace :gen do |gen_namespace|
  desc "Generate the binary input files for template tests"
  task :binaries do |binaries_task|
    gen_namespace.tasks.reject { |t| t == binaries_task }.each do |t|
      puts "Generating binary input for #{t.name}"
      t.invoke
    end
  end
  supported_apis.each do |generator, gems|
    gems.each do |gem|
      desc "Generate the binary input files for #{generator}'s #{gem.to_s}"
      task gem do
        generate_input_file gem
      end
    end
  end
end

require "rake/testtask"
desc "Run functional tests for all custom protos"
task :test do
  Rake::Task["test:showcase"].invoke
end
namespace :test do
  desc "Run functional tests for showcase protos"
  Rake::TestTask.new :showcase do |t|
    t.libs << "test"
    t.test_files = FileList["test/showcase/**/*_test.rb"]
    t.warning = false
  end

  desc "Runs tests for all expected output gems."
  task :output do
    Rake::Task["test:output:all"].invoke
  end


  namespace :output do |output_namespace|
    desc "Generate the binary input files for template tests"
    task :all do |all_task|
      output_namespace.tasks.reject { |t| t == all_task }.each do |t|
        t.invoke
      end
    end

    supported_apis.each do |generator, gems|
      (gems - test_output_exceptions).each do |gem|
        desc "Test output for #{generator}'s #{gem.to_s}"
        task gem do
          test_output generator, gem
        end
      end
    end
  end
end

desc "Start an interactive shell."
task :console do
  require "irb"
  require "irb/completion"
  require "pp"

  $LOAD_PATH.unshift "lib"

  require "gapic/schema"
  def schema service
    bin_proto = File.binread "input/#{service}_desc.bin"
    request = Google::Protobuf::Compiler::CodeGeneratorRequest.decode bin_proto
    Gapic::Schema::Api.new request
  end

  ARGV.clear
  IRB.start
end

desc "Run the CI build"
task :ci do
  puts "\nshared test\n"
  Rake::Task[:test].invoke
  Rake::Task[:"test:output"].invoke
end

task default: :ci

def generate_input_file service
  require "tmpdir"

  Dir.mktmpdir do |tmp|
    protoc_cmd = [
      "grpc_tools_ruby_protoc",
      "--experimental_allow_proto3_optional=1",
      "-I ../shared/protos",
      "-I ../shared/api-common-protos",
      "-I ../shared/googleapis",
      "--ruby_out=#{tmp}/lib",
      "--grpc_out=#{tmp}/lib",
      "--ruby_gapic_out=#{tmp}",
      "--ruby_gapic_opt=configuration=../shared/config/#{service}.yml",
      "--ruby_gapic_opt=binary_output=../shared/input/#{service}_desc.bin"
    ]

    # Add optional samples paths
    samples = samples_for service
    protoc_cmd << "--ruby_gapic_opt='samples=#{samples.join ';'}'" if samples

    # Add optional grpc service config
    grpc_service_config = grpc_service_config_for service
    unless grpc_service_config.empty?
      protoc_cmd << "--ruby_gapic_opt='grpc-service-config=#{grpc_service_config.join ';'}'"
    end

    # Add optional service.yaml
    service_yaml = service_yaml_for service
    if service_yaml
      protoc_cmd << "--ruby_gapic_opt='service-yaml=#{service_yaml}'"
    end

    # Add the proto files
    protoc_cmd << protos_for(service).join(" ")

    protoc_cmd = protoc_cmd.join " "
    puts protoc_cmd if ENV["VERBOSE"]

    protoc_cmd_output = `#{protoc_cmd}`
    puts protoc_cmd_output if ENV["VERBOSE"]
  end
end

def test_output generator, gem
  directory = (generator == :gapic) ? "gapic/templates" : generator
  Dir.chdir "./output/#{directory}/#{gem}" do
    puts ""
    puts "#"*42
    puts "# Testing output for #{generator}'s #{gem}"
    puts "#"*42

    Bundler.with_unbundled_env do
      sh "bundle install"
      puts "Running rubocop for #{gem}"
      sh "bundle exec rake rubocop"
    
      puts "Running yard for #{gem}"
      sh "bundle exec rake yard"
      
      puts "Running test for #{gem}"
      sh "bundle exec rake test"
    end
  end
end
