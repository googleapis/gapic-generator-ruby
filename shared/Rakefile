# frozen_string_literal: true

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require_relative "./gem_defaults"

desc "Generate the binary input files"
task :gen do
  Rake::Task["gen:language_v1"].invoke
  Rake::Task["gen:language_v1beta1"].invoke
  Rake::Task["gen:language_v1beta2"].invoke
  Rake::Task["gen:secretmanager_v1beta1"].invoke
  Rake::Task["gen:speech_v1"].invoke
  Rake::Task["gen:vision_v1"].invoke
  Rake::Task["gen:showcase"].invoke
  Rake::Task["gen:garbage"].invoke
  Rake::Task["gen:googleads"].invoke
end

namespace :gen do
  desc "Generate the binary input files for language v1"
  task :language_v1 do
    generate_input_file :language_v1
  end

  desc "Generate the binary input files for language v1beta1"
  task :language_v1beta1 do
    generate_input_file :language_v1beta1
  end

  desc "Generate the binary input files for language v1beta2"
  task :language_v1beta2 do
    generate_input_file :language_v1beta2
  end

  desc "Generate the binary input files for secretmanager v1beta1"
  task :secretmanager_v1beta1 do
    generate_input_file :secretmanager_v1beta1
  end

  desc "Generate the binary input files for speech v1"
  task :speech_v1 do
    generate_input_file :speech_v1
  end

  desc "Generate the binary input files for vision v1"
  task :vision_v1 do
    generate_input_file :vision_v1
  end

  desc "Generate the binary input files for showcase"
  task :showcase do
    generate_input_file :showcase
  end

  desc "Generate the binary input files for garbage"
  task :garbage do
    generate_input_file :garbage
  end

  desc "Generate the binary input files for Google Ads"
  task :googleads do
    generate_input_file :googleads
  end
end

require "rake/testtask"
desc "Run functional tests for all custom protos"
task :test do
  Rake::Task["test:showcase"].invoke
end
namespace :test do
  desc "Run functional tests for showcase protos"
  Rake::TestTask.new :showcase do |t|
    t.libs << "test"
    t.test_files = FileList["test/showcase/**/*_test.rb"]
    t.warning = false
  end

  desc "Runs tests for all expected output gems."
  task :output do
    {
      gapic: [:showcase, :garbage],
      cloud: [:language_v1, :language_v1beta1, :language_v1beta2, :speech_v1, :vision_v1]
    }.each do |generator, gems|
      directory = (generator == :gapic) ? "gapic/templates" : generator
      gems.each do |gem|
        Dir.chdir "./output/#{directory}/#{gem}" do
          puts ""
          puts "#"*42
          puts "# Testing output for #{generator}'s #{gem}"
          puts "#"*42

          Bundler.with_unbundled_env do
            sh "bundle install"
            puts "Running rubocop for #{gem}"
            sh "bundle exec rake rubocop"
          end
        end
      end
    end
  end
end

desc "Start an interactive shell."
task :console do
  require "irb"
  require "irb/completion"
  require "pp"

  $LOAD_PATH.unshift "lib"

  require "gapic/schema"
  def schema service
    bin_proto = File.binread "input/#{service}_desc.bin"
    request = Google::Protobuf::Compiler::CodeGeneratorRequest.decode bin_proto
    Gapic::Schema::Api.new request
  end

  ARGV.clear
  IRB.start
end

desc "Run the CI build"
task :ci do
  puts "\nshared test\n"
  Rake::Task[:test].invoke
  Rake::Task[:"test:output"].invoke
end

task default: :ci

def generate_input_file service
  require "tmpdir"

  Dir.mktmpdir do |tmp|
    protoc_cmd = [
      "grpc_tools_ruby_protoc",
      "-I ../shared/api-common-protos",
      "-I ../shared/googleapis",
      "-I ../shared/protos",
      "--ruby_out=#{tmp}/lib",
      "--grpc_out=#{tmp}/lib",
      "--ruby_gapic_out=#{tmp}",
      "--ruby_gapic_opt=configuration=../shared/config/#{service}.yml",
      "--ruby_gapic_opt=binary_output=../shared/input/#{service}_desc.bin"
    ]

    # Add optional samples paths
    samples = samples_for service
    protoc_cmd << "--ruby_gapic_opt='samples=#{samples.join ';'}'" if samples

    # Add the proto files
    protos = protos_for service
    protoc_cmd << protos.join(" ")

    protoc_cmd = protoc_cmd.join " "
    puts protoc_cmd if ENV["VERBOSE"]

    protoc_cmd_output = `#{protoc_cmd}`
    puts protoc_cmd_output if ENV["VERBOSE"]
  end
end
