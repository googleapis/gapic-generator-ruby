# frozen_string_literal: true

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


require "bundler/gem_tasks"
require "rubocop/rake_task"
require "rake/testtask"

RuboCop::RakeTask.new # Configuration is in .rubocop.yml
Rake::TestTask.new :test do |t|
  t.libs << "test"
  t.libs << "lib"
  t.test_files = FileList["test/**/*_test.rb"]
end

desc "Run the CI build"
task :ci do
  puts "\nBUILDING gapic-generator-ads\n"
  puts "\ngapic-generator-ads rubocop\n"
  Rake::Task[:rubocop].invoke
  puts "\ngapic-generator-ads test\n"
  Rake::Task[:test].invoke
end

desc "Generate the expected output for tests"
task :gen do
  Rake::Task["gen:templates"].invoke
end
namespace :gen do
  desc "Generate the expected output for template tests"
  task :templates do
    generate_ads_templates "googleads"
  end
end

desc "Start an interactive shell."
task :console do
  require "irb"
  require "irb/completion"
  require "pp"

  $LOAD_PATH.unshift "lib"

  require "google/gapic/schema"
  def schema service
    bin_proto = File.binread "proto_input/#{service}_desc.bin"
    request = Google::Protobuf::Compiler::CodeGeneratorRequest.decode bin_proto
    Google::Gapic::Schema::Api.new request
  end

  ARGV.clear
  IRB.start
end

desc "Build the docker image."
task :image, :name do |_t, args|
  image_name = args[:name] || "ruby-gapic-generator-ads"
  sh "docker build -t #{image_name}:$(git rev-parse HEAD) ."
end
namespace :image do
  desc "Build the docker image using the local base image code"
  task :local, :name do |_t, args|
    image_name = args[:name] || "ruby-gapic-generator-ads"
    mkdir_p "tmp"
    base_source_dir = File.join File.dirname(__dir__), "gapic-generator"
    base_tmp_dir = File.join __dir__, "tmp", "gapic-generator"
    rm_rf base_tmp_dir
    cp_r base_source_dir, base_tmp_dir
    sh "docker build -t #{image_name}:$(git rev-parse HEAD) ."
    rm_r base_tmp_dir
  end
end

def api service
  require "google/gapic/schema/api"
  bin_proto = File.binread "proto_input/#{service}_desc.bin"
  request = Google::Protobuf::Compiler::CodeGeneratorRequest.decode bin_proto
  Google::Gapic::Schema::Api.new request
end

def generate_ads_templates service
  require "fileutils"
  require "google/gapic/generators/ads_generator"

  target_path = File.expand_path File.join("expected_output", service)
  FileUtils.rm_rf target_path
  FileUtils.mkdir_p target_path

  api = api service
  generator = Google::Gapic::Generators::AdsGenerator.new api
  generator.generate.each do |file|
    target_file_path = File.join target_path, file.name
    FileUtils.mkdir_p File.dirname(target_file_path)
    File.write target_file_path, file.content
  end
end

task default: :ci
